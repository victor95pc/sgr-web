(function() {
  var CSRFToken, allowLinkExtensions, anchoredLink, browserCompatibleDocumentParser, browserIsntBuggy, browserSupportsCustomEvents, browserSupportsPushState, browserSupportsTurbolinks, cacheCurrentPage, cacheSize, changePage, constrainPageCacheTo, createDocument, crossOriginLink, currentState, executeScriptTags, extractLink, extractTitleAndBody, fetchHistory, fetchReplacement, handleClick, historyStateIsDefined, htmlExtensions, ignoreClick, initializeTurbolinks, installClickHandlerLast, installDocumentReadyPageEventTriggers, installHistoryChangeHandler, installJqueryAjaxSuccessPageUpdateTrigger, loadedAssets, noTurbolink, nonHtmlLink, nonStandardClick, pageCache, pageChangePrevented, pagesCached, popCookie, processResponse, recallScrollPosition, referer, reflectNewUrl, reflectRedirectedUrl, rememberCurrentState, rememberCurrentUrl, rememberReferer, removeHash, removeHashForIE10compatiblity, removeNoscriptTags, requestMethodIsSafe, resetScrollPosition, targetLink, triggerEvent, visit, xhr, _ref,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  pageCache = {};

  cacheSize = 10;

  currentState = null;

  loadedAssets = null;

  htmlExtensions = ['html'];

  referer = null;

  createDocument = null;

  xhr = null;

  fetchReplacement = function(url) {
    rememberReferer();
    cacheCurrentPage();
    triggerEvent('page:fetch', {
      url: url
    });
    if (xhr != null) {
      xhr.abort();
    }
    xhr = new XMLHttpRequest;
    xhr.open('GET', removeHashForIE10compatiblity(url), true);
    xhr.setRequestHeader('Accept', 'text/html, application/xhtml+xml, application/xml');
    xhr.setRequestHeader('X-XHR-Referer', referer);
    xhr.onload = function() {
      var doc;
      triggerEvent('page:receive');
      if (doc = processResponse()) {
        reflectNewUrl(url);
        changePage.apply(null, extractTitleAndBody(doc));
        reflectRedirectedUrl();
        resetScrollPosition();
        return triggerEvent('page:load');
      } else {
        return document.location.href = url;
      }
    };
    xhr.onloadend = function() {
      return xhr = null;
    };
    xhr.onabort = function() {
      return rememberCurrentUrl();
    };
    xhr.onerror = function() {
      return document.location.href = url;
    };
    return xhr.send();
  };

  fetchHistory = function(cachedPage) {
    cacheCurrentPage();
    if (xhr != null) {
      xhr.abort();
    }
    changePage(cachedPage.title, cachedPage.body);
    recallScrollPosition(cachedPage);
    return triggerEvent('page:restore');
  };

  cacheCurrentPage = function() {
    pageCache[currentState.position] = {
      url: document.location.href,
      body: document.body,
      title: document.title,
      positionY: window.pageYOffset,
      positionX: window.pageXOffset
    };
    return constrainPageCacheTo(cacheSize);
  };

  pagesCached = function(size) {
    if (size == null) {
      size = cacheSize;
    }
    if (/^[\d]+$/.test(size)) {
      return cacheSize = parseInt(size);
    }
  };

  constrainPageCacheTo = function(limit) {
    var key, value;
    for (key in pageCache) {
      if (!__hasProp.call(pageCache, key)) continue;
      value = pageCache[key];
      if (!(key <= currentState.position - limit)) {
        continue;
      }
      triggerEvent('page:expire', pageCache[key]);
      pageCache[key] = null;
    }
  };

  changePage = function(title, body, csrfToken, runScripts) {
    document.title = title;
    document.documentElement.replaceChild(body, document.body);
    if (csrfToken != null) {
      CSRFToken.update(csrfToken);
    }
    if (runScripts) {
      executeScriptTags();
    }
    currentState = window.history.state;
    triggerEvent('page:change');
    return triggerEvent('page:update');
  };

  executeScriptTags = function() {
    var attr, copy, nextSibling, parentNode, script, scripts, _i, _j, _len, _len1, _ref, _ref1;
    scripts = Array.prototype.slice.call(document.body.querySelectorAll('script:not([data-turbolinks-eval="false"])'));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (!((_ref = script.type) === '' || _ref === 'text/javascript')) {
        continue;
      }
      copy = document.createElement('script');
      _ref1 = script.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        attr = _ref1[_j];
        copy.setAttribute(attr.name, attr.value);
      }
      copy.appendChild(document.createTextNode(script.innerHTML));
      parentNode = script.parentNode, nextSibling = script.nextSibling;
      parentNode.removeChild(script);
      parentNode.insertBefore(copy, nextSibling);
    }
  };

  removeNoscriptTags = function(node) {
    node.innerHTML = node.innerHTML.replace(/<noscript[\S\s]*?<\/noscript>/ig, '');
    return node;
  };

  reflectNewUrl = function(url) {
    if (url !== referer) {
      return window.history.pushState({
        turbolinks: true,
        position: currentState.position + 1
      }, '', url);
    }
  };

  reflectRedirectedUrl = function() {
    var location, preservedHash;
    if (location = xhr.getResponseHeader('X-XHR-Redirected-To')) {
      preservedHash = removeHash(location) === location ? document.location.hash : '';
      return window.history.replaceState(currentState, '', location + preservedHash);
    }
  };

  rememberReferer = function() {
    return referer = document.location.href;
  };

  rememberCurrentUrl = function() {
    return window.history.replaceState({
      turbolinks: true,
      position: Date.now()
    }, '', document.location.href);
  };

  rememberCurrentState = function() {
    return currentState = window.history.state;
  };

  recallScrollPosition = function(page) {
    return window.scrollTo(page.positionX, page.positionY);
  };

  resetScrollPosition = function() {
    if (document.location.hash) {
      return document.location.href = document.location.href;
    } else {
      return window.scrollTo(0, 0);
    }
  };

  removeHashForIE10compatiblity = function(url) {
    return removeHash(url);
  };

  removeHash = function(url) {
    var link;
    link = url;
    if (url.href == null) {
      link = document.createElement('A');
      link.href = url;
    }
    return link.href.replace(link.hash, '');
  };

  popCookie = function(name) {
    var value, _ref;
    value = ((_ref = document.cookie.match(new RegExp(name + "=(\\w+)"))) != null ? _ref[1].toUpperCase() : void 0) || '';
    document.cookie = name + '=; expires=Thu, 01-Jan-70 00:00:01 GMT; path=/';
    return value;
  };

  triggerEvent = function(name, data) {
    var event;
    event = document.createEvent('Events');
    if (data) {
      event.data = data;
    }
    event.initEvent(name, true, true);
    return document.dispatchEvent(event);
  };

  pageChangePrevented = function() {
    return !triggerEvent('page:before-change');
  };

  processResponse = function() {
    var assetsChanged, clientOrServerError, doc, extractTrackAssets, intersection, validContent;
    clientOrServerError = function() {
      var _ref;
      return (400 <= (_ref = xhr.status) && _ref < 600);
    };
    validContent = function() {
      return xhr.getResponseHeader('Content-Type').match(/^(?:text\/html|application\/xhtml\+xml|application\/xml)(?:;|$)/);
    };
    extractTrackAssets = function(doc) {
      var node, _i, _len, _ref, _results;
      _ref = doc.head.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if ((typeof node.getAttribute === "function" ? node.getAttribute('data-turbolinks-track') : void 0) != null) {
          _results.push(node.getAttribute('src') || node.getAttribute('href'));
        }
      }
      return _results;
    };
    assetsChanged = function(doc) {
      var fetchedAssets;
      loadedAssets || (loadedAssets = extractTrackAssets(document));
      fetchedAssets = extractTrackAssets(doc);
      return fetchedAssets.length !== loadedAssets.length || intersection(fetchedAssets, loadedAssets).length !== loadedAssets.length;
    };
    intersection = function(a, b) {
      var value, _i, _len, _ref, _results;
      if (a.length > b.length) {
        _ref = [b, a], a = _ref[0], b = _ref[1];
      }
      _results = [];
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        value = a[_i];
        if (__indexOf.call(b, value) >= 0) {
          _results.push(value);
        }
      }
      return _results;
    };
    if (!clientOrServerError() && validContent()) {
      doc = createDocument(xhr.responseText);
      if (doc && !assetsChanged(doc)) {
        return doc;
      }
    }
  };

  extractTitleAndBody = function(doc) {
    var title;
    title = doc.querySelector('title');
    return [title != null ? title.textContent : void 0, removeNoscriptTags(doc.body), CSRFToken.get(doc).token, 'runScripts'];
  };

  CSRFToken = {
    get: function(doc) {
      var tag;
      if (doc == null) {
        doc = document;
      }
      return {
        node: tag = doc.querySelector('meta[name="csrf-token"]'),
        token: tag != null ? typeof tag.getAttribute === "function" ? tag.getAttribute('content') : void 0 : void 0
      };
    },
    update: function(latest) {
      var current;
      current = this.get();
      if ((current.token != null) && (latest != null) && current.token !== latest) {
        return current.node.setAttribute('content', latest);
      }
    }
  };

  browserCompatibleDocumentParser = function() {
    var createDocumentUsingDOM, createDocumentUsingParser, createDocumentUsingWrite, e, testDoc, _ref;
    createDocumentUsingParser = function(html) {
      return (new DOMParser).parseFromString(html, 'text/html');
    };
    createDocumentUsingDOM = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.documentElement.innerHTML = html;
      return doc;
    };
    createDocumentUsingWrite = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.open('replace');
      doc.write(html);
      doc.close();
      return doc;
    };
    try {
      if (window.DOMParser) {
        testDoc = createDocumentUsingParser('<html><body><p>test');
        return createDocumentUsingParser;
      }
    } catch (_error) {
      e = _error;
      testDoc = createDocumentUsingDOM('<html><body><p>test');
      return createDocumentUsingDOM;
    } finally {
      if ((testDoc != null ? (_ref = testDoc.body) != null ? _ref.childNodes.length : void 0 : void 0) !== 1) {
        return createDocumentUsingWrite;
      }
    }
  };

  installClickHandlerLast = function(event) {
    if (!event.defaultPrevented) {
      document.removeEventListener('click', handleClick, false);
      return document.addEventListener('click', handleClick, false);
    }
  };

  handleClick = function(event) {
    var link;
    if (!event.defaultPrevented) {
      link = extractLink(event);
      if (link.nodeName === 'A' && !ignoreClick(event, link)) {
        if (!pageChangePrevented()) {
          visit(link.href);
        }
        return event.preventDefault();
      }
    }
  };

  extractLink = function(event) {
    var link;
    link = event.target;
    while (!(!link.parentNode || link.nodeName === 'A')) {
      link = link.parentNode;
    }
    return link;
  };

  crossOriginLink = function(link) {
    return location.protocol !== link.protocol || location.host !== link.host;
  };

  anchoredLink = function(link) {
    return ((link.hash && removeHash(link)) === removeHash(location)) || (link.href === location.href + '#');
  };

  nonHtmlLink = function(link) {
    var url;
    url = removeHash(link);
    return url.match(/\.[a-z]+(\?.*)?$/g) && !url.match(new RegExp("\\.(?:" + (htmlExtensions.join('|')) + ")?(\\?.*)?$", 'g'));
  };

  noTurbolink = function(link) {
    var ignore;
    while (!(ignore || link === document)) {
      ignore = link.getAttribute('data-no-turbolink') != null;
      link = link.parentNode;
    }
    return ignore;
  };

  targetLink = function(link) {
    return link.target.length !== 0;
  };

  nonStandardClick = function(event) {
    return event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
  };

  ignoreClick = function(event, link) {
    return crossOriginLink(link) || anchoredLink(link) || nonHtmlLink(link) || noTurbolink(link) || targetLink(link) || nonStandardClick(event);
  };

  allowLinkExtensions = function() {
    var extension, extensions, _i, _len;
    extensions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = extensions.length; _i < _len; _i++) {
      extension = extensions[_i];
      htmlExtensions.push(extension);
    }
    return htmlExtensions;
  };

  installDocumentReadyPageEventTriggers = function() {
    return document.addEventListener('DOMContentLoaded', (function() {
      triggerEvent('page:change');
      return triggerEvent('page:update');
    }), true);
  };

  installJqueryAjaxSuccessPageUpdateTrigger = function() {
    if (typeof jQuery !== 'undefined') {
      return jQuery(document).on('ajaxSuccess', function(event, xhr, settings) {
        if (!jQuery.trim(xhr.responseText)) {
          return;
        }
        return triggerEvent('page:update');
      });
    }
  };

  installHistoryChangeHandler = function(event) {
    var cachedPage, _ref;
    if ((_ref = event.state) != null ? _ref.turbolinks : void 0) {
      if (cachedPage = pageCache[event.state.position]) {
        return fetchHistory(cachedPage);
      } else {
        return visit(event.target.location.href);
      }
    }
  };

  initializeTurbolinks = function() {
    rememberCurrentUrl();
    rememberCurrentState();
    createDocument = browserCompatibleDocumentParser();
    document.addEventListener('click', installClickHandlerLast, true);
    return window.addEventListener('popstate', installHistoryChangeHandler, false);
  };

  historyStateIsDefined = window.history.state !== void 0 || navigator.userAgent.match(/Firefox\/26/);

  browserSupportsPushState = window.history && window.history.pushState && window.history.replaceState && historyStateIsDefined;

  browserIsntBuggy = !navigator.userAgent.match(/CriOS\//);

  requestMethodIsSafe = (_ref = popCookie('request_method')) === 'GET' || _ref === '';

  browserSupportsTurbolinks = browserSupportsPushState && browserIsntBuggy && requestMethodIsSafe;

  browserSupportsCustomEvents = document.addEventListener && document.createEvent;

  if (browserSupportsCustomEvents) {
    installDocumentReadyPageEventTriggers();
    installJqueryAjaxSuccessPageUpdateTrigger();
  }

  if (browserSupportsTurbolinks) {
    visit = fetchReplacement;
    initializeTurbolinks();
  } else {
    visit = function(url) {
      return document.location.href = url;
    };
  }

  this.Turbolinks = {
    visit: visit,
    pagesCached: pagesCached,
    allowLinkExtensions: allowLinkExtensions,
    supported: browserSupportsTurbolinks
  };

}).call(this);
/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.7.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',

    // Button elements boud jquery-ujs
    buttonClickSelector: 'button[data-remote]',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[type=file]',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with]',

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = $('meta[name="csrf-token"]').attr('content');
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element.attr('href');
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, elCrossDomain, crossDomain, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        elCrossDomain = element.data('cross-domain');
        crossDomain = elCrossDomain === undefined ? null : elCrossDomain;
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.attr('method');
          url = element.attr('action');
          data = element.serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: crossDomain
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        var jqxhr = rails.ajax(options);
        element.trigger('ajax:send', jqxhr);
        return jqxhr;
      } else {
        return false;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrf_token = $('meta[name=csrf-token]').attr('content'),
        csrf_param = $('meta[name=csrf-param]').attr('content'),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrf_param !== undefined && csrf_token !== undefined) {
        metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadata_input).appendTo('body');
      form.submit();
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      form.find(rails.disableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        element.data('ujs:enable-with', element[method]());
        element[method](element.data('disable-with'));
        element.prop('disabled', true);
      });
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      form.find(rails.enableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
        element.prop('disabled', false);
      });
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        answer = rails.confirm(message);
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var inputs = $(), input, valueToCheck,
          selector = specifiedSelector || 'input,textarea',
          allInputs = form.find(selector);

      allInputs.each(function() {
        input = $(this);
        valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
        // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
        if (!valueToCheck === !nonBlank) {

          // Don't count unchecked required radio if other radio with same name is checked
          if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
            return true; // Skip to next input
          }

          inputs = inputs.add(input);
        }
      });
      return inputs.length ? inputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      element.data('ujs:enable-with', element.html()); // store enabled state
      element.html(element.data('disable-with')); // set to disabled state
      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
    },

    // restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
    }

  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
        rails.enableElement($(this));
    });

    $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params');
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (link.data('remote') !== undefined) {
        if ( (e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data ) { return true; }

        var handleRemote = rails.handleRemote(link);
        // response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.error( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (link.data('method')) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
      var button = $(this);
      if (!rails.allowAction(button)) return rails.stopEverything(e);

      rails.handleRemote(button);
      return false;
    });

    $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
      var link = $(this);
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
      var form = $(this),
        remote = form.data('remote') !== undefined,
        blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // skip other logic when required values are missing or file upload is present
      if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
        return rails.stopEverything(e);
      }

      if (remote) {
        if (nonBlankFileInputs) {
          // slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      button.closest('form').data('ujs:submit-button', data);
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function(event) {
      if (this == event.target) rails.disableFormElements($(this));
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
      if (this == event.target) rails.enableFormElements($(this));
    });

    $(function(){
      // making sure that all forms have actual up-to-date token(cached forms contain old one)
      var csrf_token = $('meta[name=csrf-token]').attr('content');
      var csrf_param = $('meta[name=csrf-param]').attr('content');
      $('form input[name="' + csrf_param + '"]').val(csrf_token);
    });
  }

})( jQuery );
/*! jQuery UI - v1.9.2 - 2014-01-05
 * http://jqueryui.com
 * Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
 * Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */


(function (e, t) {
    function i(t, i) {
        var s, n, r, o = t.nodeName.toLowerCase();
        return"area" === o ? (s = t.parentNode, n = s.name, t.href && n && "map" === s.nodeName.toLowerCase() ? (r = e("img[usemap=#" + n + "]")[0], !!r && a(r)) : !1) : (/input|select|textarea|button|object/.test(o) ? !t.disabled : "a" === o ? t.href || i : i) && a(t)
    }

    function a(t) {
        return e.expr.filters.visible(t) && !e(t).parents().andSelf().filter(function () {
            return"hidden" === e.css(this, "visibility")
        }).length
    }

    var s = 0, n = /^ui-id-\d+$/;
    e.ui = e.ui || {}, e.ui.version || (e.extend(e.ui, {version: "1.9.2", keyCode: {BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38}}), e.fn.extend({_focus: e.fn.focus, focus: function (t, i) {
        return"number" == typeof t ? this.each(function () {
            var a = this;
            setTimeout(function () {
                e(a).focus(), i && i.call(a)
            }, t)
        }) : this._focus.apply(this, arguments)
    }, scrollParent: function () {
        var t;
        return t = e.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function () {
            return/(relative|absolute|fixed)/.test(e.css(this, "position")) && /(auto|scroll)/.test(e.css(this, "overflow") + e.css(this, "overflow-y") + e.css(this, "overflow-x"))
        }).eq(0) : this.parents().filter(function () {
            return/(auto|scroll)/.test(e.css(this, "overflow") + e.css(this, "overflow-y") + e.css(this, "overflow-x"))
        }).eq(0), /fixed/.test(this.css("position")) || !t.length ? e(document) : t
    }, zIndex: function (i) {
        if (i !== t)return this.css("zIndex", i);
        if (this.length)for (var a, s, n = e(this[0]); n.length && n[0] !== document;) {
            if (a = n.css("position"), ("absolute" === a || "relative" === a || "fixed" === a) && (s = parseInt(n.css("zIndex"), 10), !isNaN(s) && 0 !== s))return s;
            n = n.parent()
        }
        return 0
    }, uniqueId: function () {
        return this.each(function () {
            this.id || (this.id = "ui-id-" + ++s)
        })
    }, removeUniqueId: function () {
        return this.each(function () {
            n.test(this.id) && e(this).removeAttr("id")
        })
    }}), e.extend(e.expr[":"], {data: e.expr.createPseudo ? e.expr.createPseudo(function (t) {
        return function (i) {
            return!!e.data(i, t)
        }
    }) : function (t, i, a) {
        return!!e.data(t, a[3])
    }, focusable: function (t) {
        return i(t, !isNaN(e.attr(t, "tabindex")))
    }, tabbable: function (t) {
        var a = e.attr(t, "tabindex"), s = isNaN(a);
        return(s || a >= 0) && i(t, !s)
    }}), e(function () {
        var t = document.body, i = t.appendChild(i = document.createElement("div"));
        i.offsetHeight, e.extend(i.style, {minHeight: "100px", height: "auto", padding: 0, borderWidth: 0}), e.support.minHeight = 100 === i.offsetHeight, e.support.selectstart = "onselectstart"in i, t.removeChild(i).style.display = "none"
    }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function (i, a) {
        function s(t, i, a, s) {
            return e.each(n, function () {
                i -= parseFloat(e.css(t, "padding" + this)) || 0, a && (i -= parseFloat(e.css(t, "border" + this + "Width")) || 0), s && (i -= parseFloat(e.css(t, "margin" + this)) || 0)
            }), i
        }

        var n = "Width" === a ? ["Left", "Right"] : ["Top", "Bottom"], r = a.toLowerCase(), o = {innerWidth: e.fn.innerWidth, innerHeight: e.fn.innerHeight, outerWidth: e.fn.outerWidth, outerHeight: e.fn.outerHeight};
        e.fn["inner" + a] = function (i) {
            return i === t ? o["inner" + a].call(this) : this.each(function () {
                e(this).css(r, s(this, i) + "px")
            })
        }, e.fn["outer" + a] = function (t, i) {
            return"number" != typeof t ? o["outer" + a].call(this, t) : this.each(function () {
                e(this).css(r, s(this, t, !0, i) + "px")
            })
        }
    }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function (t) {
        return function (i) {
            return arguments.length ? t.call(this, e.camelCase(i)) : t.call(this)
        }
    }(e.fn.removeData)), function () {
        var t = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
        e.ui.ie = t.length ? !0 : !1, e.ui.ie6 = 6 === parseFloat(t[1], 10)
    }(), e.fn.extend({disableSelection: function () {
        return this.bind((e.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (e) {
            e.preventDefault()
        })
    }, enableSelection: function () {
        return this.unbind(".ui-disableSelection")
    }}), e.extend(e.ui, {plugin: {add: function (t, i, a) {
        var s, n = e.ui[t].prototype;
        for (s in a)n.plugins[s] = n.plugins[s] || [], n.plugins[s].push([i, a[s]])
    }, call: function (e, t, i) {
        var a, s = e.plugins[t];
        if (s && e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType)for (a = 0; s.length > a; a++)e.options[s[a][0]] && s[a][1].apply(e.element, i)
    }}, contains: e.contains, hasScroll: function (t, i) {
        if ("hidden" === e(t).css("overflow"))return!1;
        var a = i && "left" === i ? "scrollLeft" : "scrollTop", s = !1;
        return t[a] > 0 ? !0 : (t[a] = 1, s = t[a] > 0, t[a] = 0, s)
    }, isOverAxis: function (e, t, i) {
        return e > t && t + i > e
    }, isOver: function (t, i, a, s, n, r) {
        return e.ui.isOverAxis(t, a, n) && e.ui.isOverAxis(i, s, r)
    }}))
})(jQuery);
(function (e, t) {
    var i = 0, s = Array.prototype.slice, a = e.cleanData;
    e.cleanData = function (t) {
        for (var i, s = 0; null != (i = t[s]); s++)try {
            e(i).triggerHandler("remove")
        } catch (n) {
        }
        a(t)
    }, e.widget = function (i, s, a) {
        var n, r, o, h, l = i.split(".")[0];
        i = i.split(".")[1], n = l + "-" + i, a || (a = s, s = e.Widget), e.expr[":"][n.toLowerCase()] = function (t) {
            return!!e.data(t, n)
        }, e[l] = e[l] || {}, r = e[l][i], o = e[l][i] = function (e, i) {
            return this._createWidget ? (arguments.length && this._createWidget(e, i), t) : new o(e, i)
        }, e.extend(o, r, {version: a.version, _proto: e.extend({}, a), _childConstructors: []}), h = new s, h.options = e.widget.extend({}, h.options), e.each(a, function (t, i) {
            e.isFunction(i) && (a[t] = function () {
                var e = function () {
                    return s.prototype[t].apply(this, arguments)
                }, a = function (e) {
                    return s.prototype[t].apply(this, e)
                };
                return function () {
                    var t, s = this._super, n = this._superApply;
                    return this._super = e, this._superApply = a, t = i.apply(this, arguments), this._super = s, this._superApply = n, t
                }
            }())
        }), o.prototype = e.widget.extend(h, {widgetEventPrefix: r ? h.widgetEventPrefix : i}, a, {constructor: o, namespace: l, widgetName: i, widgetBaseClass: n, widgetFullName: n}), r ? (e.each(r._childConstructors, function (t, i) {
            var s = i.prototype;
            e.widget(s.namespace + "." + s.widgetName, o, i._proto)
        }), delete r._childConstructors) : s._childConstructors.push(o), e.widget.bridge(i, o)
    }, e.widget.extend = function (i) {
        for (var a, n, r = s.call(arguments, 1), o = 0, h = r.length; h > o; o++)for (a in r[o])n = r[o][a], r[o].hasOwnProperty(a) && n !== t && (i[a] = e.isPlainObject(n) ? e.isPlainObject(i[a]) ? e.widget.extend({}, i[a], n) : e.widget.extend({}, n) : n);
        return i
    }, e.widget.bridge = function (i, a) {
        var n = a.prototype.widgetFullName || i;
        e.fn[i] = function (r) {
            var o = "string" == typeof r, h = s.call(arguments, 1), l = this;
            return r = !o && h.length ? e.widget.extend.apply(null, [r].concat(h)) : r, o ? this.each(function () {
                var s, a = e.data(this, n);
                return a ? e.isFunction(a[r]) && "_" !== r.charAt(0) ? (s = a[r].apply(a, h), s !== a && s !== t ? (l = s && s.jquery ? l.pushStack(s.get()) : s, !1) : t) : e.error("no such method '" + r + "' for " + i + " widget instance") : e.error("cannot call methods on " + i + " prior to initialization; " + "attempted to call method '" + r + "'")
            }) : this.each(function () {
                var t = e.data(this, n);
                t ? t.option(r || {})._init() : e.data(this, n, new a(r, this))
            }), l
        }
    }, e.Widget = function () {
    }, e.Widget._childConstructors = [], e.Widget.prototype = {widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: {disabled: !1, create: null}, _createWidget: function (t, s) {
        s = e(s || this.defaultElement || this)[0], this.element = e(s), this.uuid = i++, this.eventNamespace = "." + this.widgetName + this.uuid, this.options = e.widget.extend({}, this.options, this._getCreateOptions(), t), this.bindings = e(), this.hoverable = e(), this.focusable = e(), s !== this && (e.data(s, this.widgetName, this), e.data(s, this.widgetFullName, this), this._on(!0, this.element, {remove: function (e) {
            e.target === s && this.destroy()
        }}), this.document = e(s.style ? s.ownerDocument : s.document || s), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this._create(), this._trigger("create", null, this._getCreateEventData()), this._init()
    }, _getCreateOptions: e.noop, _getCreateEventData: e.noop, _create: e.noop, _init: e.noop, destroy: function () {
        this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")
    }, _destroy: e.noop, widget: function () {
        return this.element
    }, option: function (i, s) {
        var a, n, r, o = i;
        if (0 === arguments.length)return e.widget.extend({}, this.options);
        if ("string" == typeof i)if (o = {}, a = i.split("."), i = a.shift(), a.length) {
            for (n = o[i] = e.widget.extend({}, this.options[i]), r = 0; a.length - 1 > r; r++)n[a[r]] = n[a[r]] || {}, n = n[a[r]];
            if (i = a.pop(), s === t)return n[i] === t ? null : n[i];
            n[i] = s
        } else {
            if (s === t)return this.options[i] === t ? null : this.options[i];
            o[i] = s
        }
        return this._setOptions(o), this
    }, _setOptions: function (e) {
        var t;
        for (t in e)this._setOption(t, e[t]);
        return this
    }, _setOption: function (e, t) {
        return this.options[e] = t, "disabled" === e && (this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!t).attr("aria-disabled", t), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")), this
    }, enable: function () {
        return this._setOption("disabled", !1)
    }, disable: function () {
        return this._setOption("disabled", !0)
    }, _on: function (i, s, a) {
        var n, r = this;
        "boolean" != typeof i && (a = s, s = i, i = !1), a ? (s = n = e(s), this.bindings = this.bindings.add(s)) : (a = s, s = this.element, n = this.widget()), e.each(a, function (a, o) {
            function h() {
                return i || r.options.disabled !== !0 && !e(this).hasClass("ui-state-disabled") ? ("string" == typeof o ? r[o] : o).apply(r, arguments) : t
            }

            "string" != typeof o && (h.guid = o.guid = o.guid || h.guid || e.guid++);
            var l = a.match(/^(\w+)\s*(.*)$/), u = l[1] + r.eventNamespace, c = l[2];
            c ? n.delegate(c, u, h) : s.bind(u, h)
        })
    }, _off: function (e, t) {
        t = (t || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.unbind(t).undelegate(t)
    }, _delay: function (e, t) {
        function i() {
            return("string" == typeof e ? s[e] : e).apply(s, arguments)
        }

        var s = this;
        return setTimeout(i, t || 0)
    }, _hoverable: function (t) {
        this.hoverable = this.hoverable.add(t), this._on(t, {mouseenter: function (t) {
            e(t.currentTarget).addClass("ui-state-hover")
        }, mouseleave: function (t) {
            e(t.currentTarget).removeClass("ui-state-hover")
        }})
    }, _focusable: function (t) {
        this.focusable = this.focusable.add(t), this._on(t, {focusin: function (t) {
            e(t.currentTarget).addClass("ui-state-focus")
        }, focusout: function (t) {
            e(t.currentTarget).removeClass("ui-state-focus")
        }})
    }, _trigger: function (t, i, s) {
        var a, n, r = this.options[t];
        if (s = s || {}, i = e.Event(i), i.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), i.target = this.element[0], n = i.originalEvent)for (a in n)a in i || (i[a] = n[a]);
        return this.element.trigger(i, s), !(e.isFunction(r) && r.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented())
    }}, e.each({show: "fadeIn", hide: "fadeOut"}, function (t, i) {
        e.Widget.prototype["_" + t] = function (s, a, n) {
            "string" == typeof a && (a = {effect: a});
            var r, o = a ? a === !0 || "number" == typeof a ? i : a.effect || i : t;
            a = a || {}, "number" == typeof a && (a = {duration: a}), r = !e.isEmptyObject(a), a.complete = n, a.delay && s.delay(a.delay), r && e.effects && (e.effects.effect[o] || e.uiBackCompat !== !1 && e.effects[o]) ? s[t](a) : o !== t && s[o] ? s[o](a.duration, a.easing, n) : s.queue(function (i) {
                e(this)[t](), n && n.call(s[0]), i()
            })
        }
    }), e.uiBackCompat !== !1 && (e.Widget.prototype._getCreateOptions = function () {
        return e.metadata && e.metadata.get(this.element[0])[this.widgetName]
    })
})(jQuery);
(function (e) {
    var t = !1;
    e(document).mouseup(function () {
        t = !1
    }), e.widget("ui.mouse", {version: "1.9.2", options: {cancel: "input,textarea,button,select,option", distance: 1, delay: 0}, _mouseInit: function () {
        var t = this;
        this.element.bind("mousedown." + this.widgetName,function (e) {
            return t._mouseDown(e)
        }).bind("click." + this.widgetName, function (i) {
                return!0 === e.data(i.target, t.widgetName + ".preventClickEvent") ? (e.removeData(i.target, t.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : undefined
            }), this.started = !1
    }, _mouseDestroy: function () {
        this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && e(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate)
    }, _mouseDown: function (i) {
        if (!t) {
            this._mouseStarted && this._mouseUp(i), this._mouseDownEvent = i;
            var s = this, a = 1 === i.which, n = "string" == typeof this.options.cancel && i.target.nodeName ? e(i.target).closest(this.options.cancel).length : !1;
            return a && !n && this._mouseCapture(i) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
                s.mouseDelayMet = !0
            }, this.options.delay)), this._mouseDistanceMet(i) && this._mouseDelayMet(i) && (this._mouseStarted = this._mouseStart(i) !== !1, !this._mouseStarted) ? (i.preventDefault(), !0) : (!0 === e.data(i.target, this.widgetName + ".preventClickEvent") && e.removeData(i.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (e) {
                return s._mouseMove(e)
            }, this._mouseUpDelegate = function (e) {
                return s._mouseUp(e)
            }, e(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), i.preventDefault(), t = !0, !0)) : !0
        }
    }, _mouseMove: function (t) {
        return!e.ui.ie || document.documentMode >= 9 || t.button ? this._mouseStarted ? (this._mouseDrag(t), t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, t) !== !1, this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted) : this._mouseUp(t)
    }, _mouseUp: function (t) {
        return e(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && e.data(t.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(t)), !1
    }, _mouseDistanceMet: function (e) {
        return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance
    }, _mouseDelayMet: function () {
        return this.mouseDelayMet
    }, _mouseStart: function () {
    }, _mouseDrag: function () {
    }, _mouseStop: function () {
    }, _mouseCapture: function () {
        return!0
    }})
})(jQuery);
(function (e, t) {
    function i(e, t, i) {
        return[parseInt(e[0], 10) * (d.test(e[0]) ? t / 100 : 1), parseInt(e[1], 10) * (d.test(e[1]) ? i / 100 : 1)]
    }

    function s(t, i) {
        return parseInt(e.css(t, i), 10) || 0
    }

    e.ui = e.ui || {};
    var a, n = Math.max, r = Math.abs, o = Math.round, l = /left|center|right/, h = /top|center|bottom/, u = /[\+\-]\d+%?/, c = /^\w+/, d = /%$/, p = e.fn.position;
    e.position = {scrollbarWidth: function () {
        if (a !== t)return a;
        var i, s, n = e("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), r = n.children()[0];
        return e("body").append(n), i = r.offsetWidth, n.css("overflow", "scroll"), s = r.offsetWidth, i === s && (s = n[0].clientWidth), n.remove(), a = i - s
    }, getScrollInfo: function (t) {
        var i = t.isWindow ? "" : t.element.css("overflow-x"), s = t.isWindow ? "" : t.element.css("overflow-y"), a = "scroll" === i || "auto" === i && t.width < t.element[0].scrollWidth, n = "scroll" === s || "auto" === s && t.height < t.element[0].scrollHeight;
        return{width: a ? e.position.scrollbarWidth() : 0, height: n ? e.position.scrollbarWidth() : 0}
    }, getWithinInfo: function (t) {
        var i = e(t || window), s = e.isWindow(i[0]);
        return{element: i, isWindow: s, offset: i.offset() || {left: 0, top: 0}, scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop(), width: s ? i.width() : i.outerWidth(), height: s ? i.height() : i.outerHeight()}
    }}, e.fn.position = function (t) {
        if (!t || !t.of)return p.apply(this, arguments);
        t = e.extend({}, t);
        var a, d, f, m, g, v = e(t.of), y = e.position.getWithinInfo(t.within), b = e.position.getScrollInfo(y), _ = v[0], x = (t.collision || "flip").split(" "), k = {};
        return 9 === _.nodeType ? (d = v.width(), f = v.height(), m = {top: 0, left: 0}) : e.isWindow(_) ? (d = v.width(), f = v.height(), m = {top: v.scrollTop(), left: v.scrollLeft()}) : _.preventDefault ? (t.at = "left top", d = f = 0, m = {top: _.pageY, left: _.pageX}) : (d = v.outerWidth(), f = v.outerHeight(), m = v.offset()), g = e.extend({}, m), e.each(["my", "at"], function () {
            var e, i, s = (t[this] || "").split(" ");
            1 === s.length && (s = l.test(s[0]) ? s.concat(["center"]) : h.test(s[0]) ? ["center"].concat(s) : ["center", "center"]), s[0] = l.test(s[0]) ? s[0] : "center", s[1] = h.test(s[1]) ? s[1] : "center", e = u.exec(s[0]), i = u.exec(s[1]), k[this] = [e ? e[0] : 0, i ? i[0] : 0], t[this] = [c.exec(s[0])[0], c.exec(s[1])[0]]
        }), 1 === x.length && (x[1] = x[0]), "right" === t.at[0] ? g.left += d : "center" === t.at[0] && (g.left += d / 2), "bottom" === t.at[1] ? g.top += f : "center" === t.at[1] && (g.top += f / 2), a = i(k.at, d, f), g.left += a[0], g.top += a[1], this.each(function () {
            var l, h, u = e(this), c = u.outerWidth(), p = u.outerHeight(), _ = s(this, "marginLeft"), w = s(this, "marginTop"), D = c + _ + s(this, "marginRight") + b.width, T = p + w + s(this, "marginBottom") + b.height, M = e.extend({}, g), S = i(k.my, u.outerWidth(), u.outerHeight());
            "right" === t.my[0] ? M.left -= c : "center" === t.my[0] && (M.left -= c / 2), "bottom" === t.my[1] ? M.top -= p : "center" === t.my[1] && (M.top -= p / 2), M.left += S[0], M.top += S[1], e.support.offsetFractions || (M.left = o(M.left), M.top = o(M.top)), l = {marginLeft: _, marginTop: w}, e.each(["left", "top"], function (i, s) {
                e.ui.position[x[i]] && e.ui.position[x[i]][s](M, {targetWidth: d, targetHeight: f, elemWidth: c, elemHeight: p, collisionPosition: l, collisionWidth: D, collisionHeight: T, offset: [a[0] + S[0], a[1] + S[1]], my: t.my, at: t.at, within: y, elem: u})
            }), e.fn.bgiframe && u.bgiframe(), t.using && (h = function (e) {
                var i = m.left - M.left, s = i + d - c, a = m.top - M.top, o = a + f - p, l = {target: {element: v, left: m.left, top: m.top, width: d, height: f}, element: {element: u, left: M.left, top: M.top, width: c, height: p}, horizontal: 0 > s ? "left" : i > 0 ? "right" : "center", vertical: 0 > o ? "top" : a > 0 ? "bottom" : "middle"};
                c > d && d > r(i + s) && (l.horizontal = "center"), p > f && f > r(a + o) && (l.vertical = "middle"), l.important = n(r(i), r(s)) > n(r(a), r(o)) ? "horizontal" : "vertical", t.using.call(this, e, l)
            }), u.offset(e.extend(M, {using: h}))
        })
    }, e.ui.position = {fit: {left: function (e, t) {
        var i, s = t.within, a = s.isWindow ? s.scrollLeft : s.offset.left, r = s.width, o = e.left - t.collisionPosition.marginLeft, l = a - o, h = o + t.collisionWidth - r - a;
        t.collisionWidth > r ? l > 0 && 0 >= h ? (i = e.left + l + t.collisionWidth - r - a, e.left += l - i) : e.left = h > 0 && 0 >= l ? a : l > h ? a + r - t.collisionWidth : a : l > 0 ? e.left += l : h > 0 ? e.left -= h : e.left = n(e.left - o, e.left)
    }, top: function (e, t) {
        var i, s = t.within, a = s.isWindow ? s.scrollTop : s.offset.top, r = t.within.height, o = e.top - t.collisionPosition.marginTop, l = a - o, h = o + t.collisionHeight - r - a;
        t.collisionHeight > r ? l > 0 && 0 >= h ? (i = e.top + l + t.collisionHeight - r - a, e.top += l - i) : e.top = h > 0 && 0 >= l ? a : l > h ? a + r - t.collisionHeight : a : l > 0 ? e.top += l : h > 0 ? e.top -= h : e.top = n(e.top - o, e.top)
    }}, flip: {left: function (e, t) {
        var i, s, a = t.within, n = a.offset.left + a.scrollLeft, o = a.width, l = a.isWindow ? a.scrollLeft : a.offset.left, h = e.left - t.collisionPosition.marginLeft, u = h - l, c = h + t.collisionWidth - o - l, d = "left" === t.my[0] ? -t.elemWidth : "right" === t.my[0] ? t.elemWidth : 0, p = "left" === t.at[0] ? t.targetWidth : "right" === t.at[0] ? -t.targetWidth : 0, f = -2 * t.offset[0];
        0 > u ? (i = e.left + d + p + f + t.collisionWidth - o - n, (0 > i || r(u) > i) && (e.left += d + p + f)) : c > 0 && (s = e.left - t.collisionPosition.marginLeft + d + p + f - l, (s > 0 || c > r(s)) && (e.left += d + p + f))
    }, top: function (e, t) {
        var i, s, a = t.within, n = a.offset.top + a.scrollTop, o = a.height, l = a.isWindow ? a.scrollTop : a.offset.top, h = e.top - t.collisionPosition.marginTop, u = h - l, c = h + t.collisionHeight - o - l, d = "top" === t.my[1], p = d ? -t.elemHeight : "bottom" === t.my[1] ? t.elemHeight : 0, f = "top" === t.at[1] ? t.targetHeight : "bottom" === t.at[1] ? -t.targetHeight : 0, m = -2 * t.offset[1];
        0 > u ? (s = e.top + p + f + m + t.collisionHeight - o - n, e.top + p + f + m > u && (0 > s || r(u) > s) && (e.top += p + f + m)) : c > 0 && (i = e.top - t.collisionPosition.marginTop + p + f + m - l, e.top + p + f + m > c && (i > 0 || c > r(i)) && (e.top += p + f + m))
    }}, flipfit: {left: function () {
        e.ui.position.flip.left.apply(this, arguments), e.ui.position.fit.left.apply(this, arguments)
    }, top: function () {
        e.ui.position.flip.top.apply(this, arguments), e.ui.position.fit.top.apply(this, arguments)
    }}}, function () {
        var t, i, s, a, n, r = document.getElementsByTagName("body")[0], o = document.createElement("div");
        t = document.createElement(r ? "div" : "body"), s = {visibility: "hidden", width: 0, height: 0, border: 0, margin: 0, background: "none"}, r && e.extend(s, {position: "absolute", left: "-1000px", top: "-1000px"});
        for (n in s)t.style[n] = s[n];
        t.appendChild(o), i = r || document.documentElement, i.insertBefore(t, i.firstChild), o.style.cssText = "position: absolute; left: 10.7432222px;", a = e(o).offset().left, e.support.offsetFractions = a > 10 && 11 > a, t.innerHTML = "", i.removeChild(t)
    }(), e.uiBackCompat !== !1 && function (e) {
        var i = e.fn.position;
        e.fn.position = function (s) {
            if (!s || !s.offset)return i.call(this, s);
            var a = s.offset.split(" "), n = s.at.split(" ");
            return 1 === a.length && (a[1] = a[0]), /^\d/.test(a[0]) && (a[0] = "+" + a[0]), /^\d/.test(a[1]) && (a[1] = "+" + a[1]), 1 === n.length && (/left|center|right/.test(n[0]) ? n[1] = "center" : (n[1] = n[0], n[0] = "center")), i.call(this, e.extend(s, {at: n[0] + a[0] + " " + n[1] + a[1], offset: t}))
        }
    }(jQuery)
})(jQuery);
(function (e) {
    e.widget("ui.draggable", e.ui.mouse, {version: "1.9.2", widgetEventPrefix: "drag", options: {addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500, scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1}, _create: function () {
        "original" != this.options.helper || /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative"), this.options.addClasses && this.element.addClass("ui-draggable"), this.options.disabled && this.element.addClass("ui-draggable-disabled"), this._mouseInit()
    }, _destroy: function () {
        this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), this._mouseDestroy()
    }, _mouseCapture: function (t) {
        var i = this.options;
        return this.helper || i.disabled || e(t.target).is(".ui-resizable-handle") ? !1 : (this.handle = this._getHandle(t), this.handle ? (e(i.iframeFix === !0 ? "iframe" : i.iframeFix).each(function () {
            e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width: this.offsetWidth + "px", height: this.offsetHeight + "px", position: "absolute", opacity: "0.001", zIndex: 1e3}).css(e(this).offset()).appendTo("body")
        }), !0) : !1)
    }, _mouseStart: function (t) {
        var i = this.options;
        return this.helper = this._createHelper(t), this.helper.addClass("ui-draggable-dragging"), this._cacheHelperProportions(), e.ui.ddmanager && (e.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(), this.offset = this.positionAbs = this.element.offset(), this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left}, e.extend(this.offset, {click: {left: t.pageX - this.offset.left, top: t.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()}), this.originalPosition = this.position = this._generatePosition(t), this.originalPageX = t.pageX, this.originalPageY = t.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), i.containment && this._setContainment(), this._trigger("start", t) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), e.ui.ddmanager && !i.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t), this._mouseDrag(t, !0), e.ui.ddmanager && e.ui.ddmanager.dragStart(this, t), !0)
    }, _mouseDrag: function (t, i) {
        if (this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo("absolute"), !i) {
            var a = this._uiHash();
            if (this._trigger("drag", t, a) === !1)return this._mouseUp({}), !1;
            this.position = a.position
        }
        return this.options.axis && "y" == this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" == this.options.axis || (this.helper[0].style.top = this.position.top + "px"), e.ui.ddmanager && e.ui.ddmanager.drag(this, t), !1
    }, _mouseStop: function (t) {
        var i = !1;
        e.ui.ddmanager && !this.options.dropBehaviour && (i = e.ui.ddmanager.drop(this, t)), this.dropped && (i = this.dropped, this.dropped = !1);
        for (var a = this.element[0], s = !1; a && (a = a.parentNode);)a == document && (s = !0);
        if (!s && "original" === this.options.helper)return!1;
        if ("invalid" == this.options.revert && !i || "valid" == this.options.revert && i || this.options.revert === !0 || e.isFunction(this.options.revert) && this.options.revert.call(this.element, i)) {
            var n = this;
            e(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                n._trigger("stop", t) !== !1 && n._clear()
            })
        } else this._trigger("stop", t) !== !1 && this._clear();
        return!1
    }, _mouseUp: function (t) {
        return e("div.ui-draggable-iframeFix").each(function () {
            this.parentNode.removeChild(this)
        }), e.ui.ddmanager && e.ui.ddmanager.dragStop(this, t), e.ui.mouse.prototype._mouseUp.call(this, t)
    }, cancel: function () {
        return this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear(), this
    }, _getHandle: function (t) {
        var i = this.options.handle && e(this.options.handle, this.element).length ? !1 : !0;
        return e(this.options.handle, this.element).find("*").andSelf().each(function () {
            this == t.target && (i = !0)
        }), i
    }, _createHelper: function (t) {
        var i = this.options, a = e.isFunction(i.helper) ? e(i.helper.apply(this.element[0], [t])) : "clone" == i.helper ? this.element.clone().removeAttr("id") : this.element;
        return a.parents("body").length || a.appendTo("parent" == i.appendTo ? this.element[0].parentNode : i.appendTo), a[0] == this.element[0] || /(fixed|absolute)/.test(a.css("position")) || a.css("position", "absolute"), a
    }, _adjustOffsetFromHelper: function (t) {
        "string" == typeof t && (t = t.split(" ")), e.isArray(t) && (t = {left: +t[0], top: +t[1] || 0}), "left"in t && (this.offset.click.left = t.left + this.margins.left), "right"in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), "top"in t && (this.offset.click.top = t.top + this.margins.top), "bottom"in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top)
    }, _getParentOffset: function () {
        this.offsetParent = this.helper.offsetParent();
        var t = this.offsetParent.offset();
        return"absolute" == this.cssPosition && this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), t.top += this.scrollParent.scrollTop()), (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && "html" == this.offsetParent[0].tagName.toLowerCase() && e.ui.ie) && (t = {top: 0, left: 0}), {top: t.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)}
    }, _getRelativeOffset: function () {
        if ("relative" == this.cssPosition) {
            var e = this.element.position();
            return{top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()}
        }
        return{top: 0, left: 0}
    }, _cacheMargins: function () {
        this.margins = {left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0}
    }, _cacheHelperProportions: function () {
        this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
    }, _setContainment: function () {
        var t = this.options;
        if ("parent" == t.containment && (t.containment = this.helper[0].parentNode), ("document" == t.containment || "window" == t.containment) && (this.containment = ["document" == t.containment ? 0 : e(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, "document" == t.containment ? 0 : e(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, ("document" == t.containment ? 0 : e(window).scrollLeft()) + e("document" == t.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ("document" == t.containment ? 0 : e(window).scrollTop()) + (e("document" == t.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(t.containment) || t.containment.constructor == Array)t.containment.constructor == Array && (this.containment = t.containment); else {
            var i = e(t.containment), a = i[0];
            if (!a)return;
            i.offset();
            var s = "hidden" != e(a).css("overflow");
            this.containment = [(parseInt(e(a).css("borderLeftWidth"), 10) || 0) + (parseInt(e(a).css("paddingLeft"), 10) || 0), (parseInt(e(a).css("borderTopWidth"), 10) || 0) + (parseInt(e(a).css("paddingTop"), 10) || 0), (s ? Math.max(a.scrollWidth, a.offsetWidth) : a.offsetWidth) - (parseInt(e(a).css("borderLeftWidth"), 10) || 0) - (parseInt(e(a).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (s ? Math.max(a.scrollHeight, a.offsetHeight) : a.offsetHeight) - (parseInt(e(a).css("borderTopWidth"), 10) || 0) - (parseInt(e(a).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relative_container = i
        }
    }, _convertPositionTo: function (t, i) {
        i || (i = this.position);
        var a = "absolute" == t ? 1 : -1, s = (this.options, "absolute" != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent), n = /(html|body)/i.test(s[0].tagName);
        return{top: i.top + this.offset.relative.top * a + this.offset.parent.top * a - ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : n ? 0 : s.scrollTop()) * a, left: i.left + this.offset.relative.left * a + this.offset.parent.left * a - ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : n ? 0 : s.scrollLeft()) * a}
    }, _generatePosition: function (t) {
        var i = this.options, a = "absolute" != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, s = /(html|body)/i.test(a[0].tagName), n = t.pageX, r = t.pageY;
        if (this.originalPosition) {
            var o;
            if (this.containment) {
                if (this.relative_container) {
                    var l = this.relative_container.offset();
                    o = [this.containment[0] + l.left, this.containment[1] + l.top, this.containment[2] + l.left, this.containment[3] + l.top]
                } else o = this.containment;
                t.pageX - this.offset.click.left < o[0] && (n = o[0] + this.offset.click.left), t.pageY - this.offset.click.top < o[1] && (r = o[1] + this.offset.click.top), t.pageX - this.offset.click.left > o[2] && (n = o[2] + this.offset.click.left), t.pageY - this.offset.click.top > o[3] && (r = o[3] + this.offset.click.top)
            }
            if (i.grid) {
                var h = i.grid[1] ? this.originalPageY + Math.round((r - this.originalPageY) / i.grid[1]) * i.grid[1] : this.originalPageY;
                r = o ? h - this.offset.click.top < o[1] || h - this.offset.click.top > o[3] ? h - this.offset.click.top < o[1] ? h + i.grid[1] : h - i.grid[1] : h : h;
                var u = i.grid[0] ? this.originalPageX + Math.round((n - this.originalPageX) / i.grid[0]) * i.grid[0] : this.originalPageX;
                n = o ? u - this.offset.click.left < o[0] || u - this.offset.click.left > o[2] ? u - this.offset.click.left < o[0] ? u + i.grid[0] : u - i.grid[0] : u : u
            }
        }
        return{top: r - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : s ? 0 : a.scrollTop()), left: n - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : s ? 0 : a.scrollLeft())}
    }, _clear: function () {
        this.helper.removeClass("ui-draggable-dragging"), this.helper[0] == this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1
    }, _trigger: function (t, i, a) {
        return a = a || this._uiHash(), e.ui.plugin.call(this, t, [i, a]), "drag" == t && (this.positionAbs = this._convertPositionTo("absolute")), e.Widget.prototype._trigger.call(this, t, i, a)
    }, plugins: {}, _uiHash: function () {
        return{helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs}
    }}), e.ui.plugin.add("draggable", "connectToSortable", {start: function (t, i) {
        var a = e(this).data("draggable"), s = a.options, n = e.extend({}, i, {item: a.element});
        a.sortables = [], e(s.connectToSortable).each(function () {
            var i = e.data(this, "sortable");
            i && !i.options.disabled && (a.sortables.push({instance: i, shouldRevert: i.options.revert}), i.refreshPositions(), i._trigger("activate", t, n))
        })
    }, stop: function (t, i) {
        var a = e(this).data("draggable"), s = e.extend({}, i, {item: a.element});
        e.each(a.sortables, function () {
            this.instance.isOver ? (this.instance.isOver = 0, a.cancelHelperRemoval = !0, this.instance.cancelHelperRemoval = !1, this.shouldRevert && (this.instance.options.revert = !0), this.instance._mouseStop(t), this.instance.options.helper = this.instance.options._helper, "original" == a.options.helper && this.instance.currentItem.css({top: "auto", left: "auto"})) : (this.instance.cancelHelperRemoval = !1, this.instance._trigger("deactivate", t, s))
        })
    }, drag: function (t, i) {
        var a = e(this).data("draggable"), s = this;
        e.each(a.sortables, function () {
            var n = !1, r = this;
            this.instance.positionAbs = a.positionAbs, this.instance.helperProportions = a.helperProportions, this.instance.offset.click = a.offset.click, this.instance._intersectsWith(this.instance.containerCache) && (n = !0, e.each(a.sortables, function () {
                return this.instance.positionAbs = a.positionAbs, this.instance.helperProportions = a.helperProportions, this.instance.offset.click = a.offset.click, this != r && this.instance._intersectsWith(this.instance.containerCache) && e.ui.contains(r.instance.element[0], this.instance.element[0]) && (n = !1), n
            })), n ? (this.instance.isOver || (this.instance.isOver = 1, this.instance.currentItem = e(s).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item", !0), this.instance.options._helper = this.instance.options.helper, this.instance.options.helper = function () {
                return i.helper[0]
            }, t.target = this.instance.currentItem[0], this.instance._mouseCapture(t, !0), this.instance._mouseStart(t, !0, !0), this.instance.offset.click.top = a.offset.click.top, this.instance.offset.click.left = a.offset.click.left, this.instance.offset.parent.left -= a.offset.parent.left - this.instance.offset.parent.left, this.instance.offset.parent.top -= a.offset.parent.top - this.instance.offset.parent.top, a._trigger("toSortable", t), a.dropped = this.instance.element, a.currentItem = a.element, this.instance.fromOutside = a), this.instance.currentItem && this.instance._mouseDrag(t)) : this.instance.isOver && (this.instance.isOver = 0, this.instance.cancelHelperRemoval = !0, this.instance.options.revert = !1, this.instance._trigger("out", t, this.instance._uiHash(this.instance)), this.instance._mouseStop(t, !0), this.instance.options.helper = this.instance.options._helper, this.instance.currentItem.remove(), this.instance.placeholder && this.instance.placeholder.remove(), a._trigger("fromSortable", t), a.dropped = !1)
        })
    }}), e.ui.plugin.add("draggable", "cursor", {start: function () {
        var t = e("body"), i = e(this).data("draggable").options;
        t.css("cursor") && (i._cursor = t.css("cursor")), t.css("cursor", i.cursor)
    }, stop: function () {
        var t = e(this).data("draggable").options;
        t._cursor && e("body").css("cursor", t._cursor)
    }}), e.ui.plugin.add("draggable", "opacity", {start: function (t, i) {
        var a = e(i.helper), s = e(this).data("draggable").options;
        a.css("opacity") && (s._opacity = a.css("opacity")), a.css("opacity", s.opacity)
    }, stop: function (t, i) {
        var a = e(this).data("draggable").options;
        a._opacity && e(i.helper).css("opacity", a._opacity)
    }}), e.ui.plugin.add("draggable", "scroll", {start: function () {
        var t = e(this).data("draggable");
        t.scrollParent[0] != document && "HTML" != t.scrollParent[0].tagName && (t.overflowOffset = t.scrollParent.offset())
    }, drag: function (t) {
        var i = e(this).data("draggable"), a = i.options, s = !1;
        i.scrollParent[0] != document && "HTML" != i.scrollParent[0].tagName ? (a.axis && "x" == a.axis || (i.overflowOffset.top + i.scrollParent[0].offsetHeight - t.pageY < a.scrollSensitivity ? i.scrollParent[0].scrollTop = s = i.scrollParent[0].scrollTop + a.scrollSpeed : t.pageY - i.overflowOffset.top < a.scrollSensitivity && (i.scrollParent[0].scrollTop = s = i.scrollParent[0].scrollTop - a.scrollSpeed)), a.axis && "y" == a.axis || (i.overflowOffset.left + i.scrollParent[0].offsetWidth - t.pageX < a.scrollSensitivity ? i.scrollParent[0].scrollLeft = s = i.scrollParent[0].scrollLeft + a.scrollSpeed : t.pageX - i.overflowOffset.left < a.scrollSensitivity && (i.scrollParent[0].scrollLeft = s = i.scrollParent[0].scrollLeft - a.scrollSpeed))) : (a.axis && "x" == a.axis || (t.pageY - e(document).scrollTop() < a.scrollSensitivity ? s = e(document).scrollTop(e(document).scrollTop() - a.scrollSpeed) : e(window).height() - (t.pageY - e(document).scrollTop()) < a.scrollSensitivity && (s = e(document).scrollTop(e(document).scrollTop() + a.scrollSpeed))), a.axis && "y" == a.axis || (t.pageX - e(document).scrollLeft() < a.scrollSensitivity ? s = e(document).scrollLeft(e(document).scrollLeft() - a.scrollSpeed) : e(window).width() - (t.pageX - e(document).scrollLeft()) < a.scrollSensitivity && (s = e(document).scrollLeft(e(document).scrollLeft() + a.scrollSpeed)))), s !== !1 && e.ui.ddmanager && !a.dropBehaviour && e.ui.ddmanager.prepareOffsets(i, t)
    }}), e.ui.plugin.add("draggable", "snap", {start: function () {
        var t = e(this).data("draggable"), i = t.options;
        t.snapElements = [], e(i.snap.constructor != String ? i.snap.items || ":data(draggable)" : i.snap).each(function () {
            var i = e(this), a = i.offset();
            this != t.element[0] && t.snapElements.push({item: this, width: i.outerWidth(), height: i.outerHeight(), top: a.top, left: a.left})
        })
    }, drag: function (t, i) {
        for (var a = e(this).data("draggable"), s = a.options, n = s.snapTolerance, r = i.offset.left, o = r + a.helperProportions.width, l = i.offset.top, h = l + a.helperProportions.height, u = a.snapElements.length - 1; u >= 0; u--) {
            var d = a.snapElements[u].left, c = d + a.snapElements[u].width, p = a.snapElements[u].top, m = p + a.snapElements[u].height;
            if (r > d - n && c + n > r && l > p - n && m + n > l || r > d - n && c + n > r && h > p - n && m + n > h || o > d - n && c + n > o && l > p - n && m + n > l || o > d - n && c + n > o && h > p - n && m + n > h) {
                if ("inner" != s.snapMode) {
                    var f = n >= Math.abs(p - h), g = n >= Math.abs(m - l), v = n >= Math.abs(d - o), y = n >= Math.abs(c - r);
                    f && (i.position.top = a._convertPositionTo("relative", {top: p - a.helperProportions.height, left: 0}).top - a.margins.top), g && (i.position.top = a._convertPositionTo("relative", {top: m, left: 0}).top - a.margins.top), v && (i.position.left = a._convertPositionTo("relative", {top: 0, left: d - a.helperProportions.width}).left - a.margins.left), y && (i.position.left = a._convertPositionTo("relative", {top: 0, left: c}).left - a.margins.left)
                }
                var b = f || g || v || y;
                if ("outer" != s.snapMode) {
                    var f = n >= Math.abs(p - l), g = n >= Math.abs(m - h), v = n >= Math.abs(d - r), y = n >= Math.abs(c - o);
                    f && (i.position.top = a._convertPositionTo("relative", {top: p, left: 0}).top - a.margins.top), g && (i.position.top = a._convertPositionTo("relative", {top: m - a.helperProportions.height, left: 0}).top - a.margins.top), v && (i.position.left = a._convertPositionTo("relative", {top: 0, left: d}).left - a.margins.left), y && (i.position.left = a._convertPositionTo("relative", {top: 0, left: c - a.helperProportions.width}).left - a.margins.left)
                }
                !a.snapElements[u].snapping && (f || g || v || y || b) && a.options.snap.snap && a.options.snap.snap.call(a.element, t, e.extend(a._uiHash(), {snapItem: a.snapElements[u].item})), a.snapElements[u].snapping = f || g || v || y || b
            } else a.snapElements[u].snapping && a.options.snap.release && a.options.snap.release.call(a.element, t, e.extend(a._uiHash(), {snapItem: a.snapElements[u].item})), a.snapElements[u].snapping = !1
        }
    }}), e.ui.plugin.add("draggable", "stack", {start: function () {
        var t = e(this).data("draggable").options, i = e.makeArray(e(t.stack)).sort(function (t, i) {
            return(parseInt(e(t).css("zIndex"), 10) || 0) - (parseInt(e(i).css("zIndex"), 10) || 0)
        });
        if (i.length) {
            var a = parseInt(i[0].style.zIndex) || 0;
            e(i).each(function (e) {
                this.style.zIndex = a + e
            }), this[0].style.zIndex = a + i.length
        }
    }}), e.ui.plugin.add("draggable", "zIndex", {start: function (t, i) {
        var a = e(i.helper), s = e(this).data("draggable").options;
        a.css("zIndex") && (s._zIndex = a.css("zIndex")), a.css("zIndex", s.zIndex)
    }, stop: function (t, i) {
        var a = e(this).data("draggable").options;
        a._zIndex && e(i.helper).css("zIndex", a._zIndex)
    }})
})(jQuery);
(function (e) {
    e.widget("ui.droppable", {version: "1.9.2", widgetEventPrefix: "drop", options: {accept: "*", activeClass: !1, addClasses: !0, greedy: !1, hoverClass: !1, scope: "default", tolerance: "intersect"}, _create: function () {
        var t = this.options, i = t.accept;
        this.isover = 0, this.isout = 1, this.accept = e.isFunction(i) ? i : function (e) {
            return e.is(i)
        }, this.proportions = {width: this.element[0].offsetWidth, height: this.element[0].offsetHeight}, e.ui.ddmanager.droppables[t.scope] = e.ui.ddmanager.droppables[t.scope] || [], e.ui.ddmanager.droppables[t.scope].push(this), t.addClasses && this.element.addClass("ui-droppable")
    }, _destroy: function () {
        for (var t = e.ui.ddmanager.droppables[this.options.scope], i = 0; t.length > i; i++)t[i] == this && t.splice(i, 1);
        this.element.removeClass("ui-droppable ui-droppable-disabled")
    }, _setOption: function (t, i) {
        "accept" == t && (this.accept = e.isFunction(i) ? i : function (e) {
            return e.is(i)
        }), e.Widget.prototype._setOption.apply(this, arguments)
    }, _activate: function (t) {
        var i = e.ui.ddmanager.current;
        this.options.activeClass && this.element.addClass(this.options.activeClass), i && this._trigger("activate", t, this.ui(i))
    }, _deactivate: function (t) {
        var i = e.ui.ddmanager.current;
        this.options.activeClass && this.element.removeClass(this.options.activeClass), i && this._trigger("deactivate", t, this.ui(i))
    }, _over: function (t) {
        var i = e.ui.ddmanager.current;
        i && (i.currentItem || i.element)[0] != this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this.options.hoverClass && this.element.addClass(this.options.hoverClass), this._trigger("over", t, this.ui(i)))
    }, _out: function (t) {
        var i = e.ui.ddmanager.current;
        i && (i.currentItem || i.element)[0] != this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("out", t, this.ui(i)))
    }, _drop: function (t, i) {
        var a = i || e.ui.ddmanager.current;
        if (!a || (a.currentItem || a.element)[0] == this.element[0])return!1;
        var s = !1;
        return this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
            var t = e.data(this, "droppable");
            return t.options.greedy && !t.options.disabled && t.options.scope == a.options.scope && t.accept.call(t.element[0], a.currentItem || a.element) && e.ui.intersect(a, e.extend(t, {offset: t.element.offset()}), t.options.tolerance) ? (s = !0, !1) : undefined
        }), s ? !1 : this.accept.call(this.element[0], a.currentItem || a.element) ? (this.options.activeClass && this.element.removeClass(this.options.activeClass), this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("drop", t, this.ui(a)), this.element) : !1
    }, ui: function (e) {
        return{draggable: e.currentItem || e.element, helper: e.helper, position: e.position, offset: e.positionAbs}
    }}), e.ui.intersect = function (t, i, a) {
        if (!i.offset)return!1;
        var s = (t.positionAbs || t.position.absolute).left, n = s + t.helperProportions.width, r = (t.positionAbs || t.position.absolute).top, o = r + t.helperProportions.height, l = i.offset.left, h = l + i.proportions.width, u = i.offset.top, d = u + i.proportions.height;
        switch (a) {
            case"fit":
                return s >= l && h >= n && r >= u && d >= o;
            case"intersect":
                return s + t.helperProportions.width / 2 > l && h > n - t.helperProportions.width / 2 && r + t.helperProportions.height / 2 > u && d > o - t.helperProportions.height / 2;
            case"pointer":
                var c = (t.positionAbs || t.position.absolute).left + (t.clickOffset || t.offset.click).left, p = (t.positionAbs || t.position.absolute).top + (t.clickOffset || t.offset.click).top, m = e.ui.isOver(p, c, u, l, i.proportions.height, i.proportions.width);
                return m;
            case"touch":
                return(r >= u && d >= r || o >= u && d >= o || u > r && o > d) && (s >= l && h >= s || n >= l && h >= n || l > s && n > h);
            default:
                return!1
        }
    }, e.ui.ddmanager = {current: null, droppables: {"default": []}, prepareOffsets: function (t, i) {
        var a = e.ui.ddmanager.droppables[t.options.scope] || [], s = i ? i.type : null, n = (t.currentItem || t.element).find(":data(droppable)").andSelf();
        e:for (var r = 0; a.length > r; r++)if (!(a[r].options.disabled || t && !a[r].accept.call(a[r].element[0], t.currentItem || t.element))) {
            for (var o = 0; n.length > o; o++)if (n[o] == a[r].element[0]) {
                a[r].proportions.height = 0;
                continue e
            }
            a[r].visible = "none" != a[r].element.css("display"), a[r].visible && ("mousedown" == s && a[r]._activate.call(a[r], i), a[r].offset = a[r].element.offset(), a[r].proportions = {width: a[r].element[0].offsetWidth, height: a[r].element[0].offsetHeight})
        }
    }, drop: function (t, i) {
        var a = !1;
        return e.each(e.ui.ddmanager.droppables[t.options.scope] || [], function () {
            this.options && (!this.options.disabled && this.visible && e.ui.intersect(t, this, this.options.tolerance) && (a = this._drop.call(this, i) || a), !this.options.disabled && this.visible && this.accept.call(this.element[0], t.currentItem || t.element) && (this.isout = 1, this.isover = 0, this._deactivate.call(this, i)))
        }), a
    }, dragStart: function (t, i) {
        t.element.parentsUntil("body").bind("scroll.droppable", function () {
            t.options.refreshPositions || e.ui.ddmanager.prepareOffsets(t, i)
        })
    }, drag: function (t, i) {
        t.options.refreshPositions && e.ui.ddmanager.prepareOffsets(t, i), e.each(e.ui.ddmanager.droppables[t.options.scope] || [], function () {
            if (!this.options.disabled && !this.greedyChild && this.visible) {
                var a = e.ui.intersect(t, this, this.options.tolerance), s = a || 1 != this.isover ? a && 0 == this.isover ? "isover" : null : "isout";
                if (s) {
                    var n;
                    if (this.options.greedy) {
                        var r = this.options.scope, o = this.element.parents(":data(droppable)").filter(function () {
                            return e.data(this, "droppable").options.scope === r
                        });
                        o.length && (n = e.data(o[0], "droppable"), n.greedyChild = "isover" == s ? 1 : 0)
                    }
                    n && "isover" == s && (n.isover = 0, n.isout = 1, n._out.call(n, i)), this[s] = 1, this["isout" == s ? "isover" : "isout"] = 0, this["isover" == s ? "_over" : "_out"].call(this, i), n && "isout" == s && (n.isout = 0, n.isover = 1, n._over.call(n, i))
                }
            }
        })
    }, dragStop: function (t, i) {
        t.element.parentsUntil("body").unbind("scroll.droppable"), t.options.refreshPositions || e.ui.ddmanager.prepareOffsets(t, i)
    }}
})(jQuery);
(function (e) {
    e.widget("ui.resizable", e.ui.mouse, {version: "1.9.2", widgetEventPrefix: "resize", options: {alsoResize: !1, animate: !1, animateDuration: "slow", animateEasing: "swing", aspectRatio: !1, autoHide: !1, containment: !1, ghost: !1, grid: !1, handles: "e,s,se", helper: !1, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 1e3}, _create: function () {
        var t = this, i = this.options;
        if (this.element.addClass("ui-resizable"), e.extend(this, {_aspectRatio: !!i.aspectRatio, aspectRatio: i.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: i.helper || i.ghost || i.animate ? i.helper || "ui-resizable-helper" : null}), this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i) && (this.element.wrap(e('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left")})), this.element = this.element.parent().data("resizable", this.element.data("resizable")), this.elementIsWrapper = !0, this.element.css({marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom")}), this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0}), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({position: "static", zoom: 1, display: "block"})), this.originalElement.css({margin: this.originalElement.css("margin")}), this._proportionallyResize()), this.handles = i.handles || (e(".ui-resizable-handle", this.element).length ? {n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw"} : "e,s,se"), this.handles.constructor == String) {
            "all" == this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw");
            var s = this.handles.split(",");
            this.handles = {};
            for (var a = 0; s.length > a; a++) {
                var n = e.trim(s[a]), r = "ui-resizable-" + n, o = e('<div class="ui-resizable-handle ' + r + '"></div>');
                o.css({zIndex: i.zIndex}), "se" == n && o.addClass("ui-icon ui-icon-gripsmall-diagonal-se"), this.handles[n] = ".ui-resizable-" + n, this.element.append(o)
            }
        }
        this._renderAxis = function (t) {
            t = t || this.element;
            for (var i in this.handles) {
                if (this.handles[i].constructor == String && (this.handles[i] = e(this.handles[i], this.element).show()), this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                    var s = e(this.handles[i], this.element), a = 0;
                    a = /sw|ne|nw|se|n|s/.test(i) ? s.outerHeight() : s.outerWidth();
                    var n = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join("");
                    t.css(n, a), this._proportionallyResize()
                }
                e(this.handles[i]).length
            }
        }, this._renderAxis(this.element), this._handles = e(".ui-resizable-handle", this.element).disableSelection(), this._handles.mouseover(function () {
            if (!t.resizing) {
                if (this.className)var e = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                t.axis = e && e[1] ? e[1] : "se"
            }
        }), i.autoHide && (this._handles.hide(), e(this.element).addClass("ui-resizable-autohide").mouseenter(function () {
            i.disabled || (e(this).removeClass("ui-resizable-autohide"), t._handles.show())
        }).mouseleave(function () {
                i.disabled || t.resizing || (e(this).addClass("ui-resizable-autohide"), t._handles.hide())
            })), this._mouseInit()
    }, _destroy: function () {
        this._mouseDestroy();
        var t = function (t) {
            e(t).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
        };
        if (this.elementIsWrapper) {
            t(this.element);
            var i = this.element;
            this.originalElement.css({position: i.css("position"), width: i.outerWidth(), height: i.outerHeight(), top: i.css("top"), left: i.css("left")}).insertAfter(i), i.remove()
        }
        return this.originalElement.css("resize", this.originalResizeStyle), t(this.originalElement), this
    }, _mouseCapture: function (t) {
        var i = !1;
        for (var s in this.handles)e(this.handles[s])[0] == t.target && (i = !0);
        return!this.options.disabled && i
    }, _mouseStart: function (i) {
        var s = this.options, a = this.element.position(), n = this.element;
        this.resizing = !0, this.documentScroll = {top: e(document).scrollTop(), left: e(document).scrollLeft()}, (n.is(".ui-draggable") || /absolute/.test(n.css("position"))) && n.css({position: "absolute", top: a.top, left: a.left}), this._renderProxy();
        var r = t(this.helper.css("left")), o = t(this.helper.css("top"));
        s.containment && (r += e(s.containment).scrollLeft() || 0, o += e(s.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = {left: r, top: o}, this.size = this._helper ? {width: n.outerWidth(), height: n.outerHeight()} : {width: n.width(), height: n.height()}, this.originalSize = this._helper ? {width: n.outerWidth(), height: n.outerHeight()} : {width: n.width(), height: n.height()}, this.originalPosition = {left: r, top: o}, this.sizeDiff = {width: n.outerWidth() - n.width(), height: n.outerHeight() - n.height()}, this.originalMousePosition = {left: i.pageX, top: i.pageY}, this.aspectRatio = "number" == typeof s.aspectRatio ? s.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
        var h = e(".ui-resizable-" + this.axis).css("cursor");
        return e("body").css("cursor", "auto" == h ? this.axis + "-resize" : h), n.addClass("ui-resizable-resizing"), this._propagate("start", i), !0
    }, _mouseDrag: function (e) {
        var t = this.helper, i = (this.options, this.originalMousePosition), s = this.axis, a = e.pageX - i.left || 0, n = e.pageY - i.top || 0, r = this._change[s];
        if (!r)return!1;
        var o = r.apply(this, [e, a, n]);
        return this._updateVirtualBoundaries(e.shiftKey), (this._aspectRatio || e.shiftKey) && (o = this._updateRatio(o, e)), o = this._respectSize(o, e), this._propagate("resize", e), t.css({top: this.position.top + "px", left: this.position.left + "px", width: this.size.width + "px", height: this.size.height + "px"}), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), this._updateCache(o), this._trigger("resize", e, this.ui()), !1
    }, _mouseStop: function (t) {
        this.resizing = !1;
        var i = this.options, s = this;
        if (this._helper) {
            var a = this._proportionallyResizeElements, n = a.length && /textarea/i.test(a[0].nodeName), r = n && e.ui.hasScroll(a[0], "left") ? 0 : s.sizeDiff.height, o = n ? 0 : s.sizeDiff.width, h = {width: s.helper.width() - o, height: s.helper.height() - r}, l = parseInt(s.element.css("left"), 10) + (s.position.left - s.originalPosition.left) || null, u = parseInt(s.element.css("top"), 10) + (s.position.top - s.originalPosition.top) || null;
            i.animate || this.element.css(e.extend(h, {top: u, left: l})), s.helper.height(s.size.height), s.helper.width(s.size.width), this._helper && !i.animate && this._proportionallyResize()
        }
        return e("body").css("cursor", "auto"), this.element.removeClass("ui-resizable-resizing"), this._propagate("stop", t), this._helper && this.helper.remove(), !1
    }, _updateVirtualBoundaries: function (e) {
        var t, s, a, n, r, o = this.options;
        r = {minWidth: i(o.minWidth) ? o.minWidth : 0, maxWidth: i(o.maxWidth) ? o.maxWidth : 1 / 0, minHeight: i(o.minHeight) ? o.minHeight : 0, maxHeight: i(o.maxHeight) ? o.maxHeight : 1 / 0}, (this._aspectRatio || e) && (t = r.minHeight * this.aspectRatio, a = r.minWidth / this.aspectRatio, s = r.maxHeight * this.aspectRatio, n = r.maxWidth / this.aspectRatio, t > r.minWidth && (r.minWidth = t), a > r.minHeight && (r.minHeight = a), r.maxWidth > s && (r.maxWidth = s), r.maxHeight > n && (r.maxHeight = n)), this._vBoundaries = r
    }, _updateCache: function (e) {
        this.options, this.offset = this.helper.offset(), i(e.left) && (this.position.left = e.left), i(e.top) && (this.position.top = e.top), i(e.height) && (this.size.height = e.height), i(e.width) && (this.size.width = e.width)
    }, _updateRatio: function (e) {
        var t = (this.options, this.position), s = this.size, a = this.axis;
        return i(e.height) ? e.width = e.height * this.aspectRatio : i(e.width) && (e.height = e.width / this.aspectRatio), "sw" == a && (e.left = t.left + (s.width - e.width), e.top = null), "nw" == a && (e.top = t.top + (s.height - e.height), e.left = t.left + (s.width - e.width)), e
    }, _respectSize: function (e, t) {
        var s = (this.helper, this._vBoundaries), a = (this._aspectRatio || t.shiftKey, this.axis), n = i(e.width) && s.maxWidth && s.maxWidth < e.width, r = i(e.height) && s.maxHeight && s.maxHeight < e.height, o = i(e.width) && s.minWidth && s.minWidth > e.width, h = i(e.height) && s.minHeight && s.minHeight > e.height;
        o && (e.width = s.minWidth), h && (e.height = s.minHeight), n && (e.width = s.maxWidth), r && (e.height = s.maxHeight);
        var l = this.originalPosition.left + this.originalSize.width, u = this.position.top + this.size.height, d = /sw|nw|w/.test(a), c = /nw|ne|n/.test(a);
        o && d && (e.left = l - s.minWidth), n && d && (e.left = l - s.maxWidth), h && c && (e.top = u - s.minHeight), r && c && (e.top = u - s.maxHeight);
        var p = !e.width && !e.height;
        return p && !e.left && e.top ? e.top = null : p && !e.top && e.left && (e.left = null), e
    }, _proportionallyResize: function () {
        if (this.options, this._proportionallyResizeElements.length)for (var t = this.helper || this.element, i = 0; this._proportionallyResizeElements.length > i; i++) {
            var s = this._proportionallyResizeElements[i];
            if (!this.borderDif) {
                var a = [s.css("borderTopWidth"), s.css("borderRightWidth"), s.css("borderBottomWidth"), s.css("borderLeftWidth")], n = [s.css("paddingTop"), s.css("paddingRight"), s.css("paddingBottom"), s.css("paddingLeft")];
                this.borderDif = e.map(a, function (e, t) {
                    var i = parseInt(e, 10) || 0, s = parseInt(n[t], 10) || 0;
                    return i + s
                })
            }
            s.css({height: t.height() - this.borderDif[0] - this.borderDif[2] || 0, width: t.width() - this.borderDif[1] - this.borderDif[3] || 0})
        }
    }, _renderProxy: function () {
        var t = this.element, i = this.options;
        if (this.elementOffset = t.offset(), this._helper) {
            this.helper = this.helper || e('<div style="overflow:hidden;"></div>');
            var s = e.ui.ie6 ? 1 : 0, a = e.ui.ie6 ? 2 : -1;
            this.helper.addClass(this._helper).css({width: this.element.outerWidth() + a, height: this.element.outerHeight() + a, position: "absolute", left: this.elementOffset.left - s + "px", top: this.elementOffset.top - s + "px", zIndex: ++i.zIndex}), this.helper.appendTo("body").disableSelection()
        } else this.helper = this.element
    }, _change: {e: function (e, t) {
        return{width: this.originalSize.width + t}
    }, w: function (e, t) {
        var i = (this.options, this.originalSize), s = this.originalPosition;
        return{left: s.left + t, width: i.width - t}
    }, n: function (e, t, i) {
        var s = (this.options, this.originalSize), a = this.originalPosition;
        return{top: a.top + i, height: s.height - i}
    }, s: function (e, t, i) {
        return{height: this.originalSize.height + i}
    }, se: function (t, i, s) {
        return e.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [t, i, s]))
    }, sw: function (t, i, s) {
        return e.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [t, i, s]))
    }, ne: function (t, i, s) {
        return e.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [t, i, s]))
    }, nw: function (t, i, s) {
        return e.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [t, i, s]))
    }}, _propagate: function (t, i) {
        e.ui.plugin.call(this, t, [i, this.ui()]), "resize" != t && this._trigger(t, i, this.ui())
    }, plugins: {}, ui: function () {
        return{originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition}
    }}), e.ui.plugin.add("resizable", "alsoResize", {start: function () {
        var t = e(this).data("resizable"), i = t.options, s = function (t) {
            e(t).each(function () {
                var t = e(this);
                t.data("resizable-alsoresize", {width: parseInt(t.width(), 10), height: parseInt(t.height(), 10), left: parseInt(t.css("left"), 10), top: parseInt(t.css("top"), 10)})
            })
        };
        "object" != typeof i.alsoResize || i.alsoResize.parentNode ? s(i.alsoResize) : i.alsoResize.length ? (i.alsoResize = i.alsoResize[0], s(i.alsoResize)) : e.each(i.alsoResize, function (e) {
            s(e)
        })
    }, resize: function (t, i) {
        var s = e(this).data("resizable"), a = s.options, n = s.originalSize, r = s.originalPosition, o = {height: s.size.height - n.height || 0, width: s.size.width - n.width || 0, top: s.position.top - r.top || 0, left: s.position.left - r.left || 0}, h = function (t, s) {
            e(t).each(function () {
                var t = e(this), a = e(this).data("resizable-alsoresize"), n = {}, r = s && s.length ? s : t.parents(i.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                e.each(r, function (e, t) {
                    var i = (a[t] || 0) + (o[t] || 0);
                    i && i >= 0 && (n[t] = i || null)
                }), t.css(n)
            })
        };
        "object" != typeof a.alsoResize || a.alsoResize.nodeType ? h(a.alsoResize) : e.each(a.alsoResize, function (e, t) {
            h(e, t)
        })
    }, stop: function () {
        e(this).removeData("resizable-alsoresize")
    }}), e.ui.plugin.add("resizable", "animate", {stop: function (t) {
        var i = e(this).data("resizable"), s = i.options, a = i._proportionallyResizeElements, n = a.length && /textarea/i.test(a[0].nodeName), r = n && e.ui.hasScroll(a[0], "left") ? 0 : i.sizeDiff.height, o = n ? 0 : i.sizeDiff.width, h = {width: i.size.width - o, height: i.size.height - r}, l = parseInt(i.element.css("left"), 10) + (i.position.left - i.originalPosition.left) || null, u = parseInt(i.element.css("top"), 10) + (i.position.top - i.originalPosition.top) || null;
        i.element.animate(e.extend(h, u && l ? {top: u, left: l} : {}), {duration: s.animateDuration, easing: s.animateEasing, step: function () {
            var s = {width: parseInt(i.element.css("width"), 10), height: parseInt(i.element.css("height"), 10), top: parseInt(i.element.css("top"), 10), left: parseInt(i.element.css("left"), 10)};
            a && a.length && e(a[0]).css({width: s.width, height: s.height}), i._updateCache(s), i._propagate("resize", t)
        }})
    }}), e.ui.plugin.add("resizable", "containment", {start: function () {
        var i = e(this).data("resizable"), s = i.options, a = i.element, n = s.containment, r = n instanceof e ? n.get(0) : /parent/.test(n) ? a.parent().get(0) : n;
        if (r)if (i.containerElement = e(r), /document/.test(n) || n == document)i.containerOffset = {left: 0, top: 0}, i.containerPosition = {left: 0, top: 0}, i.parentData = {element: e(document), left: 0, top: 0, width: e(document).width(), height: e(document).height() || document.body.parentNode.scrollHeight}; else {
            var o = e(r), h = [];
            e(["Top", "Right", "Left", "Bottom"]).each(function (e, i) {
                h[e] = t(o.css("padding" + i))
            }), i.containerOffset = o.offset(), i.containerPosition = o.position(), i.containerSize = {height: o.innerHeight() - h[3], width: o.innerWidth() - h[1]};
            var l = i.containerOffset, u = i.containerSize.height, d = i.containerSize.width, c = e.ui.hasScroll(r, "left") ? r.scrollWidth : d, p = e.ui.hasScroll(r) ? r.scrollHeight : u;
            i.parentData = {element: r, left: l.left, top: l.top, width: c, height: p}
        }
    }, resize: function (t) {
        var i = e(this).data("resizable"), s = i.options, a = (i.containerSize, i.containerOffset), n = (i.size, i.position), r = i._aspectRatio || t.shiftKey, o = {top: 0, left: 0}, h = i.containerElement;
        h[0] != document && /static/.test(h.css("position")) && (o = a), n.left < (i._helper ? a.left : 0) && (i.size.width = i.size.width + (i._helper ? i.position.left - a.left : i.position.left - o.left), r && (i.size.height = i.size.width / i.aspectRatio), i.position.left = s.helper ? a.left : 0), n.top < (i._helper ? a.top : 0) && (i.size.height = i.size.height + (i._helper ? i.position.top - a.top : i.position.top), r && (i.size.width = i.size.height * i.aspectRatio), i.position.top = i._helper ? a.top : 0), i.offset.left = i.parentData.left + i.position.left, i.offset.top = i.parentData.top + i.position.top;
        var l = Math.abs((i._helper ? i.offset.left - o.left : i.offset.left - o.left) + i.sizeDiff.width), u = Math.abs((i._helper ? i.offset.top - o.top : i.offset.top - a.top) + i.sizeDiff.height), d = i.containerElement.get(0) == i.element.parent().get(0), c = /relative|absolute/.test(i.containerElement.css("position"));
        d && c && (l -= i.parentData.left), l + i.size.width >= i.parentData.width && (i.size.width = i.parentData.width - l, r && (i.size.height = i.size.width / i.aspectRatio)), u + i.size.height >= i.parentData.height && (i.size.height = i.parentData.height - u, r && (i.size.width = i.size.height * i.aspectRatio))
    }, stop: function () {
        var t = e(this).data("resizable"), i = t.options, s = (t.position, t.containerOffset), a = t.containerPosition, n = t.containerElement, r = e(t.helper), o = r.offset(), h = r.outerWidth() - t.sizeDiff.width, l = r.outerHeight() - t.sizeDiff.height;
        t._helper && !i.animate && /relative/.test(n.css("position")) && e(this).css({left: o.left - a.left - s.left, width: h, height: l}), t._helper && !i.animate && /static/.test(n.css("position")) && e(this).css({left: o.left - a.left - s.left, width: h, height: l})
    }}), e.ui.plugin.add("resizable", "ghost", {start: function () {
        var t = e(this).data("resizable"), i = t.options, s = t.size;
        t.ghost = t.originalElement.clone(), t.ghost.css({opacity: .25, display: "block", position: "relative", height: s.height, width: s.width, margin: 0, left: 0, top: 0}).addClass("ui-resizable-ghost").addClass("string" == typeof i.ghost ? i.ghost : ""), t.ghost.appendTo(t.helper)
    }, resize: function () {
        var t = e(this).data("resizable");
        t.options, t.ghost && t.ghost.css({position: "relative", height: t.size.height, width: t.size.width})
    }, stop: function () {
        var t = e(this).data("resizable");
        t.options, t.ghost && t.helper && t.helper.get(0).removeChild(t.ghost.get(0))
    }}), e.ui.plugin.add("resizable", "grid", {resize: function (t) {
        var i = e(this).data("resizable"), s = i.options, a = i.size, n = i.originalSize, r = i.originalPosition, o = i.axis;
        s._aspectRatio || t.shiftKey, s.grid = "number" == typeof s.grid ? [s.grid, s.grid] : s.grid;
        var h = Math.round((a.width - n.width) / (s.grid[0] || 1)) * (s.grid[0] || 1), l = Math.round((a.height - n.height) / (s.grid[1] || 1)) * (s.grid[1] || 1);
        /^(se|s|e)$/.test(o) ? (i.size.width = n.width + h, i.size.height = n.height + l) : /^(ne)$/.test(o) ? (i.size.width = n.width + h, i.size.height = n.height + l, i.position.top = r.top - l) : /^(sw)$/.test(o) ? (i.size.width = n.width + h, i.size.height = n.height + l, i.position.left = r.left - h) : (i.size.width = n.width + h, i.size.height = n.height + l, i.position.top = r.top - l, i.position.left = r.left - h)
    }});
    var t = function (e) {
        return parseInt(e, 10) || 0
    }, i = function (e) {
        return!isNaN(parseInt(e, 10))
    }
})(jQuery);
(function (e) {
    e.widget("ui.selectable", e.ui.mouse, {version: "1.9.2", options: {appendTo: "body", autoRefresh: !0, distance: 0, filter: "*", tolerance: "touch"}, _create: function () {
        var t = this;
        this.element.addClass("ui-selectable"), this.dragged = !1;
        var i;
        this.refresh = function () {
            i = e(t.options.filter, t.element[0]), i.addClass("ui-selectee"), i.each(function () {
                var t = e(this), i = t.offset();
                e.data(this, "selectable-item", {element: this, $element: t, left: i.left, top: i.top, right: i.left + t.outerWidth(), bottom: i.top + t.outerHeight(), startselected: !1, selected: t.hasClass("ui-selected"), selecting: t.hasClass("ui-selecting"), unselecting: t.hasClass("ui-unselecting")})
            })
        }, this.refresh(), this.selectees = i.addClass("ui-selectee"), this._mouseInit(), this.helper = e("<div class='ui-selectable-helper'></div>")
    }, _destroy: function () {
        this.selectees.removeClass("ui-selectee").removeData("selectable-item"), this.element.removeClass("ui-selectable ui-selectable-disabled"), this._mouseDestroy()
    }, _mouseStart: function (t) {
        var i = this;
        if (this.opos = [t.pageX, t.pageY], !this.options.disabled) {
            var s = this.options;
            this.selectees = e(s.filter, this.element[0]), this._trigger("start", t), e(s.appendTo).append(this.helper), this.helper.css({left: t.clientX, top: t.clientY, width: 0, height: 0}), s.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () {
                var s = e.data(this, "selectable-item");
                s.startselected = !0, t.metaKey || t.ctrlKey || (s.$element.removeClass("ui-selected"), s.selected = !1, s.$element.addClass("ui-unselecting"), s.unselecting = !0, i._trigger("unselecting", t, {unselecting: s.element}))
            }), e(t.target).parents().andSelf().each(function () {
                var s = e.data(this, "selectable-item");
                if (s) {
                    var a = !t.metaKey && !t.ctrlKey || !s.$element.hasClass("ui-selected");
                    return s.$element.removeClass(a ? "ui-unselecting" : "ui-selected").addClass(a ? "ui-selecting" : "ui-unselecting"), s.unselecting = !a, s.selecting = a, s.selected = a, a ? i._trigger("selecting", t, {selecting: s.element}) : i._trigger("unselecting", t, {unselecting: s.element}), !1
                }
            })
        }
    }, _mouseDrag: function (t) {
        var i = this;
        if (this.dragged = !0, !this.options.disabled) {
            var s = this.options, a = this.opos[0], n = this.opos[1], r = t.pageX, o = t.pageY;
            if (a > r) {
                var h = r;
                r = a, a = h
            }
            if (n > o) {
                var h = o;
                o = n, n = h
            }
            return this.helper.css({left: a, top: n, width: r - a, height: o - n}), this.selectees.each(function () {
                var h = e.data(this, "selectable-item");
                if (h && h.element != i.element[0]) {
                    var l = !1;
                    "touch" == s.tolerance ? l = !(h.left > r || a > h.right || h.top > o || n > h.bottom) : "fit" == s.tolerance && (l = h.left > a && r > h.right && h.top > n && o > h.bottom), l ? (h.selected && (h.$element.removeClass("ui-selected"), h.selected = !1), h.unselecting && (h.$element.removeClass("ui-unselecting"), h.unselecting = !1), h.selecting || (h.$element.addClass("ui-selecting"), h.selecting = !0, i._trigger("selecting", t, {selecting: h.element}))) : (h.selecting && ((t.metaKey || t.ctrlKey) && h.startselected ? (h.$element.removeClass("ui-selecting"), h.selecting = !1, h.$element.addClass("ui-selected"), h.selected = !0) : (h.$element.removeClass("ui-selecting"), h.selecting = !1, h.startselected && (h.$element.addClass("ui-unselecting"), h.unselecting = !0), i._trigger("unselecting", t, {unselecting: h.element}))), h.selected && (t.metaKey || t.ctrlKey || h.startselected || (h.$element.removeClass("ui-selected"), h.selected = !1, h.$element.addClass("ui-unselecting"), h.unselecting = !0, i._trigger("unselecting", t, {unselecting: h.element}))))
                }
            }), !1
        }
    }, _mouseStop: function (t) {
        var i = this;
        return this.dragged = !1, this.options, e(".ui-unselecting", this.element[0]).each(function () {
            var s = e.data(this, "selectable-item");
            s.$element.removeClass("ui-unselecting"), s.unselecting = !1, s.startselected = !1, i._trigger("unselected", t, {unselected: s.element})
        }), e(".ui-selecting", this.element[0]).each(function () {
            var s = e.data(this, "selectable-item");
            s.$element.removeClass("ui-selecting").addClass("ui-selected"), s.selecting = !1, s.selected = !0, s.startselected = !0, i._trigger("selected", t, {selected: s.element})
        }), this._trigger("stop", t), this.helper.remove(), !1
    }})
})(jQuery);
(function (e) {
    e.widget("ui.sortable", e.ui.mouse, {version: "1.9.2", widgetEventPrefix: "sort", ready: !1, options: {appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3}, _create: function () {
        var e = this.options;
        this.containerCache = {}, this.element.addClass("ui-sortable"), this.refresh(), this.floating = this.items.length ? "x" === e.axis || /left|right/.test(this.items[0].item.css("float")) || /inline|table-cell/.test(this.items[0].item.css("display")) : !1, this.offset = this.element.offset(), this._mouseInit(), this.ready = !0
    }, _destroy: function () {
        this.element.removeClass("ui-sortable ui-sortable-disabled"), this._mouseDestroy();
        for (var e = this.items.length - 1; e >= 0; e--)this.items[e].item.removeData(this.widgetName + "-item");
        return this
    }, _setOption: function (t, i) {
        "disabled" === t ? (this.options[t] = i, this.widget().toggleClass("ui-sortable-disabled", !!i)) : e.Widget.prototype._setOption.apply(this, arguments)
    }, _mouseCapture: function (t, i) {
        var s = this;
        if (this.reverting)return!1;
        if (this.options.disabled || "static" == this.options.type)return!1;
        this._refreshItems(t);
        var a = null;
        if (e(t.target).parents().each(function () {
            return e.data(this, s.widgetName + "-item") == s ? (a = e(this), !1) : undefined
        }), e.data(t.target, s.widgetName + "-item") == s && (a = e(t.target)), !a)return!1;
        if (this.options.handle && !i) {
            var n = !1;
            if (e(this.options.handle, a).find("*").andSelf().each(function () {
                this == t.target && (n = !0)
            }), !n)return!1
        }
        return this.currentItem = a, this._removeCurrentsFromItems(), !0
    }, _mouseStart: function (t, i, s) {
        var a = this.options;
        if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(t), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left}, e.extend(this.offset, {click: {left: t.pageX - this.offset.left, top: t.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()}), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(t), this.originalPageX = t.pageX, this.originalPageY = t.pageY, a.cursorAt && this._adjustOffsetFromHelper(a.cursorAt), this.domPosition = {prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0]}, this.helper[0] != this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), a.containment && this._setContainment(), a.cursor && (e("body").css("cursor") && (this._storedCursor = e("body").css("cursor")), e("body").css("cursor", a.cursor)), a.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", a.opacity)), a.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", a.zIndex)), this.scrollParent[0] != document && "HTML" != this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", t, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !s)for (var n = this.containers.length - 1; n >= 0; n--)this.containers[n]._trigger("activate", t, this._uiHash(this));
        return e.ui.ddmanager && (e.ui.ddmanager.current = this), e.ui.ddmanager && !a.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t), this.dragging = !0, this.helper.addClass("ui-sortable-helper"), this._mouseDrag(t), !0
    }, _mouseDrag: function (t) {
        if (this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll) {
            var i = this.options, s = !1;
            this.scrollParent[0] != document && "HTML" != this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - t.pageY < i.scrollSensitivity ? this.scrollParent[0].scrollTop = s = this.scrollParent[0].scrollTop + i.scrollSpeed : t.pageY - this.overflowOffset.top < i.scrollSensitivity && (this.scrollParent[0].scrollTop = s = this.scrollParent[0].scrollTop - i.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - t.pageX < i.scrollSensitivity ? this.scrollParent[0].scrollLeft = s = this.scrollParent[0].scrollLeft + i.scrollSpeed : t.pageX - this.overflowOffset.left < i.scrollSensitivity && (this.scrollParent[0].scrollLeft = s = this.scrollParent[0].scrollLeft - i.scrollSpeed)) : (t.pageY - e(document).scrollTop() < i.scrollSensitivity ? s = e(document).scrollTop(e(document).scrollTop() - i.scrollSpeed) : e(window).height() - (t.pageY - e(document).scrollTop()) < i.scrollSensitivity && (s = e(document).scrollTop(e(document).scrollTop() + i.scrollSpeed)), t.pageX - e(document).scrollLeft() < i.scrollSensitivity ? s = e(document).scrollLeft(e(document).scrollLeft() - i.scrollSpeed) : e(window).width() - (t.pageX - e(document).scrollLeft()) < i.scrollSensitivity && (s = e(document).scrollLeft(e(document).scrollLeft() + i.scrollSpeed))), s !== !1 && e.ui.ddmanager && !i.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t)
        }
        this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" == this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" == this.options.axis || (this.helper[0].style.top = this.position.top + "px");
        for (var a = this.items.length - 1; a >= 0; a--) {
            var n = this.items[a], r = n.item[0], o = this._intersectsWithPointer(n);
            if (o && n.instance === this.currentContainer && r != this.currentItem[0] && this.placeholder[1 == o ? "next" : "prev"]()[0] != r && !e.contains(this.placeholder[0], r) && ("semi-dynamic" == this.options.type ? !e.contains(this.element[0], r) : !0)) {
                if (this.direction = 1 == o ? "down" : "up", "pointer" != this.options.tolerance && !this._intersectsWithSides(n))break;
                this._rearrange(t, n), this._trigger("change", t, this._uiHash());
                break
            }
        }
        return this._contactContainers(t), e.ui.ddmanager && e.ui.ddmanager.drag(this, t), this._trigger("sort", t, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1
    }, _mouseStop: function (t, i) {
        if (t) {
            if (e.ui.ddmanager && !this.options.dropBehaviour && e.ui.ddmanager.drop(this, t), this.options.revert) {
                var s = this, a = this.placeholder.offset();
                this.reverting = !0, e(this.helper).animate({left: a.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft), top: a.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)}, parseInt(this.options.revert, 10) || 500, function () {
                    s._clear(t)
                })
            } else this._clear(t, i);
            return!1
        }
    }, cancel: function () {
        if (this.dragging) {
            this._mouseUp({target: null}), "original" == this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
            for (var t = this.containers.length - 1; t >= 0; t--)this.containers[t]._trigger("deactivate", null, this._uiHash(this)), this.containers[t].containerCache.over && (this.containers[t]._trigger("out", null, this._uiHash(this)), this.containers[t].containerCache.over = 0)
        }
        return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" != this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), e.extend(this, {helper: null, dragging: !1, reverting: !1, _noFinalSort: null}), this.domPosition.prev ? e(this.domPosition.prev).after(this.currentItem) : e(this.domPosition.parent).prepend(this.currentItem)), this
    }, serialize: function (t) {
        var i = this._getItemsAsjQuery(t && t.connected), s = [];
        return t = t || {}, e(i).each(function () {
            var i = (e(t.item || this).attr(t.attribute || "id") || "").match(t.expression || /(.+)[-=_](.+)/);
            i && s.push((t.key || i[1] + "[]") + "=" + (t.key && t.expression ? i[1] : i[2]))
        }), !s.length && t.key && s.push(t.key + "="), s.join("&")
    }, toArray: function (t) {
        var i = this._getItemsAsjQuery(t && t.connected), s = [];
        return t = t || {}, i.each(function () {
            s.push(e(t.item || this).attr(t.attribute || "id") || "")
        }), s
    }, _intersectsWith: function (e) {
        var t = this.positionAbs.left, i = t + this.helperProportions.width, s = this.positionAbs.top, a = s + this.helperProportions.height, n = e.left, r = n + e.width, o = e.top, h = o + e.height, l = this.offset.click.top, u = this.offset.click.left, c = s + l > o && h > s + l && t + u > n && r > t + u;
        return"pointer" == this.options.tolerance || this.options.forcePointerForContainers || "pointer" != this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > e[this.floating ? "width" : "height"] ? c : t + this.helperProportions.width / 2 > n && r > i - this.helperProportions.width / 2 && s + this.helperProportions.height / 2 > o && h > a - this.helperProportions.height / 2
    }, _intersectsWithPointer: function (t) {
        var i = "x" === this.options.axis || e.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height), s = "y" === this.options.axis || e.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width), a = i && s, n = this._getDragVerticalDirection(), r = this._getDragHorizontalDirection();
        return a ? this.floating ? r && "right" == r || "down" == n ? 2 : 1 : n && ("down" == n ? 2 : 1) : !1
    }, _intersectsWithSides: function (t) {
        var i = e.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height), s = e.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width), a = this._getDragVerticalDirection(), n = this._getDragHorizontalDirection();
        return this.floating && n ? "right" == n && s || "left" == n && !s : a && ("down" == a && i || "up" == a && !i)
    }, _getDragVerticalDirection: function () {
        var e = this.positionAbs.top - this.lastPositionAbs.top;
        return 0 != e && (e > 0 ? "down" : "up")
    }, _getDragHorizontalDirection: function () {
        var e = this.positionAbs.left - this.lastPositionAbs.left;
        return 0 != e && (e > 0 ? "right" : "left")
    }, refresh: function (e) {
        return this._refreshItems(e), this.refreshPositions(), this
    }, _connectWith: function () {
        var e = this.options;
        return e.connectWith.constructor == String ? [e.connectWith] : e.connectWith
    }, _getItemsAsjQuery: function (t) {
        var i = [], s = [], a = this._connectWith();
        if (a && t)for (var n = a.length - 1; n >= 0; n--)for (var r = e(a[n]), o = r.length - 1; o >= 0; o--) {
            var h = e.data(r[o], this.widgetName);
            h && h != this && !h.options.disabled && s.push([e.isFunction(h.options.items) ? h.options.items.call(h.element) : e(h.options.items, h.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), h])
        }
        s.push([e.isFunction(this.options.items) ? this.options.items.call(this.element, null, {options: this.options, item: this.currentItem}) : e(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
        for (var n = s.length - 1; n >= 0; n--)s[n][0].each(function () {
            i.push(this)
        });
        return e(i)
    }, _removeCurrentsFromItems: function () {
        var t = this.currentItem.find(":data(" + this.widgetName + "-item)");
        this.items = e.grep(this.items, function (e) {
            for (var i = 0; t.length > i; i++)if (t[i] == e.item[0])return!1;
            return!0
        })
    }, _refreshItems: function (t) {
        this.items = [], this.containers = [this];
        var i = this.items, s = [
            [e.isFunction(this.options.items) ? this.options.items.call(this.element[0], t, {item: this.currentItem}) : e(this.options.items, this.element), this]
        ], a = this._connectWith();
        if (a && this.ready)for (var n = a.length - 1; n >= 0; n--)for (var r = e(a[n]), o = r.length - 1; o >= 0; o--) {
            var h = e.data(r[o], this.widgetName);
            h && h != this && !h.options.disabled && (s.push([e.isFunction(h.options.items) ? h.options.items.call(h.element[0], t, {item: this.currentItem}) : e(h.options.items, h.element), h]), this.containers.push(h))
        }
        for (var n = s.length - 1; n >= 0; n--)for (var l = s[n][1], u = s[n][0], o = 0, c = u.length; c > o; o++) {
            var d = e(u[o]);
            d.data(this.widgetName + "-item", l), i.push({item: d, instance: l, width: 0, height: 0, left: 0, top: 0})
        }
    }, refreshPositions: function (t) {
        this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
        for (var i = this.items.length - 1; i >= 0; i--) {
            var s = this.items[i];
            if (s.instance == this.currentContainer || !this.currentContainer || s.item[0] == this.currentItem[0]) {
                var a = this.options.toleranceElement ? e(this.options.toleranceElement, s.item) : s.item;
                t || (s.width = a.outerWidth(), s.height = a.outerHeight());
                var n = a.offset();
                s.left = n.left, s.top = n.top
            }
        }
        if (this.options.custom && this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this); else for (var i = this.containers.length - 1; i >= 0; i--) {
            var n = this.containers[i].element.offset();
            this.containers[i].containerCache.left = n.left, this.containers[i].containerCache.top = n.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight()
        }
        return this
    }, _createPlaceholder: function (t) {
        t = t || this;
        var i = t.options;
        if (!i.placeholder || i.placeholder.constructor == String) {
            var s = i.placeholder;
            i.placeholder = {element: function () {
                var i = e(document.createElement(t.currentItem[0].nodeName)).addClass(s || t.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                return s || (i.style.visibility = "hidden"), i
            }, update: function (e, a) {
                (!s || i.forcePlaceholderSize) && (a.height() || a.height(t.currentItem.innerHeight() - parseInt(t.currentItem.css("paddingTop") || 0, 10) - parseInt(t.currentItem.css("paddingBottom") || 0, 10)), a.width() || a.width(t.currentItem.innerWidth() - parseInt(t.currentItem.css("paddingLeft") || 0, 10) - parseInt(t.currentItem.css("paddingRight") || 0, 10)))
            }}
        }
        t.placeholder = e(i.placeholder.element.call(t.element, t.currentItem)), t.currentItem.after(t.placeholder), i.placeholder.update(t, t.placeholder)
    }, _contactContainers: function (t) {
        for (var i = null, s = null, a = this.containers.length - 1; a >= 0; a--)if (!e.contains(this.currentItem[0], this.containers[a].element[0]))if (this._intersectsWith(this.containers[a].containerCache)) {
            if (i && e.contains(this.containers[a].element[0], i.element[0]))continue;
            i = this.containers[a], s = a
        } else this.containers[a].containerCache.over && (this.containers[a]._trigger("out", t, this._uiHash(this)), this.containers[a].containerCache.over = 0);
        if (i)if (1 === this.containers.length)this.containers[s]._trigger("over", t, this._uiHash(this)), this.containers[s].containerCache.over = 1; else {
            for (var n = 1e4, r = null, o = this.containers[s].floating ? "left" : "top", h = this.containers[s].floating ? "width" : "height", l = this.positionAbs[o] + this.offset.click[o], u = this.items.length - 1; u >= 0; u--)if (e.contains(this.containers[s].element[0], this.items[u].item[0]) && this.items[u].item[0] != this.currentItem[0]) {
                var c = this.items[u].item.offset()[o], d = !1;
                Math.abs(c - l) > Math.abs(c + this.items[u][h] - l) && (d = !0, c += this.items[u][h]), n > Math.abs(c - l) && (n = Math.abs(c - l), r = this.items[u], this.direction = d ? "up" : "down")
            }
            if (!r && !this.options.dropOnEmpty)return;
            this.currentContainer = this.containers[s], r ? this._rearrange(t, r, null, !0) : this._rearrange(t, null, this.containers[s].element, !0), this._trigger("change", t, this._uiHash()), this.containers[s]._trigger("change", t, this._uiHash(this)), this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[s]._trigger("over", t, this._uiHash(this)), this.containers[s].containerCache.over = 1
        }
    }, _createHelper: function (t) {
        var i = this.options, s = e.isFunction(i.helper) ? e(i.helper.apply(this.element[0], [t, this.currentItem])) : "clone" == i.helper ? this.currentItem.clone() : this.currentItem;
        return s.parents("body").length || e("parent" != i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(s[0]), s[0] == this.currentItem[0] && (this._storedCSS = {width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left")}), ("" == s[0].style.width || i.forceHelperSize) && s.width(this.currentItem.width()), ("" == s[0].style.height || i.forceHelperSize) && s.height(this.currentItem.height()), s
    }, _adjustOffsetFromHelper: function (t) {
        "string" == typeof t && (t = t.split(" ")), e.isArray(t) && (t = {left: +t[0], top: +t[1] || 0}), "left"in t && (this.offset.click.left = t.left + this.margins.left), "right"in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), "top"in t && (this.offset.click.top = t.top + this.margins.top), "bottom"in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top)
    }, _getParentOffset: function () {
        this.offsetParent = this.helper.offsetParent();
        var t = this.offsetParent.offset();
        return"absolute" == this.cssPosition && this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), t.top += this.scrollParent.scrollTop()), (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && "html" == this.offsetParent[0].tagName.toLowerCase() && e.ui.ie) && (t = {top: 0, left: 0}), {top: t.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)}
    }, _getRelativeOffset: function () {
        if ("relative" == this.cssPosition) {
            var e = this.currentItem.position();
            return{top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()}
        }
        return{top: 0, left: 0}
    }, _cacheMargins: function () {
        this.margins = {left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0}
    }, _cacheHelperProportions: function () {
        this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
    }, _setContainment: function () {
        var t = this.options;
        if ("parent" == t.containment && (t.containment = this.helper[0].parentNode), ("document" == t.containment || "window" == t.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, e("document" == t.containment ? document : window).width() - this.helperProportions.width - this.margins.left, (e("document" == t.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), !/^(document|window|parent)$/.test(t.containment)) {
            var i = e(t.containment)[0], s = e(t.containment).offset(), a = "hidden" != e(i).css("overflow");
            this.containment = [s.left + (parseInt(e(i).css("borderLeftWidth"), 10) || 0) + (parseInt(e(i).css("paddingLeft"), 10) || 0) - this.margins.left, s.top + (parseInt(e(i).css("borderTopWidth"), 10) || 0) + (parseInt(e(i).css("paddingTop"), 10) || 0) - this.margins.top, s.left + (a ? Math.max(i.scrollWidth, i.offsetWidth) : i.offsetWidth) - (parseInt(e(i).css("borderLeftWidth"), 10) || 0) - (parseInt(e(i).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, s.top + (a ? Math.max(i.scrollHeight, i.offsetHeight) : i.offsetHeight) - (parseInt(e(i).css("borderTopWidth"), 10) || 0) - (parseInt(e(i).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
        }
    }, _convertPositionTo: function (t, i) {
        i || (i = this.position);
        var s = "absolute" == t ? 1 : -1, a = (this.options, "absolute" != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent), n = /(html|body)/i.test(a[0].tagName);
        return{top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : n ? 0 : a.scrollTop()) * s, left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : n ? 0 : a.scrollLeft()) * s}
    }, _generatePosition: function (t) {
        var i = this.options, s = "absolute" != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, a = /(html|body)/i.test(s[0].tagName);
        "relative" != this.cssPosition || this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset());
        var n = t.pageX, r = t.pageY;
        if (this.originalPosition && (this.containment && (t.pageX - this.offset.click.left < this.containment[0] && (n = this.containment[0] + this.offset.click.left), t.pageY - this.offset.click.top < this.containment[1] && (r = this.containment[1] + this.offset.click.top), t.pageX - this.offset.click.left > this.containment[2] && (n = this.containment[2] + this.offset.click.left), t.pageY - this.offset.click.top > this.containment[3] && (r = this.containment[3] + this.offset.click.top)), i.grid)) {
            var o = this.originalPageY + Math.round((r - this.originalPageY) / i.grid[1]) * i.grid[1];
            r = this.containment ? o - this.offset.click.top < this.containment[1] || o - this.offset.click.top > this.containment[3] ? o - this.offset.click.top < this.containment[1] ? o + i.grid[1] : o - i.grid[1] : o : o;
            var h = this.originalPageX + Math.round((n - this.originalPageX) / i.grid[0]) * i.grid[0];
            n = this.containment ? h - this.offset.click.left < this.containment[0] || h - this.offset.click.left > this.containment[2] ? h - this.offset.click.left < this.containment[0] ? h + i.grid[0] : h - i.grid[0] : h : h
        }
        return{top: r - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : a ? 0 : s.scrollTop()), left: n - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : a ? 0 : s.scrollLeft())}
    }, _rearrange: function (e, t, i, s) {
        i ? i[0].appendChild(this.placeholder[0]) : t.item[0].parentNode.insertBefore(this.placeholder[0], "down" == this.direction ? t.item[0] : t.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;
        var a = this.counter;
        this._delay(function () {
            a == this.counter && this.refreshPositions(!s)
        })
    }, _clear: function (t, i) {
        this.reverting = !1;
        var s = [];
        if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] == this.currentItem[0]) {
            for (var a in this._storedCSS)("auto" == this._storedCSS[a] || "static" == this._storedCSS[a]) && (this._storedCSS[a] = "");
            this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
        } else this.currentItem.show();
        this.fromOutside && !i && s.push(function (e) {
            this._trigger("receive", e, this._uiHash(this.fromOutside))
        }), !this.fromOutside && this.domPosition.prev == this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent == this.currentItem.parent()[0] || i || s.push(function (e) {
            this._trigger("update", e, this._uiHash())
        }), this !== this.currentContainer && (i || (s.push(function (e) {
            this._trigger("remove", e, this._uiHash())
        }), s.push(function (e) {
            return function (t) {
                e._trigger("receive", t, this._uiHash(this))
            }
        }.call(this, this.currentContainer)), s.push(function (e) {
            return function (t) {
                e._trigger("update", t, this._uiHash(this))
            }
        }.call(this, this.currentContainer))));
        for (var a = this.containers.length - 1; a >= 0; a--)i || s.push(function (e) {
            return function (t) {
                e._trigger("deactivate", t, this._uiHash(this))
            }
        }.call(this, this.containers[a])), this.containers[a].containerCache.over && (s.push(function (e) {
            return function (t) {
                e._trigger("out", t, this._uiHash(this))
            }
        }.call(this, this.containers[a])), this.containers[a].containerCache.over = 0);
        if (this._storedCursor && e("body").css("cursor", this._storedCursor), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" == this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, this.cancelHelperRemoval) {
            if (!i) {
                this._trigger("beforeStop", t, this._uiHash());
                for (var a = 0; s.length > a; a++)s[a].call(this, t);
                this._trigger("stop", t, this._uiHash())
            }
            return this.fromOutside = !1, !1
        }
        if (i || this._trigger("beforeStop", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.helper[0] != this.currentItem[0] && this.helper.remove(), this.helper = null, !i) {
            for (var a = 0; s.length > a; a++)s[a].call(this, t);
            this._trigger("stop", t, this._uiHash())
        }
        return this.fromOutside = !1, !0
    }, _trigger: function () {
        e.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel()
    }, _uiHash: function (t) {
        var i = t || this;
        return{helper: i.helper, placeholder: i.placeholder || e([]), position: i.position, originalPosition: i.originalPosition, offset: i.positionAbs, item: i.currentItem, sender: t ? t.element : null}
    }})
})(jQuery);
(function (e) {
    var t = 0, i = {}, a = {};
    i.height = i.paddingTop = i.paddingBottom = i.borderTopWidth = i.borderBottomWidth = "hide", a.height = a.paddingTop = a.paddingBottom = a.borderTopWidth = a.borderBottomWidth = "show", e.widget("ui.accordion", {version: "1.9.2", options: {active: 0, animate: {}, collapsible: !1, event: "click", header: "> li > :first-child,> :not(li):even", heightStyle: "auto", icons: {activeHeader: "ui-icon-triangle-1-s", header: "ui-icon-triangle-1-e"}, activate: null, beforeActivate: null}, _create: function () {
        var i = this.accordionId = "ui-accordion-" + (this.element.attr("id") || ++t), a = this.options;
        this.prevShow = this.prevHide = e(), this.element.addClass("ui-accordion ui-widget ui-helper-reset"), this.headers = this.element.find(a.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"), this._hoverable(this.headers), this._focusable(this.headers), this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").hide(), a.collapsible || a.active !== !1 && null != a.active || (a.active = 0), 0 > a.active && (a.active += this.headers.length), this.active = this._findActive(a.active).addClass("ui-accordion-header-active ui-state-active").toggleClass("ui-corner-all ui-corner-top"), this.active.next().addClass("ui-accordion-content-active").show(), this._createIcons(), this.refresh(), this.element.attr("role", "tablist"), this.headers.attr("role", "tab").each(function (t) {
            var a = e(this), s = a.attr("id"), n = a.next(), r = n.attr("id");
            s || (s = i + "-header-" + t, a.attr("id", s)), r || (r = i + "-panel-" + t, n.attr("id", r)), a.attr("aria-controls", r), n.attr("aria-labelledby", s)
        }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({"aria-selected": "false", tabIndex: -1}).next().attr({"aria-expanded": "false", "aria-hidden": "true"}).hide(), this.active.length ? this.active.attr({"aria-selected": "true", tabIndex: 0}).next().attr({"aria-expanded": "true", "aria-hidden": "false"}) : this.headers.eq(0).attr("tabIndex", 0), this._on(this.headers, {keydown: "_keydown"}), this._on(this.headers.next(), {keydown: "_panelKeyDown"}), this._setupEvents(a.event)
    }, _getCreateEventData: function () {
        return{header: this.active, content: this.active.length ? this.active.next() : e()}
    }, _createIcons: function () {
        var t = this.options.icons;
        t && (e("<span>").addClass("ui-accordion-header-icon ui-icon " + t.header).prependTo(this.headers), this.active.children(".ui-accordion-header-icon").removeClass(t.header).addClass(t.activeHeader), this.headers.addClass("ui-accordion-icons"))
    }, _destroyIcons: function () {
        this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()
    }, _destroy: function () {
        var e;
        this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"), this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function () {
            /^ui-accordion/.test(this.id) && this.removeAttribute("id")
        }), this._destroyIcons(), e = this.headers.next().css("display", "").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function () {
            /^ui-accordion/.test(this.id) && this.removeAttribute("id")
        }), "content" !== this.options.heightStyle && e.css("height", "")
    }, _setOption: function (e, t) {
        return"active" === e ? (this._activate(t), undefined) : ("event" === e && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(t)), this._super(e, t), "collapsible" !== e || t || this.options.active !== !1 || this._activate(0), "icons" === e && (this._destroyIcons(), t && this._createIcons()), "disabled" === e && this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!t), undefined)
    }, _keydown: function (t) {
        if (!t.altKey && !t.ctrlKey) {
            var i = e.ui.keyCode, a = this.headers.length, s = this.headers.index(t.target), n = !1;
            switch (t.keyCode) {
                case i.RIGHT:
                case i.DOWN:
                    n = this.headers[(s + 1) % a];
                    break;
                case i.LEFT:
                case i.UP:
                    n = this.headers[(s - 1 + a) % a];
                    break;
                case i.SPACE:
                case i.ENTER:
                    this._eventHandler(t);
                    break;
                case i.HOME:
                    n = this.headers[0];
                    break;
                case i.END:
                    n = this.headers[a - 1]
            }
            n && (e(t.target).attr("tabIndex", -1), e(n).attr("tabIndex", 0), n.focus(), t.preventDefault())
        }
    }, _panelKeyDown: function (t) {
        t.keyCode === e.ui.keyCode.UP && t.ctrlKey && e(t.currentTarget).prev().focus()
    }, refresh: function () {
        var t, i, a = this.options.heightStyle, s = this.element.parent();
        "fill" === a ? (e.support.minHeight || (i = s.css("overflow"), s.css("overflow", "hidden")), t = s.height(), this.element.siblings(":visible").each(function () {
            var i = e(this), a = i.css("position");
            "absolute" !== a && "fixed" !== a && (t -= i.outerHeight(!0))
        }), i && s.css("overflow", i), this.headers.each(function () {
            t -= e(this).outerHeight(!0)
        }), this.headers.next().each(function () {
            e(this).height(Math.max(0, t - e(this).innerHeight() + e(this).height()))
        }).css("overflow", "auto")) : "auto" === a && (t = 0, this.headers.next().each(function () {
            t = Math.max(t, e(this).css("height", "").height())
        }).height(t))
    }, _activate: function (t) {
        var i = this._findActive(t)[0];
        i !== this.active[0] && (i = i || this.active[0], this._eventHandler({target: i, currentTarget: i, preventDefault: e.noop}))
    }, _findActive: function (t) {
        return"number" == typeof t ? this.headers.eq(t) : e()
    }, _setupEvents: function (t) {
        var i = {};
        t && (e.each(t.split(" "), function (e, t) {
            i[t] = "_eventHandler"
        }), this._on(this.headers, i))
    }, _eventHandler: function (t) {
        var i = this.options, a = this.active, s = e(t.currentTarget), n = s[0] === a[0], r = n && i.collapsible, o = r ? e() : s.next(), h = a.next(), l = {oldHeader: a, oldPanel: h, newHeader: r ? e() : s, newPanel: o};
        t.preventDefault(), n && !i.collapsible || this._trigger("beforeActivate", t, l) === !1 || (i.active = r ? !1 : this.headers.index(s), this.active = n ? e() : s, this._toggle(l), a.removeClass("ui-accordion-header-active ui-state-active"), i.icons && a.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header), n || (s.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"), i.icons && s.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader), s.next().addClass("ui-accordion-content-active")))
    }, _toggle: function (t) {
        var i = t.newPanel, a = this.prevShow.length ? this.prevShow : t.oldPanel;
        this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = a, this.options.animate ? this._animate(i, a, t) : (a.hide(), i.show(), this._toggleComplete(t)), a.attr({"aria-expanded": "false", "aria-hidden": "true"}), a.prev().attr("aria-selected", "false"), i.length && a.length ? a.prev().attr("tabIndex", -1) : i.length && this.headers.filter(function () {
            return 0 === e(this).attr("tabIndex")
        }).attr("tabIndex", -1), i.attr({"aria-expanded": "true", "aria-hidden": "false"}).prev().attr({"aria-selected": "true", tabIndex: 0})
    }, _animate: function (e, t, s) {
        var n, r, o, h = this, l = 0, u = e.length && (!t.length || e.index() < t.index()), d = this.options.animate || {}, c = u && d.down || d, p = function () {
            h._toggleComplete(s)
        };
        return"number" == typeof c && (o = c), "string" == typeof c && (r = c), r = r || c.easing || d.easing, o = o || c.duration || d.duration, t.length ? e.length ? (n = e.show().outerHeight(), t.animate(i, {duration: o, easing: r, step: function (e, t) {
            t.now = Math.round(e)
        }}), e.hide().animate(a, {duration: o, easing: r, complete: p, step: function (e, i) {
            i.now = Math.round(e), "height" !== i.prop ? l += i.now : "content" !== h.options.heightStyle && (i.now = Math.round(n - t.outerHeight() - l), l = 0)
        }}), undefined) : t.animate(i, o, r, p) : e.animate(a, o, r, p)
    }, _toggleComplete: function (e) {
        var t = e.oldPanel;
        t.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"), t.length && (t.parent()[0].className = t.parent()[0].className), this._trigger("activate", null, e)
    }}), e.uiBackCompat !== !1 && (function (e, t) {
        e.extend(t.options, {navigation: !1, navigationFilter: function () {
            return this.href.toLowerCase() === location.href.toLowerCase()
        }});
        var i = t._create;
        t._create = function () {
            if (this.options.navigation) {
                var t = this, a = this.element.find(this.options.header), s = a.next(), n = a.add(s).find("a").filter(this.options.navigationFilter)[0];
                n && a.add(s).each(function (i) {
                    return e.contains(this, n) ? (t.options.active = Math.floor(i / 2), !1) : undefined
                })
            }
            i.call(this)
        }
    }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
        e.extend(t.options, {heightStyle: null, autoHeight: !0, clearStyle: !1, fillSpace: !1});
        var i = t._create, a = t._setOption;
        e.extend(t, {_create: function () {
            this.options.heightStyle = this.options.heightStyle || this._mergeHeightStyle(), i.call(this)
        }, _setOption: function (e) {
            ("autoHeight" === e || "clearStyle" === e || "fillSpace" === e) && (this.options.heightStyle = this._mergeHeightStyle()), a.apply(this, arguments)
        }, _mergeHeightStyle: function () {
            var e = this.options;
            return e.fillSpace ? "fill" : e.clearStyle ? "content" : e.autoHeight ? "auto" : undefined
        }})
    }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
        e.extend(t.options.icons, {activeHeader: null, headerSelected: "ui-icon-triangle-1-s"});
        var i = t._createIcons;
        t._createIcons = function () {
            this.options.icons && (this.options.icons.activeHeader = this.options.icons.activeHeader || this.options.icons.headerSelected), i.call(this)
        }
    }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
        t.activate = t._activate;
        var i = t._findActive;
        t._findActive = function (e) {
            return-1 === e && (e = !1), e && "number" != typeof e && (e = this.headers.index(this.headers.filter(e)), -1 === e && (e = !1)), i.call(this, e)
        }
    }(jQuery, jQuery.ui.accordion.prototype), jQuery.ui.accordion.prototype.resize = jQuery.ui.accordion.prototype.refresh, function (e, t) {
        e.extend(t.options, {change: null, changestart: null});
        var i = t._trigger;
        t._trigger = function (e, t, a) {
            var s = i.apply(this, arguments);
            return s ? ("beforeActivate" === e ? s = i.call(this, "changestart", t, {oldHeader: a.oldHeader, oldContent: a.oldPanel, newHeader: a.newHeader, newContent: a.newPanel}) : "activate" === e && (s = i.call(this, "change", t, {oldHeader: a.oldHeader, oldContent: a.oldPanel, newHeader: a.newHeader, newContent: a.newPanel})), s) : !1
        }
    }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
        e.extend(t.options, {animate: null, animated: "slide"});
        var i = t._create;
        t._create = function () {
            var e = this.options;
            null === e.animate && (e.animate = e.animated ? "slide" === e.animated ? 300 : "bounceslide" === e.animated ? {duration: 200, down: {easing: "easeOutBounce", duration: 1e3}} : e.animated : !1), i.call(this)
        }
    }(jQuery, jQuery.ui.accordion.prototype))
})(jQuery);
(function (e) {
    var t = 0;
    e.widget("ui.autocomplete", {version: "1.9.2", defaultElement: "<input>", options: {appendTo: "body", autoFocus: !1, delay: 300, minLength: 1, position: {my: "left top", at: "left bottom", collision: "none"}, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null}, pending: 0, _create: function () {
        var t, i, a;
        this.isMultiLine = this._isMultiLine(), this.valueMethod = this.element[this.element.is("input,textarea") ? "val" : "text"], this.isNewMenu = !0, this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off"), this._on(this.element, {keydown: function (s) {
            if (this.element.prop("readOnly"))return t = !0, a = !0, i = !0, undefined;
            t = !1, a = !1, i = !1;
            var n = e.ui.keyCode;
            switch (s.keyCode) {
                case n.PAGE_UP:
                    t = !0, this._move("previousPage", s);
                    break;
                case n.PAGE_DOWN:
                    t = !0, this._move("nextPage", s);
                    break;
                case n.UP:
                    t = !0, this._keyEvent("previous", s);
                    break;
                case n.DOWN:
                    t = !0, this._keyEvent("next", s);
                    break;
                case n.ENTER:
                case n.NUMPAD_ENTER:
                    this.menu.active && (t = !0, s.preventDefault(), this.menu.select(s));
                    break;
                case n.TAB:
                    this.menu.active && this.menu.select(s);
                    break;
                case n.ESCAPE:
                    this.menu.element.is(":visible") && (this._value(this.term), this.close(s), s.preventDefault());
                    break;
                default:
                    i = !0, this._searchTimeout(s)
            }
        }, keypress: function (a) {
            if (t)return t = !1, a.preventDefault(), undefined;
            if (!i) {
                var s = e.ui.keyCode;
                switch (a.keyCode) {
                    case s.PAGE_UP:
                        this._move("previousPage", a);
                        break;
                    case s.PAGE_DOWN:
                        this._move("nextPage", a);
                        break;
                    case s.UP:
                        this._keyEvent("previous", a);
                        break;
                    case s.DOWN:
                        this._keyEvent("next", a)
                }
            }
        }, input: function (e) {
            return a ? (a = !1, e.preventDefault(), undefined) : (this._searchTimeout(e), undefined)
        }, focus: function () {
            this.selectedItem = null, this.previous = this._value()
        }, blur: function (e) {
            return this.cancelBlur ? (delete this.cancelBlur, undefined) : (clearTimeout(this.searching), this.close(e), this._change(e), undefined)
        }}), this._initSource(), this.menu = e("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo || "body")[0]).menu({input: e(), role: null}).zIndex(this.element.zIndex() + 1).hide().data("menu"), this._on(this.menu.element, {mousedown: function (t) {
            t.preventDefault(), this.cancelBlur = !0, this._delay(function () {
                delete this.cancelBlur
            });
            var i = this.menu.element[0];
            e(t.target).closest(".ui-menu-item").length || this._delay(function () {
                var t = this;
                this.document.one("mousedown", function (a) {
                    a.target === t.element[0] || a.target === i || e.contains(i, a.target) || t.close()
                })
            })
        }, menufocus: function (t, i) {
            if (this.isNewMenu && (this.isNewMenu = !1, t.originalEvent && /^mouse/.test(t.originalEvent.type)))return this.menu.blur(), this.document.one("mousemove", function () {
                e(t.target).trigger(t.originalEvent)
            }), undefined;
            var a = i.item.data("ui-autocomplete-item") || i.item.data("item.autocomplete");
            !1 !== this._trigger("focus", t, {item: a}) ? t.originalEvent && /^key/.test(t.originalEvent.type) && this._value(a.value) : this.liveRegion.text(a.value)
        }, menuselect: function (e, t) {
            var i = t.item.data("ui-autocomplete-item") || t.item.data("item.autocomplete"), a = this.previous;
            this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = a, this._delay(function () {
                this.previous = a, this.selectedItem = i
            })), !1 !== this._trigger("select", e, {item: i}) && this._value(i.value), this.term = this._value(), this.close(e), this.selectedItem = i
        }}), this.liveRegion = e("<span>", {role: "status", "aria-live": "polite"}).addClass("ui-helper-hidden-accessible").insertAfter(this.element), e.fn.bgiframe && this.menu.element.bgiframe(), this._on(this.window, {beforeunload: function () {
            this.element.removeAttr("autocomplete")
        }})
    }, _destroy: function () {
        clearTimeout(this.searching), this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove()
    }, _setOption: function (e, t) {
        this._super(e, t), "source" === e && this._initSource(), "appendTo" === e && this.menu.element.appendTo(this.document.find(t || "body")[0]), "disabled" === e && t && this.xhr && this.xhr.abort()
    }, _isMultiLine: function () {
        return this.element.is("textarea") ? !0 : this.element.is("input") ? !1 : this.element.prop("isContentEditable")
    }, _initSource: function () {
        var t, i, a = this;
        e.isArray(this.options.source) ? (t = this.options.source, this.source = function (i, a) {
            a(e.ui.autocomplete.filter(t, i.term))
        }) : "string" == typeof this.options.source ? (i = this.options.source, this.source = function (t, s) {
            a.xhr && a.xhr.abort(), a.xhr = e.ajax({url: i, data: t, dataType: "json", success: function (e) {
                s(e)
            }, error: function () {
                s([])
            }})
        }) : this.source = this.options.source
    }, _searchTimeout: function (e) {
        clearTimeout(this.searching), this.searching = this._delay(function () {
            this.term !== this._value() && (this.selectedItem = null, this.search(null, e))
        }, this.options.delay)
    }, search: function (e, t) {
        return e = null != e ? e : this._value(), this.term = this._value(), e.length < this.options.minLength ? this.close(t) : this._trigger("search", t) !== !1 ? this._search(e) : undefined
    }, _search: function (e) {
        this.pending++, this.element.addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({term: e}, this._response())
    }, _response: function () {
        var e = this, i = ++t;
        return function (a) {
            i === t && e.__response(a), e.pending--, e.pending || e.element.removeClass("ui-autocomplete-loading")
        }
    }, __response: function (e) {
        e && (e = this._normalize(e)), this._trigger("response", null, {content: e}), !this.options.disabled && e && e.length && !this.cancelSearch ? (this._suggest(e), this._trigger("open")) : this._close()
    }, close: function (e) {
        this.cancelSearch = !0, this._close(e)
    }, _close: function (e) {
        this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", e))
    }, _change: function (e) {
        this.previous !== this._value() && this._trigger("change", e, {item: this.selectedItem})
    }, _normalize: function (t) {
        return t.length && t[0].label && t[0].value ? t : e.map(t, function (t) {
            return"string" == typeof t ? {label: t, value: t} : e.extend({label: t.label || t.value, value: t.value || t.label}, t)
        })
    }, _suggest: function (t) {
        var i = this.menu.element.empty().zIndex(this.element.zIndex() + 1);
        this._renderMenu(i, t), this.menu.refresh(), i.show(), this._resizeMenu(), i.position(e.extend({of: this.element}, this.options.position)), this.options.autoFocus && this.menu.next()
    }, _resizeMenu: function () {
        var e = this.menu.element;
        e.outerWidth(Math.max(e.width("").outerWidth() + 1, this.element.outerWidth()))
    }, _renderMenu: function (t, i) {
        var a = this;
        e.each(i, function (e, i) {
            a._renderItemData(t, i)
        })
    }, _renderItemData: function (e, t) {
        return this._renderItem(e, t).data("ui-autocomplete-item", t)
    }, _renderItem: function (t, i) {
        return e("<li>").append(e("<a>").text(i.label)).appendTo(t)
    }, _move: function (e, t) {
        return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(e) || this.menu.isLastItem() && /^next/.test(e) ? (this._value(this.term), this.menu.blur(), undefined) : (this.menu[e](t), undefined) : (this.search(null, t), undefined)
    }, widget: function () {
        return this.menu.element
    }, _value: function () {
        return this.valueMethod.apply(this.element, arguments)
    }, _keyEvent: function (e, t) {
        (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(e, t), t.preventDefault())
    }}), e.extend(e.ui.autocomplete, {escapeRegex: function (e) {
        return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
    }, filter: function (t, i) {
        var a = RegExp(e.ui.autocomplete.escapeRegex(i), "i");
        return e.grep(t, function (e) {
            return a.test(e.label || e.value || e)
        })
    }}), e.widget("ui.autocomplete", e.ui.autocomplete, {options: {messages: {noResults: "No search results.", results: function (e) {
        return e + (e > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate."
    }}}, __response: function (e) {
        var t;
        this._superApply(arguments), this.options.disabled || this.cancelSearch || (t = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.text(t))
    }})
})(jQuery);
(function (e) {
    var t, i, a, s, n = "ui-button ui-widget ui-state-default ui-corner-all", r = "ui-state-hover ui-state-active ", o = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", h = function () {
        var t = e(this).find(":ui-button");
        setTimeout(function () {
            t.button("refresh")
        }, 1)
    }, l = function (t) {
        var i = t.name, a = t.form, s = e([]);
        return i && (s = a ? e(a).find("[name='" + i + "']") : e("[name='" + i + "']", t.ownerDocument).filter(function () {
            return!this.form
        })), s
    };
    e.widget("ui.button", {version: "1.9.2", defaultElement: "<button>", options: {disabled: null, text: !0, label: null, icons: {primary: null, secondary: null}}, _create: function () {
        this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, h), "boolean" != typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled), this._determineButtonType(), this.hasTitle = !!this.buttonElement.attr("title");
        var r = this, o = this.options, u = "checkbox" === this.type || "radio" === this.type, d = u ? "" : "ui-state-active", c = "ui-state-focus";
        null === o.label && (o.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html()), this._hoverable(this.buttonElement), this.buttonElement.addClass(n).attr("role", "button").bind("mouseenter" + this.eventNamespace,function () {
            o.disabled || this === t && e(this).addClass("ui-state-active")
        }).bind("mouseleave" + this.eventNamespace,function () {
                o.disabled || e(this).removeClass(d)
            }).bind("click" + this.eventNamespace, function (e) {
                o.disabled && (e.preventDefault(), e.stopImmediatePropagation())
            }), this.element.bind("focus" + this.eventNamespace,function () {
            r.buttonElement.addClass(c)
        }).bind("blur" + this.eventNamespace, function () {
                r.buttonElement.removeClass(c)
            }), u && (this.element.bind("change" + this.eventNamespace, function () {
            s || r.refresh()
        }), this.buttonElement.bind("mousedown" + this.eventNamespace,function (e) {
            o.disabled || (s = !1, i = e.pageX, a = e.pageY)
        }).bind("mouseup" + this.eventNamespace, function (e) {
                o.disabled || (i !== e.pageX || a !== e.pageY) && (s = !0)
            })), "checkbox" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function () {
            return o.disabled || s ? !1 : (e(this).toggleClass("ui-state-active"), r.buttonElement.attr("aria-pressed", r.element[0].checked), undefined)
        }) : "radio" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function () {
            if (o.disabled || s)return!1;
            e(this).addClass("ui-state-active"), r.buttonElement.attr("aria-pressed", "true");
            var t = r.element[0];
            l(t).not(t).map(function () {
                return e(this).button("widget")[0]
            }).removeClass("ui-state-active").attr("aria-pressed", "false")
        }) : (this.buttonElement.bind("mousedown" + this.eventNamespace,function () {
            return o.disabled ? !1 : (e(this).addClass("ui-state-active"), t = this, r.document.one("mouseup", function () {
                t = null
            }), undefined)
        }).bind("mouseup" + this.eventNamespace,function () {
                return o.disabled ? !1 : (e(this).removeClass("ui-state-active"), undefined)
            }).bind("keydown" + this.eventNamespace,function (t) {
                return o.disabled ? !1 : ((t.keyCode === e.ui.keyCode.SPACE || t.keyCode === e.ui.keyCode.ENTER) && e(this).addClass("ui-state-active"), undefined)
            }).bind("keyup" + this.eventNamespace, function () {
                e(this).removeClass("ui-state-active")
            }), this.buttonElement.is("a") && this.buttonElement.keyup(function (t) {
            t.keyCode === e.ui.keyCode.SPACE && e(this).click()
        })), this._setOption("disabled", o.disabled), this._resetButton()
    }, _determineButtonType: function () {
        var e, t, i;
        this.type = this.element.is("[type=checkbox]") ? "checkbox" : this.element.is("[type=radio]") ? "radio" : this.element.is("input") ? "input" : "button", "checkbox" === this.type || "radio" === this.type ? (e = this.element.parents().last(), t = "label[for='" + this.element.attr("id") + "']", this.buttonElement = e.find(t), this.buttonElement.length || (e = e.length ? e.siblings() : this.element.siblings(), this.buttonElement = e.filter(t), this.buttonElement.length || (this.buttonElement = e.find(t))), this.element.addClass("ui-helper-hidden-accessible"), i = this.element.is(":checked"), i && this.buttonElement.addClass("ui-state-active"), this.buttonElement.prop("aria-pressed", i)) : this.buttonElement = this.element
    }, widget: function () {
        return this.buttonElement
    }, _destroy: function () {
        this.element.removeClass("ui-helper-hidden-accessible"), this.buttonElement.removeClass(n + " " + r + " " + o).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()), this.hasTitle || this.buttonElement.removeAttr("title")
    }, _setOption: function (e, t) {
        return this._super(e, t), "disabled" === e ? (t ? this.element.prop("disabled", !0) : this.element.prop("disabled", !1), undefined) : (this._resetButton(), undefined)
    }, refresh: function () {
        var t = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
        t !== this.options.disabled && this._setOption("disabled", t), "radio" === this.type ? l(this.element[0]).each(function () {
            e(this).is(":checked") ? e(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false")
        }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"))
    }, _resetButton: function () {
        if ("input" === this.type)return this.options.label && this.element.val(this.options.label), undefined;
        var t = this.buttonElement.removeClass(o), i = e("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(t.empty()).text(), a = this.options.icons, s = a.primary && a.secondary, n = [];
        a.primary || a.secondary ? (this.options.text && n.push("ui-button-text-icon" + (s ? "s" : a.primary ? "-primary" : "-secondary")), a.primary && t.prepend("<span class='ui-button-icon-primary ui-icon " + a.primary + "'></span>"), a.secondary && t.append("<span class='ui-button-icon-secondary ui-icon " + a.secondary + "'></span>"), this.options.text || (n.push(s ? "ui-button-icons-only" : "ui-button-icon-only"), this.hasTitle || t.attr("title", e.trim(i)))) : n.push("ui-button-text-only"), t.addClass(n.join(" "))
    }}), e.widget("ui.buttonset", {version: "1.9.2", options: {items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"}, _create: function () {
        this.element.addClass("ui-buttonset")
    }, _init: function () {
        this.refresh()
    }, _setOption: function (e, t) {
        "disabled" === e && this.buttons.button("option", e, t), this._super(e, t)
    }, refresh: function () {
        var t = "rtl" === this.element.css("direction");
        this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function () {
            return e(this).button("widget")[0]
        }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(t ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(t ? "ui-corner-left" : "ui-corner-right").end().end()
    }, _destroy: function () {
        this.element.removeClass("ui-buttonset"), this.buttons.map(function () {
            return e(this).button("widget")[0]
        }).removeClass("ui-corner-left ui-corner-right").end().button("destroy")
    }})
})(jQuery);
(function ($, undefined) {
    function Datepicker() {
        this.debug = !1, this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = {closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: ""}, this._defaults = {showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: "c-10:c+10", showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1}, $.extend(this._defaults, this.regional[""]), this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
    }

    function bindHover(e) {
        var t = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return e.delegate(t, "mouseout",function () {
            $(this).removeClass("ui-state-hover"), -1 != this.className.indexOf("ui-datepicker-prev") && $(this).removeClass("ui-datepicker-prev-hover"), -1 != this.className.indexOf("ui-datepicker-next") && $(this).removeClass("ui-datepicker-next-hover")
        }).delegate(t, "mouseover", function () {
                $.datepicker._isDisabledDatepicker(instActive.inline ? e.parent()[0] : instActive.input[0]) || ($(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), $(this).addClass("ui-state-hover"), -1 != this.className.indexOf("ui-datepicker-prev") && $(this).addClass("ui-datepicker-prev-hover"), -1 != this.className.indexOf("ui-datepicker-next") && $(this).addClass("ui-datepicker-next-hover"))
            })
    }

    function extendRemove(e, t) {
        $.extend(e, t);
        for (var i in t)(null == t[i] || t[i] == undefined) && (e[i] = t[i]);
        return e
    }

    $.extend($.ui, {datepicker: {version: "1.9.2"}});
    var PROP_NAME = "datepicker", dpuuid = (new Date).getTime(), instActive;
    $.extend(Datepicker.prototype, {markerClassName: "hasDatepicker", maxRows: 4, log: function () {
        this.debug && console.log.apply("", arguments)
    }, _widgetDatepicker: function () {
        return this.dpDiv
    }, setDefaults: function (e) {
        return extendRemove(this._defaults, e || {}), this
    }, _attachDatepicker: function (target, settings) {
        var inlineSettings = null;
        for (var attrName in this._defaults) {
            var attrValue = target.getAttribute("date:" + attrName);
            if (attrValue) {
                inlineSettings = inlineSettings || {};
                try {
                    inlineSettings[attrName] = eval(attrValue)
                } catch (err) {
                    inlineSettings[attrName] = attrValue
                }
            }
        }
        var nodeName = target.nodeName.toLowerCase(), inline = "div" == nodeName || "span" == nodeName;
        target.id || (this.uuid += 1, target.id = "dp" + this.uuid);
        var inst = this._newInst($(target), inline);
        inst.settings = $.extend({}, settings || {}, inlineSettings || {}), "input" == nodeName ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst)
    }, _newInst: function (e, t) {
        var i = e[0].id.replace(/([^A-Za-z0-9_-])/g, "\\\\$1");
        return{id: i, input: e, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: t, dpDiv: t ? bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')) : this.dpDiv}
    }, _connectDatepicker: function (e, t) {
        var i = $(e);
        t.append = $([]), t.trigger = $([]), i.hasClass(this.markerClassName) || (this._attachments(i, t), i.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function (e, i, a) {
            t.settings[i] = a
        }).bind("getData.datepicker", function (e, i) {
                return this._get(t, i)
            }), this._autoSize(t), $.data(e, PROP_NAME, t), t.settings.disabled && this._disableDatepicker(e))
    }, _attachments: function (e, t) {
        var i = this._get(t, "appendText"), a = this._get(t, "isRTL");
        t.append && t.append.remove(), i && (t.append = $('<span class="' + this._appendClass + '">' + i + "</span>"), e[a ? "before" : "after"](t.append)), e.unbind("focus", this._showDatepicker), t.trigger && t.trigger.remove();
        var s = this._get(t, "showOn");
        if (("focus" == s || "both" == s) && e.focus(this._showDatepicker), "button" == s || "both" == s) {
            var n = this._get(t, "buttonText"), r = this._get(t, "buttonImage");
            t.trigger = $(this._get(t, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({src: r, alt: n, title: n}) : $('<button type="button"></button>').addClass(this._triggerClass).html("" == r ? n : $("<img/>").attr({src: r, alt: n, title: n}))), e[a ? "before" : "after"](t.trigger), t.trigger.click(function () {
                return $.datepicker._datepickerShowing && $.datepicker._lastInput == e[0] ? $.datepicker._hideDatepicker() : $.datepicker._datepickerShowing && $.datepicker._lastInput != e[0] ? ($.datepicker._hideDatepicker(), $.datepicker._showDatepicker(e[0])) : $.datepicker._showDatepicker(e[0]), !1
            })
        }
    }, _autoSize: function (e) {
        if (this._get(e, "autoSize") && !e.inline) {
            var t = new Date(2009, 11, 20), i = this._get(e, "dateFormat");
            if (i.match(/[DM]/)) {
                var a = function (e) {
                    for (var t = 0, i = 0, a = 0; e.length > a; a++)e[a].length > t && (t = e[a].length, i = a);
                    return i
                };
                t.setMonth(a(this._get(e, i.match(/MM/) ? "monthNames" : "monthNamesShort"))), t.setDate(a(this._get(e, i.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - t.getDay())
            }
            e.input.attr("size", this._formatDate(e, t).length)
        }
    }, _inlineDatepicker: function (e, t) {
        var i = $(e);
        i.hasClass(this.markerClassName) || (i.addClass(this.markerClassName).append(t.dpDiv).bind("setData.datepicker",function (e, i, a) {
            t.settings[i] = a
        }).bind("getData.datepicker", function (e, i) {
                return this._get(t, i)
            }), $.data(e, PROP_NAME, t), this._setDate(t, this._getDefaultDate(t), !0), this._updateDatepicker(t), this._updateAlternate(t), t.settings.disabled && this._disableDatepicker(e), t.dpDiv.css("display", "block"))
    }, _dialogDatepicker: function (e, t, i, a, s) {
        var n = this._dialogInst;
        if (!n) {
            this.uuid += 1;
            var r = "dp" + this.uuid;
            this._dialogInput = $('<input type="text" id="' + r + '" style="position: absolute; top: -100px; width: 0px;"/>'), this._dialogInput.keydown(this._doKeyDown), $("body").append(this._dialogInput), n = this._dialogInst = this._newInst(this._dialogInput, !1), n.settings = {}, $.data(this._dialogInput[0], PROP_NAME, n)
        }
        if (extendRemove(n.settings, a || {}), t = t && t.constructor == Date ? this._formatDate(n, t) : t, this._dialogInput.val(t), this._pos = s ? s.length ? s : [s.pageX, s.pageY] : null, !this._pos) {
            var o = document.documentElement.clientWidth, h = document.documentElement.clientHeight, l = document.documentElement.scrollLeft || document.body.scrollLeft, u = document.documentElement.scrollTop || document.body.scrollTop;
            this._pos = [o / 2 - 100 + l, h / 2 - 150 + u]
        }
        return this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), n.settings.onSelect = i, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), $.blockUI && $.blockUI(this.dpDiv), $.data(this._dialogInput[0], PROP_NAME, n), this
    }, _destroyDatepicker: function (e) {
        var t = $(e), i = $.data(e, PROP_NAME);
        if (t.hasClass(this.markerClassName)) {
            var a = e.nodeName.toLowerCase();
            $.removeData(e, PROP_NAME), "input" == a ? (i.append.remove(), i.trigger.remove(), t.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : ("div" == a || "span" == a) && t.removeClass(this.markerClassName).empty()
        }
    }, _enableDatepicker: function (e) {
        var t = $(e), i = $.data(e, PROP_NAME);
        if (t.hasClass(this.markerClassName)) {
            var a = e.nodeName.toLowerCase();
            if ("input" == a)e.disabled = !1, i.trigger.filter("button").each(function () {
                this.disabled = !1
            }).end().filter("img").css({opacity: "1.0", cursor: ""}); else if ("div" == a || "span" == a) {
                var s = t.children("." + this._inlineClass);
                s.children().removeClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)
            }
            this._disabledInputs = $.map(this._disabledInputs, function (t) {
                return t == e ? null : t
            })
        }
    }, _disableDatepicker: function (e) {
        var t = $(e), i = $.data(e, PROP_NAME);
        if (t.hasClass(this.markerClassName)) {
            var a = e.nodeName.toLowerCase();
            if ("input" == a)e.disabled = !0, i.trigger.filter("button").each(function () {
                this.disabled = !0
            }).end().filter("img").css({opacity: "0.5", cursor: "default"}); else if ("div" == a || "span" == a) {
                var s = t.children("." + this._inlineClass);
                s.children().addClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)
            }
            this._disabledInputs = $.map(this._disabledInputs, function (t) {
                return t == e ? null : t
            }), this._disabledInputs[this._disabledInputs.length] = e
        }
    }, _isDisabledDatepicker: function (e) {
        if (!e)return!1;
        for (var t = 0; this._disabledInputs.length > t; t++)if (this._disabledInputs[t] == e)return!0;
        return!1
    }, _getInst: function (e) {
        try {
            return $.data(e, PROP_NAME)
        } catch (t) {
            throw"Missing instance data for this datepicker"
        }
    }, _optionDatepicker: function (e, t, i) {
        var a = this._getInst(e);
        if (2 == arguments.length && "string" == typeof t)return"defaults" == t ? $.extend({}, $.datepicker._defaults) : a ? "all" == t ? $.extend({}, a.settings) : this._get(a, t) : null;
        var s = t || {};
        if ("string" == typeof t && (s = {}, s[t] = i), a) {
            this._curInst == a && this._hideDatepicker();
            var n = this._getDateDatepicker(e, !0), r = this._getMinMaxDate(a, "min"), o = this._getMinMaxDate(a, "max");
            extendRemove(a.settings, s), null !== r && s.dateFormat !== undefined && s.minDate === undefined && (a.settings.minDate = this._formatDate(a, r)), null !== o && s.dateFormat !== undefined && s.maxDate === undefined && (a.settings.maxDate = this._formatDate(a, o)), this._attachments($(e), a), this._autoSize(a), this._setDate(a, n), this._updateAlternate(a), this._updateDatepicker(a)
        }
    }, _changeDatepicker: function (e, t, i) {
        this._optionDatepicker(e, t, i)
    }, _refreshDatepicker: function (e) {
        var t = this._getInst(e);
        t && this._updateDatepicker(t)
    }, _setDateDatepicker: function (e, t) {
        var i = this._getInst(e);
        i && (this._setDate(i, t), this._updateDatepicker(i), this._updateAlternate(i))
    }, _getDateDatepicker: function (e, t) {
        var i = this._getInst(e);
        return i && !i.inline && this._setDateFromField(i, t), i ? this._getDate(i) : null
    }, _doKeyDown: function (e) {
        var t = $.datepicker._getInst(e.target), i = !0, a = t.dpDiv.is(".ui-datepicker-rtl");
        if (t._keyEvent = !0, $.datepicker._datepickerShowing)switch (e.keyCode) {
            case 9:
                $.datepicker._hideDatepicker(), i = !1;
                break;
            case 13:
                var s = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", t.dpDiv);
                s[0] && $.datepicker._selectDay(e.target, t.selectedMonth, t.selectedYear, s[0]);
                var n = $.datepicker._get(t, "onSelect");
                if (n) {
                    var r = $.datepicker._formatDate(t);
                    n.apply(t.input ? t.input[0] : null, [r, t])
                } else $.datepicker._hideDatepicker();
                return!1;
            case 27:
                $.datepicker._hideDatepicker();
                break;
            case 33:
                $.datepicker._adjustDate(e.target, e.ctrlKey ? -$.datepicker._get(t, "stepBigMonths") : -$.datepicker._get(t, "stepMonths"), "M");
                break;
            case 34:
                $.datepicker._adjustDate(e.target, e.ctrlKey ? +$.datepicker._get(t, "stepBigMonths") : +$.datepicker._get(t, "stepMonths"), "M");
                break;
            case 35:
                (e.ctrlKey || e.metaKey) && $.datepicker._clearDate(e.target), i = e.ctrlKey || e.metaKey;
                break;
            case 36:
                (e.ctrlKey || e.metaKey) && $.datepicker._gotoToday(e.target), i = e.ctrlKey || e.metaKey;
                break;
            case 37:
                (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, a ? 1 : -1, "D"), i = e.ctrlKey || e.metaKey, e.originalEvent.altKey && $.datepicker._adjustDate(e.target, e.ctrlKey ? -$.datepicker._get(t, "stepBigMonths") : -$.datepicker._get(t, "stepMonths"), "M");
                break;
            case 38:
                (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, -7, "D"), i = e.ctrlKey || e.metaKey;
                break;
            case 39:
                (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, a ? -1 : 1, "D"), i = e.ctrlKey || e.metaKey, e.originalEvent.altKey && $.datepicker._adjustDate(e.target, e.ctrlKey ? +$.datepicker._get(t, "stepBigMonths") : +$.datepicker._get(t, "stepMonths"), "M");
                break;
            case 40:
                (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, 7, "D"), i = e.ctrlKey || e.metaKey;
                break;
            default:
                i = !1
        } else 36 == e.keyCode && e.ctrlKey ? $.datepicker._showDatepicker(this) : i = !1;
        i && (e.preventDefault(), e.stopPropagation())
    }, _doKeyPress: function (e) {
        var t = $.datepicker._getInst(e.target);
        if ($.datepicker._get(t, "constrainInput")) {
            var i = $.datepicker._possibleChars($.datepicker._get(t, "dateFormat")), a = String.fromCharCode(e.charCode == undefined ? e.keyCode : e.charCode);
            return e.ctrlKey || e.metaKey || " " > a || !i || i.indexOf(a) > -1
        }
    }, _doKeyUp: function (e) {
        var t = $.datepicker._getInst(e.target);
        if (t.input.val() != t.lastVal)try {
            var i = $.datepicker.parseDate($.datepicker._get(t, "dateFormat"), t.input ? t.input.val() : null, $.datepicker._getFormatConfig(t));
            i && ($.datepicker._setDateFromField(t), $.datepicker._updateAlternate(t), $.datepicker._updateDatepicker(t))
        } catch (a) {
            $.datepicker.log(a)
        }
        return!0
    }, _showDatepicker: function (e) {
        if (e = e.target || e, "input" != e.nodeName.toLowerCase() && (e = $("input", e.parentNode)[0]), !$.datepicker._isDisabledDatepicker(e) && $.datepicker._lastInput != e) {
            var t = $.datepicker._getInst(e);
            $.datepicker._curInst && $.datepicker._curInst != t && ($.datepicker._curInst.dpDiv.stop(!0, !0), t && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0]));
            var i = $.datepicker._get(t, "beforeShow"), a = i ? i.apply(e, [e, t]) : {};
            if (a !== !1) {
                extendRemove(t.settings, a), t.lastVal = null, $.datepicker._lastInput = e, $.datepicker._setDateFromField(t), $.datepicker._inDialog && (e.value = ""), $.datepicker._pos || ($.datepicker._pos = $.datepicker._findPos(e), $.datepicker._pos[1] += e.offsetHeight);
                var s = !1;
                $(e).parents().each(function () {
                    return s |= "fixed" == $(this).css("position"), !s
                });
                var n = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
                if ($.datepicker._pos = null, t.dpDiv.empty(), t.dpDiv.css({position: "absolute", display: "block", top: "-1000px"}), $.datepicker._updateDatepicker(t), n = $.datepicker._checkOffset(t, n, s), t.dpDiv.css({position: $.datepicker._inDialog && $.blockUI ? "static" : s ? "fixed" : "absolute", display: "none", left: n.left + "px", top: n.top + "px"}), !t.inline) {
                    var r = $.datepicker._get(t, "showAnim"), o = $.datepicker._get(t, "duration"), h = function () {
                        var e = t.dpDiv.find("iframe.ui-datepicker-cover");
                        if (e.length) {
                            var i = $.datepicker._getBorders(t.dpDiv);
                            e.css({left: -i[0], top: -i[1], width: t.dpDiv.outerWidth(), height: t.dpDiv.outerHeight()})
                        }
                    };
                    t.dpDiv.zIndex($(e).zIndex() + 1), $.datepicker._datepickerShowing = !0, $.effects && ($.effects.effect[r] || $.effects[r]) ? t.dpDiv.show(r, $.datepicker._get(t, "showOptions"), o, h) : t.dpDiv[r || "show"](r ? o : null, h), r && o || h(), t.input.is(":visible") && !t.input.is(":disabled") && t.input.focus(), $.datepicker._curInst = t
                }
            }
        }
    }, _updateDatepicker: function (e) {
        this.maxRows = 4;
        var t = $.datepicker._getBorders(e.dpDiv);
        instActive = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e);
        var i = e.dpDiv.find("iframe.ui-datepicker-cover");
        i.length && i.css({left: -t[0], top: -t[1], width: e.dpDiv.outerWidth(), height: e.dpDiv.outerHeight()}), e.dpDiv.find("." + this._dayOverClass + " a").mouseover();
        var a = this._getNumberOfMonths(e), s = a[1], n = 17;
        if (e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), s > 1 && e.dpDiv.addClass("ui-datepicker-multi-" + s).css("width", n * s + "em"), e.dpDiv[(1 != a[0] || 1 != a[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), e.dpDiv[(this._get(e, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), e == $.datepicker._curInst && $.datepicker._datepickerShowing && e.input && e.input.is(":visible") && !e.input.is(":disabled") && e.input[0] != document.activeElement && e.input.focus(), e.yearshtml) {
            var r = e.yearshtml;
            setTimeout(function () {
                r === e.yearshtml && e.yearshtml && e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml), r = e.yearshtml = null
            }, 0)
        }
    }, _getBorders: function (e) {
        var t = function (e) {
            return{thin: 1, medium: 2, thick: 3}[e] || e
        };
        return[parseFloat(t(e.css("border-left-width"))), parseFloat(t(e.css("border-top-width")))]
    }, _checkOffset: function (e, t, i) {
        var a = e.dpDiv.outerWidth(), s = e.dpDiv.outerHeight(), n = e.input ? e.input.outerWidth() : 0, r = e.input ? e.input.outerHeight() : 0, o = document.documentElement.clientWidth + (i ? 0 : $(document).scrollLeft()), h = document.documentElement.clientHeight + (i ? 0 : $(document).scrollTop());
        return t.left -= this._get(e, "isRTL") ? a - n : 0, t.left -= i && t.left == e.input.offset().left ? $(document).scrollLeft() : 0, t.top -= i && t.top == e.input.offset().top + r ? $(document).scrollTop() : 0, t.left -= Math.min(t.left, t.left + a > o && o > a ? Math.abs(t.left + a - o) : 0), t.top -= Math.min(t.top, t.top + s > h && h > s ? Math.abs(s + r) : 0), t
    }, _findPos: function (e) {
        for (var t = this._getInst(e), i = this._get(t, "isRTL"); e && ("hidden" == e.type || 1 != e.nodeType || $.expr.filters.hidden(e));)e = e[i ? "previousSibling" : "nextSibling"];
        var a = $(e).offset();
        return[a.left, a.top]
    }, _hideDatepicker: function (e) {
        var t = this._curInst;
        if (t && (!e || t == $.data(e, PROP_NAME)) && this._datepickerShowing) {
            var i = this._get(t, "showAnim"), a = this._get(t, "duration"), s = function () {
                $.datepicker._tidyDialog(t)
            };
            $.effects && ($.effects.effect[i] || $.effects[i]) ? t.dpDiv.hide(i, $.datepicker._get(t, "showOptions"), a, s) : t.dpDiv["slideDown" == i ? "slideUp" : "fadeIn" == i ? "fadeOut" : "hide"](i ? a : null, s), i || s(), this._datepickerShowing = !1;
            var n = this._get(t, "onClose");
            n && n.apply(t.input ? t.input[0] : null, [t.input ? t.input.val() : "", t]), this._lastInput = null, this._inDialog && (this._dialogInput.css({position: "absolute", left: "0", top: "-100px"}), $.blockUI && ($.unblockUI(), $("body").append(this.dpDiv))), this._inDialog = !1
        }
    }, _tidyDialog: function (e) {
        e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
    }, _checkExternalClick: function (e) {
        if ($.datepicker._curInst) {
            var t = $(e.target), i = $.datepicker._getInst(t[0]);
            (t[0].id != $.datepicker._mainDivId && 0 == t.parents("#" + $.datepicker._mainDivId).length && !t.hasClass($.datepicker.markerClassName) && !t.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || t.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != i) && $.datepicker._hideDatepicker()
        }
    }, _adjustDate: function (e, t, i) {
        var a = $(e), s = this._getInst(a[0]);
        this._isDisabledDatepicker(a[0]) || (this._adjustInstDate(s, t + ("M" == i ? this._get(s, "showCurrentAtPos") : 0), i), this._updateDatepicker(s))
    }, _gotoToday: function (e) {
        var t = $(e), i = this._getInst(t[0]);
        if (this._get(i, "gotoCurrent") && i.currentDay)i.selectedDay = i.currentDay, i.drawMonth = i.selectedMonth = i.currentMonth, i.drawYear = i.selectedYear = i.currentYear; else {
            var a = new Date;
            i.selectedDay = a.getDate(), i.drawMonth = i.selectedMonth = a.getMonth(), i.drawYear = i.selectedYear = a.getFullYear()
        }
        this._notifyChange(i), this._adjustDate(t)
    }, _selectMonthYear: function (e, t, i) {
        var a = $(e), s = this._getInst(a[0]);
        s["selected" + ("M" == i ? "Month" : "Year")] = s["draw" + ("M" == i ? "Month" : "Year")] = parseInt(t.options[t.selectedIndex].value, 10), this._notifyChange(s), this._adjustDate(a)
    }, _selectDay: function (e, t, i, a) {
        var s = $(e);
        if (!$(a).hasClass(this._unselectableClass) && !this._isDisabledDatepicker(s[0])) {
            var n = this._getInst(s[0]);
            n.selectedDay = n.currentDay = $("a", a).html(), n.selectedMonth = n.currentMonth = t, n.selectedYear = n.currentYear = i, this._selectDate(e, this._formatDate(n, n.currentDay, n.currentMonth, n.currentYear))
        }
    }, _clearDate: function (e) {
        var t = $(e);
        this._getInst(t[0]), this._selectDate(t, "")
    }, _selectDate: function (e, t) {
        var i = $(e), a = this._getInst(i[0]);
        t = null != t ? t : this._formatDate(a), a.input && a.input.val(t), this._updateAlternate(a);
        var s = this._get(a, "onSelect");
        s ? s.apply(a.input ? a.input[0] : null, [t, a]) : a.input && a.input.trigger("change"), a.inline ? this._updateDatepicker(a) : (this._hideDatepicker(), this._lastInput = a.input[0], "object" != typeof a.input[0] && a.input.focus(), this._lastInput = null)
    }, _updateAlternate: function (e) {
        var t = this._get(e, "altField");
        if (t) {
            var i = this._get(e, "altFormat") || this._get(e, "dateFormat"), a = this._getDate(e), s = this.formatDate(i, a, this._getFormatConfig(e));
            $(t).each(function () {
                $(this).val(s)
            })
        }
    }, noWeekends: function (e) {
        var t = e.getDay();
        return[t > 0 && 6 > t, ""]
    }, iso8601Week: function (e) {
        var t = new Date(e.getTime());
        t.setDate(t.getDate() + 4 - (t.getDay() || 7));
        var i = t.getTime();
        return t.setMonth(0), t.setDate(1), Math.floor(Math.round((i - t) / 864e5) / 7) + 1
    }, parseDate: function (e, t, i) {
        if (null == e || null == t)throw"Invalid arguments";
        if (t = "object" == typeof t ? "" + t : t + "", "" == t)return null;
        var a = (i ? i.shortYearCutoff : null) || this._defaults.shortYearCutoff;
        a = "string" != typeof a ? a : (new Date).getFullYear() % 100 + parseInt(a, 10);
        for (var s = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, n = (i ? i.dayNames : null) || this._defaults.dayNames, r = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, o = (i ? i.monthNames : null) || this._defaults.monthNames, h = -1, l = -1, u = -1, d = -1, c = !1, p = function (t) {
            var i = e.length > y + 1 && e.charAt(y + 1) == t;
            return i && y++, i
        }, m = function (e) {
            var i = p(e), a = "@" == e ? 14 : "!" == e ? 20 : "y" == e && i ? 4 : "o" == e ? 3 : 2, s = RegExp("^\\d{1," + a + "}"), n = t.substring(v).match(s);
            if (!n)throw"Missing number at position " + v;
            return v += n[0].length, parseInt(n[0], 10)
        }, f = function (e, i, a) {
            var s = $.map(p(e) ? a : i,function (e, t) {
                return[
                    [t, e]
                ]
            }).sort(function (e, t) {
                    return-(e[1].length - t[1].length)
                }), n = -1;
            if ($.each(s, function (e, i) {
                var a = i[1];
                return t.substr(v, a.length).toLowerCase() == a.toLowerCase() ? (n = i[0], v += a.length, !1) : undefined
            }), -1 != n)return n + 1;
            throw"Unknown name at position " + v
        }, g = function () {
            if (t.charAt(v) != e.charAt(y))throw"Unexpected literal at position " + v;
            v++
        }, v = 0, y = 0; e.length > y; y++)if (c)"'" != e.charAt(y) || p("'") ? g() : c = !1; else switch (e.charAt(y)) {
            case"d":
                u = m("d");
                break;
            case"D":
                f("D", s, n);
                break;
            case"o":
                d = m("o");
                break;
            case"m":
                l = m("m");
                break;
            case"M":
                l = f("M", r, o);
                break;
            case"y":
                h = m("y");
                break;
            case"@":
                var b = new Date(m("@"));
                h = b.getFullYear(), l = b.getMonth() + 1, u = b.getDate();
                break;
            case"!":
                var b = new Date((m("!") - this._ticksTo1970) / 1e4);
                h = b.getFullYear(), l = b.getMonth() + 1, u = b.getDate();
                break;
            case"'":
                p("'") ? g() : c = !0;
                break;
            default:
                g()
        }
        if (t.length > v) {
            var _ = t.substr(v);
            if (!/^\s+/.test(_))throw"Extra/unparsed characters found in date: " + _
        }
        if (-1 == h ? h = (new Date).getFullYear() : 100 > h && (h += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (a >= h ? 0 : -100)), d > -1)for (l = 1, u = d; ;) {
            var k = this._getDaysInMonth(h, l - 1);
            if (k >= u)break;
            l++, u -= k
        }
        var b = this._daylightSavingAdjust(new Date(h, l - 1, u));
        if (b.getFullYear() != h || b.getMonth() + 1 != l || b.getDate() != u)throw"Invalid date";
        return b
    }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)), formatDate: function (e, t, i) {
        if (!t)return"";
        var a = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, s = (i ? i.dayNames : null) || this._defaults.dayNames, n = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, r = (i ? i.monthNames : null) || this._defaults.monthNames, o = function (t) {
            var i = e.length > c + 1 && e.charAt(c + 1) == t;
            return i && c++, i
        }, h = function (e, t, i) {
            var a = "" + t;
            if (o(e))for (; i > a.length;)a = "0" + a;
            return a
        }, l = function (e, t, i, a) {
            return o(e) ? a[t] : i[t]
        }, u = "", d = !1;
        if (t)for (var c = 0; e.length > c; c++)if (d)"'" != e.charAt(c) || o("'") ? u += e.charAt(c) : d = !1; else switch (e.charAt(c)) {
            case"d":
                u += h("d", t.getDate(), 2);
                break;
            case"D":
                u += l("D", t.getDay(), a, s);
                break;
            case"o":
                u += h("o", Math.round((new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() - new Date(t.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                break;
            case"m":
                u += h("m", t.getMonth() + 1, 2);
                break;
            case"M":
                u += l("M", t.getMonth(), n, r);
                break;
            case"y":
                u += o("y") ? t.getFullYear() : (10 > t.getYear() % 100 ? "0" : "") + t.getYear() % 100;
                break;
            case"@":
                u += t.getTime();
                break;
            case"!":
                u += 1e4 * t.getTime() + this._ticksTo1970;
                break;
            case"'":
                o("'") ? u += "'" : d = !0;
                break;
            default:
                u += e.charAt(c)
        }
        return u
    }, _possibleChars: function (e) {
        for (var t = "", i = !1, a = function (t) {
            var i = e.length > s + 1 && e.charAt(s + 1) == t;
            return i && s++, i
        }, s = 0; e.length > s; s++)if (i)"'" != e.charAt(s) || a("'") ? t += e.charAt(s) : i = !1; else switch (e.charAt(s)) {
            case"d":
            case"m":
            case"y":
            case"@":
                t += "0123456789";
                break;
            case"D":
            case"M":
                return null;
            case"'":
                a("'") ? t += "'" : i = !0;
                break;
            default:
                t += e.charAt(s)
        }
        return t
    }, _get: function (e, t) {
        return e.settings[t] !== undefined ? e.settings[t] : this._defaults[t]
    }, _setDateFromField: function (e, t) {
        if (e.input.val() != e.lastVal) {
            var i, a, s = this._get(e, "dateFormat"), n = e.lastVal = e.input ? e.input.val() : null;
            i = a = this._getDefaultDate(e);
            var r = this._getFormatConfig(e);
            try {
                i = this.parseDate(s, n, r) || a
            } catch (o) {
                this.log(o), n = t ? "" : n
            }
            e.selectedDay = i.getDate(), e.drawMonth = e.selectedMonth = i.getMonth(), e.drawYear = e.selectedYear = i.getFullYear(), e.currentDay = n ? i.getDate() : 0, e.currentMonth = n ? i.getMonth() : 0, e.currentYear = n ? i.getFullYear() : 0, this._adjustInstDate(e)
        }
    }, _getDefaultDate: function (e) {
        return this._restrictMinMax(e, this._determineDate(e, this._get(e, "defaultDate"), new Date))
    }, _determineDate: function (e, t, i) {
        var a = function (e) {
            var t = new Date;
            return t.setDate(t.getDate() + e), t
        }, s = function (t) {
            try {
                return $.datepicker.parseDate($.datepicker._get(e, "dateFormat"), t, $.datepicker._getFormatConfig(e))
            } catch (i) {
            }
            for (var a = (t.toLowerCase().match(/^c/) ? $.datepicker._getDate(e) : null) || new Date, s = a.getFullYear(), n = a.getMonth(), r = a.getDate(), o = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, h = o.exec(t); h;) {
                switch (h[2] || "d") {
                    case"d":
                    case"D":
                        r += parseInt(h[1], 10);
                        break;
                    case"w":
                    case"W":
                        r += 7 * parseInt(h[1], 10);
                        break;
                    case"m":
                    case"M":
                        n += parseInt(h[1], 10), r = Math.min(r, $.datepicker._getDaysInMonth(s, n));
                        break;
                    case"y":
                    case"Y":
                        s += parseInt(h[1], 10), r = Math.min(r, $.datepicker._getDaysInMonth(s, n))
                }
                h = o.exec(t)
            }
            return new Date(s, n, r)
        }, n = null == t || "" === t ? i : "string" == typeof t ? s(t) : "number" == typeof t ? isNaN(t) ? i : a(t) : new Date(t.getTime());
        return n = n && "Invalid Date" == "" + n ? i : n, n && (n.setHours(0), n.setMinutes(0), n.setSeconds(0), n.setMilliseconds(0)), this._daylightSavingAdjust(n)
    }, _daylightSavingAdjust: function (e) {
        return e ? (e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0), e) : null
    }, _setDate: function (e, t, i) {
        var a = !t, s = e.selectedMonth, n = e.selectedYear, r = this._restrictMinMax(e, this._determineDate(e, t, new Date));
        e.selectedDay = e.currentDay = r.getDate(), e.drawMonth = e.selectedMonth = e.currentMonth = r.getMonth(), e.drawYear = e.selectedYear = e.currentYear = r.getFullYear(), s == e.selectedMonth && n == e.selectedYear || i || this._notifyChange(e), this._adjustInstDate(e), e.input && e.input.val(a ? "" : this._formatDate(e))
    }, _getDate: function (e) {
        var t = !e.currentYear || e.input && "" == e.input.val() ? null : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay));
        return t
    }, _attachHandlers: function (e) {
        var t = this._get(e, "stepMonths"), i = "#" + e.id.replace(/\\\\/g, "\\");
        e.dpDiv.find("[data-handler]").map(function () {
            var e = {prev: function () {
                window["DP_jQuery_" + dpuuid].datepicker._adjustDate(i, -t, "M")
            }, next: function () {
                window["DP_jQuery_" + dpuuid].datepicker._adjustDate(i, +t, "M")
            }, hide: function () {
                window["DP_jQuery_" + dpuuid].datepicker._hideDatepicker()
            }, today: function () {
                window["DP_jQuery_" + dpuuid].datepicker._gotoToday(i)
            }, selectDay: function () {
                return window["DP_jQuery_" + dpuuid].datepicker._selectDay(i, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1
            }, selectMonth: function () {
                return window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(i, this, "M"), !1
            }, selectYear: function () {
                return window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(i, this, "Y"), !1
            }};
            $(this).bind(this.getAttribute("data-event"), e[this.getAttribute("data-handler")])
        })
    }, _generateHTML: function (e) {
        var t = new Date;
        t = this._daylightSavingAdjust(new Date(t.getFullYear(), t.getMonth(), t.getDate()));
        var i = this._get(e, "isRTL"), a = this._get(e, "showButtonPanel"), s = this._get(e, "hideIfNoPrevNext"), n = this._get(e, "navigationAsDateFormat"), r = this._getNumberOfMonths(e), o = this._get(e, "showCurrentAtPos"), h = this._get(e, "stepMonths"), l = 1 != r[0] || 1 != r[1], u = this._daylightSavingAdjust(e.currentDay ? new Date(e.currentYear, e.currentMonth, e.currentDay) : new Date(9999, 9, 9)), d = this._getMinMaxDate(e, "min"), c = this._getMinMaxDate(e, "max"), p = e.drawMonth - o, m = e.drawYear;
        if (0 > p && (p += 12, m--), c) {
            var f = this._daylightSavingAdjust(new Date(c.getFullYear(), c.getMonth() - r[0] * r[1] + 1, c.getDate()));
            for (f = d && d > f ? d : f; this._daylightSavingAdjust(new Date(m, p, 1)) > f;)p--, 0 > p && (p = 11, m--)
        }
        e.drawMonth = p, e.drawYear = m;
        var g = this._get(e, "prevText");
        g = n ? this.formatDate(g, this._daylightSavingAdjust(new Date(m, p - h, 1)), this._getFormatConfig(e)) : g;
        var v = this._canAdjustMonth(e, -1, m, p) ? '<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="' + g + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? "e" : "w") + '">' + g + "</span></a>" : s ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + g + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? "e" : "w") + '">' + g + "</span></a>", y = this._get(e, "nextText");
        y = n ? this.formatDate(y, this._daylightSavingAdjust(new Date(m, p + h, 1)), this._getFormatConfig(e)) : y;
        var b = this._canAdjustMonth(e, 1, m, p) ? '<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="' + y + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? "w" : "e") + '">' + y + "</span></a>" : s ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + y + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? "w" : "e") + '">' + y + "</span></a>", _ = this._get(e, "currentText"), k = this._get(e, "gotoCurrent") && e.currentDay ? u : t;
        _ = n ? this.formatDate(_, k, this._getFormatConfig(e)) : _;
        var x = e.inline ? "" : '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' + this._get(e, "closeText") + "</button>", D = a ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (i ? x : "") + (this._isInRange(e, k) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click">' + _ + "</button>" : "") + (i ? "" : x) + "</div>" : "", w = parseInt(this._get(e, "firstDay"), 10);
        w = isNaN(w) ? 0 : w;
        var T = this._get(e, "showWeek"), S = this._get(e, "dayNames");
        this._get(e, "dayNamesShort");
        var M = this._get(e, "dayNamesMin"), N = this._get(e, "monthNames"), C = this._get(e, "monthNamesShort"), A = this._get(e, "beforeShowDay"), P = this._get(e, "showOtherMonths"), I = this._get(e, "selectOtherMonths");
        this._get(e, "calculateWeek") || this.iso8601Week;
        for (var F = this._getDefaultDate(e), j = "", H = 0; r[0] > H; H++) {
            var E = "";
            this.maxRows = 4;
            for (var z = 0; r[1] > z; z++) {
                var L = this._daylightSavingAdjust(new Date(m, p, e.selectedDay)), O = " ui-corner-all", R = "";
                if (l) {
                    if (R += '<div class="ui-datepicker-group', r[1] > 1)switch (z) {
                        case 0:
                            R += " ui-datepicker-group-first", O = " ui-corner-" + (i ? "right" : "left");
                            break;
                        case r[1] - 1:
                            R += " ui-datepicker-group-last", O = " ui-corner-" + (i ? "left" : "right");
                            break;
                        default:
                            R += " ui-datepicker-group-middle", O = ""
                    }
                    R += '">'
                }
                R += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + O + '">' + (/all|left/.test(O) && 0 == H ? i ? b : v : "") + (/all|right/.test(O) && 0 == H ? i ? v : b : "") + this._generateMonthYearHeader(e, p, m, d, c, H > 0 || z > 0, N, C) + '</div><table class="ui-datepicker-calendar"><thead>' + "<tr>";
                for (var W = T ? '<th class="ui-datepicker-week-col">' + this._get(e, "weekHeader") + "</th>" : "", Y = 0; 7 > Y; Y++) {
                    var J = (Y + w) % 7;
                    W += "<th" + ((Y + w + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + ">" + '<span title="' + S[J] + '">' + M[J] + "</span></th>"
                }
                R += W + "</tr></thead><tbody>";
                var Q = this._getDaysInMonth(m, p);
                m == e.selectedYear && p == e.selectedMonth && (e.selectedDay = Math.min(e.selectedDay, Q));
                var B = (this._getFirstDayOfMonth(m, p) - w + 7) % 7, K = Math.ceil((B + Q) / 7), V = l ? this.maxRows > K ? this.maxRows : K : K;
                this.maxRows = V;
                for (var U = this._daylightSavingAdjust(new Date(m, p, 1 - B)), G = 0; V > G; G++) {
                    R += "<tr>";
                    for (var q = T ? '<td class="ui-datepicker-week-col">' + this._get(e, "calculateWeek")(U) + "</td>" : "", Y = 0; 7 > Y; Y++) {
                        var X = A ? A.apply(e.input ? e.input[0] : null, [U]) : [!0, ""], Z = U.getMonth() != p, et = Z && !I || !X[0] || d && d > U || c && U > c;
                        q += '<td class="' + ((Y + w + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (Z ? " ui-datepicker-other-month" : "") + (U.getTime() == L.getTime() && p == e.selectedMonth && e._keyEvent || F.getTime() == U.getTime() && F.getTime() == L.getTime() ? " " + this._dayOverClass : "") + (et ? " " + this._unselectableClass + " ui-state-disabled" : "") + (Z && !P ? "" : " " + X[1] + (U.getTime() == u.getTime() ? " " + this._currentClass : "") + (U.getTime() == t.getTime() ? " ui-datepicker-today" : "")) + '"' + (Z && !P || !X[2] ? "" : ' title="' + X[2] + '"') + (et ? "" : ' data-handler="selectDay" data-event="click" data-month="' + U.getMonth() + '" data-year="' + U.getFullYear() + '"') + ">" + (Z && !P ? "&#xa0;" : et ? '<span class="ui-state-default">' + U.getDate() + "</span>" : '<a class="ui-state-default' + (U.getTime() == t.getTime() ? " ui-state-highlight" : "") + (U.getTime() == u.getTime() ? " ui-state-active" : "") + (Z ? " ui-priority-secondary" : "") + '" href="#">' + U.getDate() + "</a>") + "</td>", U.setDate(U.getDate() + 1), U = this._daylightSavingAdjust(U)
                    }
                    R += q + "</tr>"
                }
                p++, p > 11 && (p = 0, m++), R += "</tbody></table>" + (l ? "</div>" + (r[0] > 0 && z == r[1] - 1 ? '<div class="ui-datepicker-row-break"></div>' : "") : ""), E += R
            }
            j += E
        }
        return j += D + ($.ui.ie6 && !e.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : ""), e._keyEvent = !1, j
    }, _generateMonthYearHeader: function (e, t, i, a, s, n, r, o) {
        var h = this._get(e, "changeMonth"), l = this._get(e, "changeYear"), u = this._get(e, "showMonthAfterYear"), d = '<div class="ui-datepicker-title">', c = "";
        if (n || !h)c += '<span class="ui-datepicker-month">' + r[t] + "</span>"; else {
            var p = a && a.getFullYear() == i, m = s && s.getFullYear() == i;
            c += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
            for (var f = 0; 12 > f; f++)(!p || f >= a.getMonth()) && (!m || s.getMonth() >= f) && (c += '<option value="' + f + '"' + (f == t ? ' selected="selected"' : "") + ">" + o[f] + "</option>");
            c += "</select>"
        }
        if (u || (d += c + (!n && h && l ? "" : "&#xa0;")), !e.yearshtml)if (e.yearshtml = "", n || !l)d += '<span class="ui-datepicker-year">' + i + "</span>"; else {
            var g = this._get(e, "yearRange").split(":"), v = (new Date).getFullYear(), y = function (e) {
                var t = e.match(/c[+-].*/) ? i + parseInt(e.substring(1), 10) : e.match(/[+-].*/) ? v + parseInt(e, 10) : parseInt(e, 10);
                return isNaN(t) ? v : t
            }, b = y(g[0]), _ = Math.max(b, y(g[1] || ""));
            for (b = a ? Math.max(b, a.getFullYear()) : b, _ = s ? Math.min(_, s.getFullYear()) : _, e.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">'; _ >= b; b++)e.yearshtml += '<option value="' + b + '"' + (b == i ? ' selected="selected"' : "") + ">" + b + "</option>";
            e.yearshtml += "</select>", d += e.yearshtml, e.yearshtml = null
        }
        return d += this._get(e, "yearSuffix"), u && (d += (!n && h && l ? "" : "&#xa0;") + c), d += "</div>"
    }, _adjustInstDate: function (e, t, i) {
        var a = e.drawYear + ("Y" == i ? t : 0), s = e.drawMonth + ("M" == i ? t : 0), n = Math.min(e.selectedDay, this._getDaysInMonth(a, s)) + ("D" == i ? t : 0), r = this._restrictMinMax(e, this._daylightSavingAdjust(new Date(a, s, n)));
        e.selectedDay = r.getDate(), e.drawMonth = e.selectedMonth = r.getMonth(), e.drawYear = e.selectedYear = r.getFullYear(), ("M" == i || "Y" == i) && this._notifyChange(e)
    }, _restrictMinMax: function (e, t) {
        var i = this._getMinMaxDate(e, "min"), a = this._getMinMaxDate(e, "max"), s = i && i > t ? i : t;
        return s = a && s > a ? a : s
    }, _notifyChange: function (e) {
        var t = this._get(e, "onChangeMonthYear");
        t && t.apply(e.input ? e.input[0] : null, [e.selectedYear, e.selectedMonth + 1, e])
    }, _getNumberOfMonths: function (e) {
        var t = this._get(e, "numberOfMonths");
        return null == t ? [1, 1] : "number" == typeof t ? [1, t] : t
    }, _getMinMaxDate: function (e, t) {
        return this._determineDate(e, this._get(e, t + "Date"), null)
    }, _getDaysInMonth: function (e, t) {
        return 32 - this._daylightSavingAdjust(new Date(e, t, 32)).getDate()
    }, _getFirstDayOfMonth: function (e, t) {
        return new Date(e, t, 1).getDay()
    }, _canAdjustMonth: function (e, t, i, a) {
        var s = this._getNumberOfMonths(e), n = this._daylightSavingAdjust(new Date(i, a + (0 > t ? t : s[0] * s[1]), 1));
        return 0 > t && n.setDate(this._getDaysInMonth(n.getFullYear(), n.getMonth())), this._isInRange(e, n)
    }, _isInRange: function (e, t) {
        var i = this._getMinMaxDate(e, "min"), a = this._getMinMaxDate(e, "max");
        return(!i || t.getTime() >= i.getTime()) && (!a || t.getTime() <= a.getTime())
    }, _getFormatConfig: function (e) {
        var t = this._get(e, "shortYearCutoff");
        return t = "string" != typeof t ? t : (new Date).getFullYear() % 100 + parseInt(t, 10), {shortYearCutoff: t, dayNamesShort: this._get(e, "dayNamesShort"), dayNames: this._get(e, "dayNames"), monthNamesShort: this._get(e, "monthNamesShort"), monthNames: this._get(e, "monthNames")}
    }, _formatDate: function (e, t, i, a) {
        t || (e.currentDay = e.selectedDay, e.currentMonth = e.selectedMonth, e.currentYear = e.selectedYear);
        var s = t ? "object" == typeof t ? t : this._daylightSavingAdjust(new Date(a, i, t)) : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay));
        return this.formatDate(this._get(e, "dateFormat"), s, this._getFormatConfig(e))
    }}), $.fn.datepicker = function (e) {
        if (!this.length)return this;
        $.datepicker.initialized || ($(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv), $.datepicker.initialized = !0);
        var t = Array.prototype.slice.call(arguments, 1);
        return"string" != typeof e || "isDisabled" != e && "getDate" != e && "widget" != e ? "option" == e && 2 == arguments.length && "string" == typeof arguments[1] ? $.datepicker["_" + e + "Datepicker"].apply($.datepicker, [this[0]].concat(t)) : this.each(function () {
            "string" == typeof e ? $.datepicker["_" + e + "Datepicker"].apply($.datepicker, [this].concat(t)) : $.datepicker._attachDatepicker(this, e)
        }) : $.datepicker["_" + e + "Datepicker"].apply($.datepicker, [this[0]].concat(t))
    }, $.datepicker = new Datepicker, $.datepicker.initialized = !1, $.datepicker.uuid = (new Date).getTime(), $.datepicker.version = "1.9.2", window["DP_jQuery_" + dpuuid] = $
})(jQuery);
(function (e, t) {
    var i = "ui-dialog ui-widget ui-widget-content ui-corner-all ", a = {buttons: !0, height: !0, maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0, width: !0}, s = {maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0};
    e.widget("ui.dialog", {version: "1.9.2", options: {autoOpen: !0, buttons: {}, closeOnEscape: !0, closeText: "close", dialogClass: "", draggable: !0, hide: null, height: "auto", maxHeight: !1, maxWidth: !1, minHeight: 150, minWidth: 150, modal: !1, position: {my: "center", at: "center", of: window, collision: "fit", using: function (t) {
        var i = e(this).css(t).offset().top;
        0 > i && e(this).css("top", t.top - i)
    }}, resizable: !0, show: null, stack: !0, title: "", width: 300, zIndex: 1e3}, _create: function () {
        this.originalTitle = this.element.attr("title"), "string" != typeof this.originalTitle && (this.originalTitle = ""), this.oldPosition = {parent: this.element.parent(), index: this.element.parent().children().index(this.element)}, this.options.title = this.options.title || this.originalTitle;
        var a, s, n, r, o, h = this, l = this.options, u = l.title || "&#160;";
        a = (this.uiDialog = e("<div>")).addClass(i + l.dialogClass).css({display: "none", outline: 0, zIndex: l.zIndex}).attr("tabIndex", -1).keydown(function (t) {
            l.closeOnEscape && !t.isDefaultPrevented() && t.keyCode && t.keyCode === e.ui.keyCode.ESCAPE && (h.close(t), t.preventDefault())
        }).mousedown(function (e) {
                h.moveToTop(!1, e)
            }).appendTo("body"), this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(a), s = (this.uiDialogTitlebar = e("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  ui-corner-all  ui-helper-clearfix").bind("mousedown",function () {
            a.focus()
        }).prependTo(a), n = e("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role", "button").click(function (e) {
            e.preventDefault(), h.close(e)
        }).appendTo(s), (this.uiDialogTitlebarCloseText = e("<span>")).addClass("ui-icon ui-icon-closethick").text(l.closeText).appendTo(n), r = e("<span>").uniqueId().addClass("ui-dialog-title").html(u).prependTo(s), o = (this.uiDialogButtonPane = e("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), (this.uiButtonSet = e("<div>")).addClass("ui-dialog-buttonset").appendTo(o), a.attr({role: "dialog", "aria-labelledby": r.attr("id")}), s.find("*").add(s).disableSelection(), this._hoverable(n), this._focusable(n), l.draggable && e.fn.draggable && this._makeDraggable(), l.resizable && e.fn.resizable && this._makeResizable(), this._createButtons(l.buttons), this._isOpen = !1, e.fn.bgiframe && a.bgiframe(), this._on(a, {keydown: function (i) {
            if (l.modal && i.keyCode === e.ui.keyCode.TAB) {
                var s = e(":tabbable", a), n = s.filter(":first"), r = s.filter(":last");
                return i.target !== r[0] || i.shiftKey ? i.target === n[0] && i.shiftKey ? (r.focus(1), !1) : t : (n.focus(1), !1)
            }
        }})
    }, _init: function () {
        this.options.autoOpen && this.open()
    }, _destroy: function () {
        var e, t = this.oldPosition;
        this.overlay && this.overlay.destroy(), this.uiDialog.hide(), this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"), this.uiDialog.remove(), this.originalTitle && this.element.attr("title", this.originalTitle), e = t.parent.children().eq(t.index), e.length && e[0] !== this.element[0] ? e.before(this.element) : t.parent.append(this.element)
    }, widget: function () {
        return this.uiDialog
    }, close: function (t) {
        var i, a, s = this;
        if (this._isOpen && !1 !== this._trigger("beforeClose", t))return this._isOpen = !1, this.overlay && this.overlay.destroy(), this.options.hide ? this._hide(this.uiDialog, this.options.hide, function () {
            s._trigger("close", t)
        }) : (this.uiDialog.hide(), this._trigger("close", t)), e.ui.dialog.overlay.resize(), this.options.modal && (i = 0, e(".ui-dialog").each(function () {
            this !== s.uiDialog[0] && (a = e(this).css("z-index"), isNaN(a) || (i = Math.max(i, a)))
        }), e.ui.dialog.maxZ = i), this
    }, isOpen: function () {
        return this._isOpen
    }, moveToTop: function (t, i) {
        var a, s = this.options;
        return s.modal && !t || !s.stack && !s.modal ? this._trigger("focus", i) : (s.zIndex > e.ui.dialog.maxZ && (e.ui.dialog.maxZ = s.zIndex), this.overlay && (e.ui.dialog.maxZ += 1, e.ui.dialog.overlay.maxZ = e.ui.dialog.maxZ, this.overlay.$el.css("z-index", e.ui.dialog.overlay.maxZ)), a = {scrollTop: this.element.scrollTop(), scrollLeft: this.element.scrollLeft()}, e.ui.dialog.maxZ += 1, this.uiDialog.css("z-index", e.ui.dialog.maxZ), this.element.attr(a), this._trigger("focus", i), this)
    }, open: function () {
        if (!this._isOpen) {
            var t, i = this.options, a = this.uiDialog;
            return this._size(), this._position(i.position), a.show(i.show), this.overlay = i.modal ? new e.ui.dialog.overlay(this) : null, this.moveToTop(!0), t = this.element.find(":tabbable"), t.length || (t = this.uiDialogButtonPane.find(":tabbable"), t.length || (t = a)), t.eq(0).focus(), this._isOpen = !0, this._trigger("open"), this
        }
    }, _createButtons: function (t) {
        var i = this, a = !1;
        this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), "object" == typeof t && null !== t && e.each(t, function () {
            return!(a = !0)
        }), a ? (e.each(t, function (t, a) {
            var s, n;
            a = e.isFunction(a) ? {click: a, text: t} : a, a = e.extend({type: "button"}, a), n = a.click, a.click = function () {
                n.apply(i.element[0], arguments)
            }, s = e("<button></button>", a).appendTo(i.uiButtonSet), e.fn.button && s.button()
        }), this.uiDialog.addClass("ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog)) : this.uiDialog.removeClass("ui-dialog-buttons")
    }, _makeDraggable: function () {
        function t(e) {
            return{position: e.position, offset: e.offset}
        }

        var i = this, a = this.options;
        this.uiDialog.draggable({cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function (a, s) {
            e(this).addClass("ui-dialog-dragging"), i._trigger("dragStart", a, t(s))
        }, drag: function (e, a) {
            i._trigger("drag", e, t(a))
        }, stop: function (s, n) {
            a.position = [n.position.left - i.document.scrollLeft(), n.position.top - i.document.scrollTop()], e(this).removeClass("ui-dialog-dragging"), i._trigger("dragStop", s, t(n)), e.ui.dialog.overlay.resize()
        }})
    }, _makeResizable: function (i) {
        function a(e) {
            return{originalPosition: e.originalPosition, originalSize: e.originalSize, position: e.position, size: e.size}
        }

        i = i === t ? this.options.resizable : i;
        var s = this, n = this.options, r = this.uiDialog.css("position"), o = "string" == typeof i ? i : "n,e,s,w,se,sw,ne,nw";
        this.uiDialog.resizable({cancel: ".ui-dialog-content", containment: "document", alsoResize: this.element, maxWidth: n.maxWidth, maxHeight: n.maxHeight, minWidth: n.minWidth, minHeight: this._minHeight(), handles: o, start: function (t, i) {
            e(this).addClass("ui-dialog-resizing"), s._trigger("resizeStart", t, a(i))
        }, resize: function (e, t) {
            s._trigger("resize", e, a(t))
        }, stop: function (t, i) {
            e(this).removeClass("ui-dialog-resizing"), n.height = e(this).height(), n.width = e(this).width(), s._trigger("resizeStop", t, a(i)), e.ui.dialog.overlay.resize()
        }}).css("position", r).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
    }, _minHeight: function () {
        var e = this.options;
        return"auto" === e.height ? e.minHeight : Math.min(e.minHeight, e.height)
    }, _position: function (t) {
        var i, a = [], s = [0, 0];
        t ? (("string" == typeof t || "object" == typeof t && "0"in t) && (a = t.split ? t.split(" ") : [t[0], t[1]], 1 === a.length && (a[1] = a[0]), e.each(["left", "top"], function (e, t) {
            +a[e] === a[e] && (s[e] = a[e], a[e] = t)
        }), t = {my: a[0] + (0 > s[0] ? s[0] : "+" + s[0]) + " " + a[1] + (0 > s[1] ? s[1] : "+" + s[1]), at: a.join(" ")}), t = e.extend({}, e.ui.dialog.prototype.options.position, t)) : t = e.ui.dialog.prototype.options.position, i = this.uiDialog.is(":visible"), i || this.uiDialog.show(), this.uiDialog.position(t), i || this.uiDialog.hide()
    }, _setOptions: function (t) {
        var i = this, n = {}, r = !1;
        e.each(t, function (e, t) {
            i._setOption(e, t), e in a && (r = !0), e in s && (n[e] = t)
        }), r && this._size(), this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", n)
    }, _setOption: function (t, a) {
        var s, n, r = this.uiDialog;
        switch (t) {
            case"buttons":
                this._createButtons(a);
                break;
            case"closeText":
                this.uiDialogTitlebarCloseText.text("" + a);
                break;
            case"dialogClass":
                r.removeClass(this.options.dialogClass).addClass(i + a);
                break;
            case"disabled":
                a ? r.addClass("ui-dialog-disabled") : r.removeClass("ui-dialog-disabled");
                break;
            case"draggable":
                s = r.is(":data(draggable)"), s && !a && r.draggable("destroy"), !s && a && this._makeDraggable();
                break;
            case"position":
                this._position(a);
                break;
            case"resizable":
                n = r.is(":data(resizable)"), n && !a && r.resizable("destroy"), n && "string" == typeof a && r.resizable("option", "handles", a), n || a === !1 || this._makeResizable(a);
                break;
            case"title":
                e(".ui-dialog-title", this.uiDialogTitlebar).html("" + (a || "&#160;"))
        }
        this._super(t, a)
    }, _size: function () {
        var t, i, a, s = this.options, n = this.uiDialog.is(":visible");
        this.element.show().css({width: "auto", minHeight: 0, height: 0}), s.minWidth > s.width && (s.width = s.minWidth), t = this.uiDialog.css({height: "auto", width: s.width}).outerHeight(), i = Math.max(0, s.minHeight - t), "auto" === s.height ? e.support.minHeight ? this.element.css({minHeight: i, height: "auto"}) : (this.uiDialog.show(), a = this.element.css("height", "auto").height(), n || this.uiDialog.hide(), this.element.height(Math.max(a, i))) : this.element.height(Math.max(s.height - t, 0)), this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
    }}), e.extend(e.ui.dialog, {uuid: 0, maxZ: 0, getTitleId: function (e) {
        var t = e.attr("id");
        return t || (this.uuid += 1, t = this.uuid), "ui-dialog-title-" + t
    }, overlay: function (t) {
        this.$el = e.ui.dialog.overlay.create(t)
    }}), e.extend(e.ui.dialog.overlay, {instances: [], oldInstances: [], maxZ: 0, events: e.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function (e) {
        return e + ".dialog-overlay"
    }).join(" "), create: function (i) {
        0 === this.instances.length && (setTimeout(function () {
            e.ui.dialog.overlay.instances.length && e(document).bind(e.ui.dialog.overlay.events, function (i) {
                return e(i.target).zIndex() < e.ui.dialog.overlay.maxZ ? !1 : t
            })
        }, 1), e(window).bind("resize.dialog-overlay", e.ui.dialog.overlay.resize));
        var a = this.oldInstances.pop() || e("<div>").addClass("ui-widget-overlay");
        return e(document).bind("keydown.dialog-overlay", function (t) {
            var s = e.ui.dialog.overlay.instances;
            0 !== s.length && s[s.length - 1] === a && i.options.closeOnEscape && !t.isDefaultPrevented() && t.keyCode && t.keyCode === e.ui.keyCode.ESCAPE && (i.close(t), t.preventDefault())
        }), a.appendTo(document.body).css({width: this.width(), height: this.height()}), e.fn.bgiframe && a.bgiframe(), this.instances.push(a), a
    }, destroy: function (t) {
        var i = e.inArray(t, this.instances), a = 0;
        -1 !== i && this.oldInstances.push(this.instances.splice(i, 1)[0]), 0 === this.instances.length && e([document, window]).unbind(".dialog-overlay"), t.height(0).width(0).remove(), e.each(this.instances, function () {
            a = Math.max(a, this.css("z-index"))
        }), this.maxZ = a
    }, height: function () {
        var t, i;
        return e.ui.ie ? (t = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight), i = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight), i > t ? e(window).height() + "px" : t + "px") : e(document).height() + "px"
    }, width: function () {
        var t, i;
        return e.ui.ie ? (t = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth), i = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth), i > t ? e(window).width() + "px" : t + "px") : e(document).width() + "px"
    }, resize: function () {
        var t = e([]);
        e.each(e.ui.dialog.overlay.instances, function () {
            t = t.add(this)
        }), t.css({width: 0, height: 0}).css({width: e.ui.dialog.overlay.width(), height: e.ui.dialog.overlay.height()})
    }}), e.extend(e.ui.dialog.overlay.prototype, {destroy: function () {
        e.ui.dialog.overlay.destroy(this.$el)
    }})
})(jQuery);
(function (e) {
    var t = !1;
    e.widget("ui.menu", {version: "1.9.2", defaultElement: "<ul>", delay: 300, options: {icons: {submenu: "ui-icon-carat-1-e"}, menus: "ul", position: {my: "left top", at: "right top"}, role: "menu", blur: null, focus: null, select: null}, _create: function () {
        this.activeMenu = this.element, this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({role: this.options.role, tabIndex: 0}).bind("click" + this.eventNamespace, e.proxy(function (e) {
            this.options.disabled && e.preventDefault()
        }, this)), this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true"), this._on({"mousedown .ui-menu-item > a": function (e) {
            e.preventDefault()
        }, "click .ui-state-disabled > a": function (e) {
            e.preventDefault()
        }, "click .ui-menu-item:has(a)": function (i) {
            var a = e(i.target).closest(".ui-menu-item");
            !t && a.not(".ui-state-disabled").length && (t = !0, this.select(i), a.has(".ui-menu").length ? this.expand(i) : this.element.is(":focus") || (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)))
        }, "mouseenter .ui-menu-item": function (t) {
            var i = e(t.currentTarget);
            i.siblings().children(".ui-state-active").removeClass("ui-state-active"), this.focus(t, i)
        }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function (e, t) {
            var i = this.active || this.element.children(".ui-menu-item").eq(0);
            t || this.focus(e, i)
        }, blur: function (t) {
            this._delay(function () {
                e.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(t)
            })
        }, keydown: "_keydown"}), this.refresh(), this._on(this.document, {click: function (i) {
            e(i.target).closest(".ui-menu").length || this.collapseAll(i), t = !1
        }})
    }, _destroy: function () {
        this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(), this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function () {
            var t = e(this);
            t.data("ui-menu-submenu-carat") && t.remove()
        }), this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")
    }, _keydown: function (t) {
        function i(e) {
            return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
        }

        var a, s, n, r, o, h = !0;
        switch (t.keyCode) {
            case e.ui.keyCode.PAGE_UP:
                this.previousPage(t);
                break;
            case e.ui.keyCode.PAGE_DOWN:
                this.nextPage(t);
                break;
            case e.ui.keyCode.HOME:
                this._move("first", "first", t);
                break;
            case e.ui.keyCode.END:
                this._move("last", "last", t);
                break;
            case e.ui.keyCode.UP:
                this.previous(t);
                break;
            case e.ui.keyCode.DOWN:
                this.next(t);
                break;
            case e.ui.keyCode.LEFT:
                this.collapse(t);
                break;
            case e.ui.keyCode.RIGHT:
                this.active && !this.active.is(".ui-state-disabled") && this.expand(t);
                break;
            case e.ui.keyCode.ENTER:
            case e.ui.keyCode.SPACE:
                this._activate(t);
                break;
            case e.ui.keyCode.ESCAPE:
                this.collapse(t);
                break;
            default:
                h = !1, s = this.previousFilter || "", n = String.fromCharCode(t.keyCode), r = !1, clearTimeout(this.filterTimer), n === s ? r = !0 : n = s + n, o = RegExp("^" + i(n), "i"), a = this.activeMenu.children(".ui-menu-item").filter(function () {
                    return o.test(e(this).children("a").text())
                }), a = r && -1 !== a.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : a, a.length || (n = String.fromCharCode(t.keyCode), o = RegExp("^" + i(n), "i"), a = this.activeMenu.children(".ui-menu-item").filter(function () {
                    return o.test(e(this).children("a").text())
                })), a.length ? (this.focus(t, a), a.length > 1 ? (this.previousFilter = n, this.filterTimer = this._delay(function () {
                    delete this.previousFilter
                }, 1e3)) : delete this.previousFilter) : delete this.previousFilter
        }
        h && t.preventDefault()
    }, _activate: function (e) {
        this.active.is(".ui-state-disabled") || (this.active.children("a[aria-haspopup='true']").length ? this.expand(e) : this.select(e))
    }, refresh: function () {
        var t, i = this.options.icons.submenu, a = this.element.find(this.options.menus);
        a.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role: this.options.role, "aria-hidden": "true", "aria-expanded": "false"}).each(function () {
            var t = e(this), a = t.prev("a"), s = e("<span>").addClass("ui-menu-icon ui-icon " + i).data("ui-menu-submenu-carat", !0);
            a.attr("aria-haspopup", "true").prepend(s), t.attr("aria-labelledby", a.attr("id"))
        }), t = a.add(this.element), t.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex: -1, role: this._itemRole()}), t.children(":not(.ui-menu-item)").each(function () {
            var t = e(this);
            /[^\-—–\s]/.test(t.text()) || t.addClass("ui-widget-content ui-menu-divider")
        }), t.children(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !e.contains(this.element[0], this.active[0]) && this.blur()
    }, _itemRole: function () {
        return{menu: "menuitem", listbox: "option"}[this.options.role]
    }, focus: function (e, t) {
        var i, a;
        this.blur(e, e && "focus" === e.type), this._scrollIntoView(t), this.active = t.first(), a = this.active.children("a").addClass("ui-state-focus"), this.options.role && this.element.attr("aria-activedescendant", a.attr("id")), this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"), e && "keydown" === e.type ? this._close() : this.timer = this._delay(function () {
            this._close()
        }, this.delay), i = t.children(".ui-menu"), i.length && /^mouse/.test(e.type) && this._startOpening(i), this.activeMenu = t.parent(), this._trigger("focus", e, {item: t})
    }, _scrollIntoView: function (t) {
        var i, a, s, n, r, o;
        this._hasScroll() && (i = parseFloat(e.css(this.activeMenu[0], "borderTopWidth")) || 0, a = parseFloat(e.css(this.activeMenu[0], "paddingTop")) || 0, s = t.offset().top - this.activeMenu.offset().top - i - a, n = this.activeMenu.scrollTop(), r = this.activeMenu.height(), o = t.height(), 0 > s ? this.activeMenu.scrollTop(n + s) : s + o > r && this.activeMenu.scrollTop(n + s - r + o))
    }, blur: function (e, t) {
        t || clearTimeout(this.timer), this.active && (this.active.children("a").removeClass("ui-state-focus"), this.active = null, this._trigger("blur", e, {item: this.active}))
    }, _startOpening: function (e) {
        clearTimeout(this.timer), "true" === e.attr("aria-hidden") && (this.timer = this._delay(function () {
            this._close(), this._open(e)
        }, this.delay))
    }, _open: function (t) {
        var i = e.extend({of: this.active}, this.options.position);
        clearTimeout(this.timer), this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden", "true"), t.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i)
    }, collapseAll: function (t, i) {
        clearTimeout(this.timer), this.timer = this._delay(function () {
            var a = i ? this.element : e(t && t.target).closest(this.element.find(".ui-menu"));
            a.length || (a = this.element), this._close(a), this.blur(t), this.activeMenu = a
        }, this.delay)
    }, _close: function (e) {
        e || (e = this.active ? this.active.parent() : this.element), e.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find("a.ui-state-active").removeClass("ui-state-active")
    }, collapse: function (e) {
        var t = this.active && this.active.parent().closest(".ui-menu-item", this.element);
        t && t.length && (this._close(), this.focus(e, t))
    }, expand: function (e) {
        var t = this.active && this.active.children(".ui-menu ").children(".ui-menu-item").first();
        t && t.length && (this._open(t.parent()), this._delay(function () {
            this.focus(e, t)
        }))
    }, next: function (e) {
        this._move("next", "first", e)
    }, previous: function (e) {
        this._move("prev", "last", e)
    }, isFirstItem: function () {
        return this.active && !this.active.prevAll(".ui-menu-item").length
    }, isLastItem: function () {
        return this.active && !this.active.nextAll(".ui-menu-item").length
    }, _move: function (e, t, i) {
        var a;
        this.active && (a = "first" === e || "last" === e ? this.active["first" === e ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[e + "All"](".ui-menu-item").eq(0)), a && a.length && this.active || (a = this.activeMenu.children(".ui-menu-item")[t]()), this.focus(i, a)
    }, nextPage: function (t) {
        var i, a, s;
        return this.active ? (this.isLastItem() || (this._hasScroll() ? (a = this.active.offset().top, s = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () {
            return i = e(this), 0 > i.offset().top - a - s
        }), this.focus(t, i)) : this.focus(t, this.activeMenu.children(".ui-menu-item")[this.active ? "last" : "first"]())), undefined) : (this.next(t), undefined)
    }, previousPage: function (t) {
        var i, a, s;
        return this.active ? (this.isFirstItem() || (this._hasScroll() ? (a = this.active.offset().top, s = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () {
            return i = e(this), i.offset().top - a + s > 0
        }), this.focus(t, i)) : this.focus(t, this.activeMenu.children(".ui-menu-item").first())), undefined) : (this.next(t), undefined)
    }, _hasScroll: function () {
        return this.element.outerHeight() < this.element.prop("scrollHeight")
    }, select: function (t) {
        this.active = this.active || e(t.target).closest(".ui-menu-item");
        var i = {item: this.active};
        this.active.has(".ui-menu").length || this.collapseAll(t, !0), this._trigger("select", t, i)
    }})
})(jQuery);
(function (e, t) {
    e.widget("ui.progressbar", {version: "1.9.2", options: {value: 0, max: 100}, min: 0, _create: function () {
        this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role: "progressbar", "aria-valuemin": this.min, "aria-valuemax": this.options.max, "aria-valuenow": this._value()}), this.valueDiv = e("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element), this.oldValue = this._value(), this._refreshValue()
    }, _destroy: function () {
        this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), this.valueDiv.remove()
    }, value: function (e) {
        return e === t ? this._value() : (this._setOption("value", e), this)
    }, _setOption: function (e, t) {
        "value" === e && (this.options.value = t, this._refreshValue(), this._value() === this.options.max && this._trigger("complete")), this._super(e, t)
    }, _value: function () {
        var e = this.options.value;
        return"number" != typeof e && (e = 0), Math.min(this.options.max, Math.max(this.min, e))
    }, _percentage: function () {
        return 100 * this._value() / this.options.max
    }, _refreshValue: function () {
        var e = this.value(), t = this._percentage();
        this.oldValue !== e && (this.oldValue = e, this._trigger("change")), this.valueDiv.toggle(e > this.min).toggleClass("ui-corner-right", e === this.options.max).width(t.toFixed(0) + "%"), this.element.attr("aria-valuenow", e)
    }})
})(jQuery);
(function (e) {
    var t = 5;
    e.widget("ui.slider", e.ui.mouse, {version: "1.9.2", widgetEventPrefix: "slide", options: {animate: !1, distance: 0, max: 100, min: 0, orientation: "horizontal", range: !1, step: 1, value: 0, values: null}, _create: function () {
        var i, s, a = this.options, n = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), r = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>", o = [];
        for (this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all" + (a.disabled ? " ui-slider-disabled ui-disabled" : "")), this.range = e([]), a.range && (a.range === !0 && (a.values || (a.values = [this._valueMin(), this._valueMin()]), a.values.length && 2 !== a.values.length && (a.values = [a.values[0], a.values[0]])), this.range = e("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header" + ("min" === a.range || "max" === a.range ? " ui-slider-range-" + a.range : ""))), s = a.values && a.values.length || 1, i = n.length; s > i; i++)o.push(r);
        this.handles = n.add(e(o.join("")).appendTo(this.element)), this.handle = this.handles.eq(0), this.handles.add(this.range).filter("a").click(function (e) {
            e.preventDefault()
        }).mouseenter(function () {
                a.disabled || e(this).addClass("ui-state-hover")
            }).mouseleave(function () {
                e(this).removeClass("ui-state-hover")
            }).focus(function () {
                a.disabled ? e(this).blur() : (e(".ui-slider .ui-state-focus").removeClass("ui-state-focus"), e(this).addClass("ui-state-focus"))
            }).blur(function () {
                e(this).removeClass("ui-state-focus")
            }), this.handles.each(function (t) {
            e(this).data("ui-slider-handle-index", t)
        }), this._on(this.handles, {keydown: function (i) {
            var s, a, n, r, o = e(i.target).data("ui-slider-handle-index");
            switch (i.keyCode) {
                case e.ui.keyCode.HOME:
                case e.ui.keyCode.END:
                case e.ui.keyCode.PAGE_UP:
                case e.ui.keyCode.PAGE_DOWN:
                case e.ui.keyCode.UP:
                case e.ui.keyCode.RIGHT:
                case e.ui.keyCode.DOWN:
                case e.ui.keyCode.LEFT:
                    if (i.preventDefault(), !this._keySliding && (this._keySliding = !0, e(i.target).addClass("ui-state-active"), s = this._start(i, o), s === !1))return
            }
            switch (r = this.options.step, a = n = this.options.values && this.options.values.length ? this.values(o) : this.value(), i.keyCode) {
                case e.ui.keyCode.HOME:
                    n = this._valueMin();
                    break;
                case e.ui.keyCode.END:
                    n = this._valueMax();
                    break;
                case e.ui.keyCode.PAGE_UP:
                    n = this._trimAlignValue(a + (this._valueMax() - this._valueMin()) / t);
                    break;
                case e.ui.keyCode.PAGE_DOWN:
                    n = this._trimAlignValue(a - (this._valueMax() - this._valueMin()) / t);
                    break;
                case e.ui.keyCode.UP:
                case e.ui.keyCode.RIGHT:
                    if (a === this._valueMax())return;
                    n = this._trimAlignValue(a + r);
                    break;
                case e.ui.keyCode.DOWN:
                case e.ui.keyCode.LEFT:
                    if (a === this._valueMin())return;
                    n = this._trimAlignValue(a - r)
            }
            this._slide(i, o, n)
        }, keyup: function (t) {
            var i = e(t.target).data("ui-slider-handle-index");
            this._keySliding && (this._keySliding = !1, this._stop(t, i), this._change(t, i), e(t.target).removeClass("ui-state-active"))
        }}), this._refreshValue(), this._animateOff = !1
    }, _destroy: function () {
        this.handles.remove(), this.range.remove(), this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all"), this._mouseDestroy()
    }, _mouseCapture: function (t) {
        var i, s, a, n, r, o, h, l, u = this, d = this.options;
        return d.disabled ? !1 : (this.elementSize = {width: this.element.outerWidth(), height: this.element.outerHeight()}, this.elementOffset = this.element.offset(), i = {x: t.pageX, y: t.pageY}, s = this._normValueFromMouse(i), a = this._valueMax() - this._valueMin() + 1, this.handles.each(function (t) {
            var i = Math.abs(s - u.values(t));
            a > i && (a = i, n = e(this), r = t)
        }), d.range === !0 && this.values(1) === d.min && (r += 1, n = e(this.handles[r])), o = this._start(t, r), o === !1 ? !1 : (this._mouseSliding = !0, this._handleIndex = r, n.addClass("ui-state-active").focus(), h = n.offset(), l = !e(t.target).parents().andSelf().is(".ui-slider-handle"), this._clickOffset = l ? {left: 0, top: 0} : {left: t.pageX - h.left - n.width() / 2, top: t.pageY - h.top - n.height() / 2 - (parseInt(n.css("borderTopWidth"), 10) || 0) - (parseInt(n.css("borderBottomWidth"), 10) || 0) + (parseInt(n.css("marginTop"), 10) || 0)}, this.handles.hasClass("ui-state-hover") || this._slide(t, r, s), this._animateOff = !0, !0))
    }, _mouseStart: function () {
        return!0
    }, _mouseDrag: function (e) {
        var t = {x: e.pageX, y: e.pageY}, i = this._normValueFromMouse(t);
        return this._slide(e, this._handleIndex, i), !1
    }, _mouseStop: function (e) {
        return this.handles.removeClass("ui-state-active"), this._mouseSliding = !1, this._stop(e, this._handleIndex), this._change(e, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1
    }, _detectOrientation: function () {
        this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal"
    }, _normValueFromMouse: function (e) {
        var t, i, s, a, n;
        return"horizontal" === this.orientation ? (t = this.elementSize.width, i = e.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (t = this.elementSize.height, i = e.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), s = i / t, s > 1 && (s = 1), 0 > s && (s = 0), "vertical" === this.orientation && (s = 1 - s), a = this._valueMax() - this._valueMin(), n = this._valueMin() + s * a, this._trimAlignValue(n)
    }, _start: function (e, t) {
        var i = {handle: this.handles[t], value: this.value()};
        return this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._trigger("start", e, i)
    }, _slide: function (e, t, i) {
        var s, a, n;
        this.options.values && this.options.values.length ? (s = this.values(t ? 0 : 1), 2 === this.options.values.length && this.options.range === !0 && (0 === t && i > s || 1 === t && s > i) && (i = s), i !== this.values(t) && (a = this.values(), a[t] = i, n = this._trigger("slide", e, {handle: this.handles[t], value: i, values: a}), s = this.values(t ? 0 : 1), n !== !1 && this.values(t, i, !0))) : i !== this.value() && (n = this._trigger("slide", e, {handle: this.handles[t], value: i}), n !== !1 && this.value(i))
    }, _stop: function (e, t) {
        var i = {handle: this.handles[t], value: this.value()};
        this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._trigger("stop", e, i)
    }, _change: function (e, t) {
        if (!this._keySliding && !this._mouseSliding) {
            var i = {handle: this.handles[t], value: this.value()};
            this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._trigger("change", e, i)
        }
    }, value: function (e) {
        return arguments.length ? (this.options.value = this._trimAlignValue(e), this._refreshValue(), this._change(null, 0), undefined) : this._value()
    }, values: function (t, i) {
        var s, a, n;
        if (arguments.length > 1)return this.options.values[t] = this._trimAlignValue(i), this._refreshValue(), this._change(null, t), undefined;
        if (!arguments.length)return this._values();
        if (!e.isArray(arguments[0]))return this.options.values && this.options.values.length ? this._values(t) : this.value();
        for (s = this.options.values, a = arguments[0], n = 0; s.length > n; n += 1)s[n] = this._trimAlignValue(a[n]), this._change(null, n);
        this._refreshValue()
    }, _setOption: function (t, i) {
        var s, a = 0;
        switch (e.isArray(this.options.values) && (a = this.options.values.length), e.Widget.prototype._setOption.apply(this, arguments), t) {
            case"disabled":
                i ? (this.handles.filter(".ui-state-focus").blur(), this.handles.removeClass("ui-state-hover"), this.handles.prop("disabled", !0), this.element.addClass("ui-disabled")) : (this.handles.prop("disabled", !1), this.element.removeClass("ui-disabled"));
                break;
            case"orientation":
                this._detectOrientation(), this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation), this._refreshValue();
                break;
            case"value":
                this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;
                break;
            case"values":
                for (this._animateOff = !0, this._refreshValue(), s = 0; a > s; s += 1)this._change(null, s);
                this._animateOff = !1;
                break;
            case"min":
            case"max":
                this._animateOff = !0, this._refreshValue(), this._animateOff = !1
        }
    }, _value: function () {
        var e = this.options.value;
        return e = this._trimAlignValue(e)
    }, _values: function (e) {
        var t, i, s;
        if (arguments.length)return t = this.options.values[e], t = this._trimAlignValue(t);
        for (i = this.options.values.slice(), s = 0; i.length > s; s += 1)i[s] = this._trimAlignValue(i[s]);
        return i
    }, _trimAlignValue: function (e) {
        if (this._valueMin() >= e)return this._valueMin();
        if (e >= this._valueMax())return this._valueMax();
        var t = this.options.step > 0 ? this.options.step : 1, i = (e - this._valueMin()) % t, s = e - i;
        return 2 * Math.abs(i) >= t && (s += i > 0 ? t : -t), parseFloat(s.toFixed(5))
    }, _valueMin: function () {
        return this.options.min
    }, _valueMax: function () {
        return this.options.max
    }, _refreshValue: function () {
        var t, i, s, a, n, r = this.options.range, o = this.options, h = this, l = this._animateOff ? !1 : o.animate, u = {};
        this.options.values && this.options.values.length ? this.handles.each(function (s) {
            i = 100 * ((h.values(s) - h._valueMin()) / (h._valueMax() - h._valueMin())), u["horizontal" === h.orientation ? "left" : "bottom"] = i + "%", e(this).stop(1, 1)[l ? "animate" : "css"](u, o.animate), h.options.range === !0 && ("horizontal" === h.orientation ? (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({left: i + "%"}, o.animate), 1 === s && h.range[l ? "animate" : "css"]({width: i - t + "%"}, {queue: !1, duration: o.animate})) : (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({bottom: i + "%"}, o.animate), 1 === s && h.range[l ? "animate" : "css"]({height: i - t + "%"}, {queue: !1, duration: o.animate}))), t = i
        }) : (s = this.value(), a = this._valueMin(), n = this._valueMax(), i = n !== a ? 100 * ((s - a) / (n - a)) : 0, u["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", this.handle.stop(1, 1)[l ? "animate" : "css"](u, o.animate), "min" === r && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({width: i + "%"}, o.animate), "max" === r && "horizontal" === this.orientation && this.range[l ? "animate" : "css"]({width: 100 - i + "%"}, {queue: !1, duration: o.animate}), "min" === r && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({height: i + "%"}, o.animate), "max" === r && "vertical" === this.orientation && this.range[l ? "animate" : "css"]({height: 100 - i + "%"}, {queue: !1, duration: o.animate}))
    }})
})(jQuery);
(function (e) {
    function t(e) {
        return function () {
            var t = this.element.val();
            e.apply(this, arguments), this._refresh(), t !== this.element.val() && this._trigger("change")
        }
    }

    e.widget("ui.spinner", {version: "1.9.2", defaultElement: "<input>", widgetEventPrefix: "spin", options: {culture: null, icons: {down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n"}, incremental: !0, max: null, min: null, numberFormat: null, page: 10, step: 1, change: null, spin: null, start: null, stop: null}, _create: function () {
        this._setOption("max", this.options.max), this._setOption("min", this.options.min), this._setOption("step", this.options.step), this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), this._on(this.window, {beforeunload: function () {
            this.element.removeAttr("autocomplete")
        }})
    }, _getCreateOptions: function () {
        var t = {}, i = this.element;
        return e.each(["min", "max", "step"], function (e, s) {
            var a = i.attr(s);
            void 0 !== a && a.length && (t[s] = a)
        }), t
    }, _events: {keydown: function (e) {
        this._start(e) && this._keydown(e) && e.preventDefault()
    }, keyup: "_stop", focus: function () {
        this.previous = this.element.val()
    }, blur: function (e) {
        return this.cancelBlur ? (delete this.cancelBlur, void 0) : (this._refresh(), this.previous !== this.element.val() && this._trigger("change", e), void 0)
    }, mousewheel: function (e, t) {
        if (t) {
            if (!this.spinning && !this._start(e))return!1;
            this._spin((t > 0 ? 1 : -1) * this.options.step, e), clearTimeout(this.mousewheelTimer), this.mousewheelTimer = this._delay(function () {
                this.spinning && this._stop(e)
            }, 100), e.preventDefault()
        }
    }, "mousedown .ui-spinner-button": function (t) {
        function i() {
            var e = this.element[0] === this.document[0].activeElement;
            e || (this.element.focus(), this.previous = s, this._delay(function () {
                this.previous = s
            }))
        }

        var s;
        s = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val(), t.preventDefault(), i.call(this), this.cancelBlur = !0, this._delay(function () {
            delete this.cancelBlur, i.call(this)
        }), this._start(t) !== !1 && this._repeat(null, e(t.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, t)
    }, "mouseup .ui-spinner-button": "_stop", "mouseenter .ui-spinner-button": function (t) {
        return e(t.currentTarget).hasClass("ui-state-active") ? this._start(t) === !1 ? !1 : (this._repeat(null, e(t.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, t), void 0) : void 0
    }, "mouseleave .ui-spinner-button": "_stop"}, _draw: function () {
        var e = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
        this.element.attr("role", "spinbutton"), this.buttons = e.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all"), this.buttons.height() > Math.ceil(.5 * e.height()) && e.height() > 0 && e.height(e.height()), this.options.disabled && this.disable()
    }, _keydown: function (t) {
        var i = this.options, s = e.ui.keyCode;
        switch (t.keyCode) {
            case s.UP:
                return this._repeat(null, 1, t), !0;
            case s.DOWN:
                return this._repeat(null, -1, t), !0;
            case s.PAGE_UP:
                return this._repeat(null, i.page, t), !0;
            case s.PAGE_DOWN:
                return this._repeat(null, -i.page, t), !0
        }
        return!1
    }, _uiSpinnerHtml: function () {
        return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"
    }, _buttonHtml: function () {
        return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" + "</a>" + "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" + "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" + "</a>"
    }, _start: function (e) {
        return this.spinning || this._trigger("start", e) !== !1 ? (this.counter || (this.counter = 1), this.spinning = !0, !0) : !1
    }, _repeat: function (e, t, i) {
        e = e || 500, clearTimeout(this.timer), this.timer = this._delay(function () {
            this._repeat(40, t, i)
        }, e), this._spin(t * this.options.step, i)
    }, _spin: function (e, t) {
        var i = this.value() || 0;
        this.counter || (this.counter = 1), i = this._adjustValue(i + e * this._increment(this.counter)), this.spinning && this._trigger("spin", t, {value: i}) === !1 || (this._value(i), this.counter++)
    }, _increment: function (t) {
        var i = this.options.incremental;
        return i ? e.isFunction(i) ? i(t) : Math.floor(t * t * t / 5e4 - t * t / 500 + 17 * t / 200 + 1) : 1
    }, _precision: function () {
        var e = this._precisionOf(this.options.step);
        return null !== this.options.min && (e = Math.max(e, this._precisionOf(this.options.min))), e
    }, _precisionOf: function (e) {
        var t = "" + e, i = t.indexOf(".");
        return-1 === i ? 0 : t.length - i - 1
    }, _adjustValue: function (e) {
        var t, i, s = this.options;
        return t = null !== s.min ? s.min : 0, i = e - t, i = Math.round(i / s.step) * s.step, e = t + i, e = parseFloat(e.toFixed(this._precision())), null !== s.max && e > s.max ? s.max : null !== s.min && s.min > e ? s.min : e
    }, _stop: function (e) {
        this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", e))
    }, _setOption: function (e, t) {
        if ("culture" === e || "numberFormat" === e) {
            var i = this._parse(this.element.val());
            return this.options[e] = t, this.element.val(this._format(i)), void 0
        }
        ("max" === e || "min" === e || "step" === e) && "string" == typeof t && (t = this._parse(t)), this._super(e, t), "disabled" === e && (t ? (this.element.prop("disabled", !0), this.buttons.button("disable")) : (this.element.prop("disabled", !1), this.buttons.button("enable")))
    }, _setOptions: t(function (e) {
        this._super(e), this._value(this.element.val())
    }), _parse: function (e) {
        return"string" == typeof e && "" !== e && (e = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(e, 10, this.options.culture) : +e), "" === e || isNaN(e) ? null : e
    }, _format: function (e) {
        return"" === e ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(e, this.options.numberFormat, this.options.culture) : e
    }, _refresh: function () {
        this.element.attr({"aria-valuemin": this.options.min, "aria-valuemax": this.options.max, "aria-valuenow": this._parse(this.element.val())})
    }, _value: function (e, t) {
        var i;
        "" !== e && (i = this._parse(e), null !== i && (t || (i = this._adjustValue(i)), e = this._format(i))), this.element.val(e), this._refresh()
    }, _destroy: function () {
        this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), this.uiSpinner.replaceWith(this.element)
    }, stepUp: t(function (e) {
        this._stepUp(e)
    }), _stepUp: function (e) {
        this._spin((e || 1) * this.options.step)
    }, stepDown: t(function (e) {
        this._stepDown(e)
    }), _stepDown: function (e) {
        this._spin((e || 1) * -this.options.step)
    }, pageUp: t(function (e) {
        this._stepUp((e || 1) * this.options.page)
    }), pageDown: t(function (e) {
        this._stepDown((e || 1) * this.options.page)
    }), value: function (e) {
        return arguments.length ? (t(this._value).call(this, e), void 0) : this._parse(this.element.val())
    }, widget: function () {
        return this.uiSpinner
    }})
})(jQuery);
(function (e, t) {
    function i() {
        return++a
    }

    function s(e) {
        return e.hash.length > 1 && e.href.replace(n, "") === location.href.replace(n, "").replace(/\s/g, "%20")
    }

    var a = 0, n = /#.*$/;
    e.widget("ui.tabs", {version: "1.9.2", delay: 300, options: {active: null, collapsible: !1, event: "click", heightStyle: "content", hide: null, show: null, activate: null, beforeActivate: null, beforeLoad: null, load: null}, _create: function () {
        var i = this, s = this.options, a = s.active, n = location.hash.substring(1);
        this.running = !1, this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", s.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace,function (t) {
            e(this).is(".ui-state-disabled") && t.preventDefault()
        }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function () {
                e(this).closest("li").is(".ui-state-disabled") && this.blur()
            }), this._processTabs(), null === a && (n && this.tabs.each(function (i, s) {
            return e(s).attr("aria-controls") === n ? (a = i, !1) : t
        }), null === a && (a = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), (null === a || -1 === a) && (a = this.tabs.length ? 0 : !1)), a !== !1 && (a = this.tabs.index(this.tabs.eq(a)), -1 === a && (a = s.collapsible ? !1 : 0)), s.active = a, !s.collapsible && s.active === !1 && this.anchors.length && (s.active = 0), e.isArray(s.disabled) && (s.disabled = e.unique(s.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"), function (e) {
            return i.tabs.index(e)
        }))).sort()), this.active = this.options.active !== !1 && this.anchors.length ? this._findActive(this.options.active) : e(), this._refresh(), this.active.length && this.load(s.active)
    }, _getCreateEventData: function () {
        return{tab: this.active, panel: this.active.length ? this._getPanelForTab(this.active) : e()}
    }, _tabKeydown: function (i) {
        var s = e(this.document[0].activeElement).closest("li"), a = this.tabs.index(s), n = !0;
        if (!this._handlePageNav(i)) {
            switch (i.keyCode) {
                case e.ui.keyCode.RIGHT:
                case e.ui.keyCode.DOWN:
                    a++;
                    break;
                case e.ui.keyCode.UP:
                case e.ui.keyCode.LEFT:
                    n = !1, a--;
                    break;
                case e.ui.keyCode.END:
                    a = this.anchors.length - 1;
                    break;
                case e.ui.keyCode.HOME:
                    a = 0;
                    break;
                case e.ui.keyCode.SPACE:
                    return i.preventDefault(), clearTimeout(this.activating), this._activate(a), t;
                case e.ui.keyCode.ENTER:
                    return i.preventDefault(), clearTimeout(this.activating), this._activate(a === this.options.active ? !1 : a), t;
                default:
                    return
            }
            i.preventDefault(), clearTimeout(this.activating), a = this._focusNextTab(a, n), i.ctrlKey || (s.attr("aria-selected", "false"), this.tabs.eq(a).attr("aria-selected", "true"), this.activating = this._delay(function () {
                this.option("active", a)
            }, this.delay))
        }
    }, _panelKeydown: function (t) {
        this._handlePageNav(t) || t.ctrlKey && t.keyCode === e.ui.keyCode.UP && (t.preventDefault(), this.active.focus())
    }, _handlePageNav: function (i) {
        return i.altKey && i.keyCode === e.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), !0) : i.altKey && i.keyCode === e.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), !0) : t
    }, _findNextTab: function (t, i) {
        function s() {
            return t > a && (t = 0), 0 > t && (t = a), t
        }

        for (var a = this.tabs.length - 1; -1 !== e.inArray(s(), this.options.disabled);)t = i ? t + 1 : t - 1;
        return t
    }, _focusNextTab: function (e, t) {
        return e = this._findNextTab(e, t), this.tabs.eq(e).focus(), e
    }, _setOption: function (e, i) {
        return"active" === e ? (this._activate(i), t) : "disabled" === e ? (this._setupDisabled(i), t) : (this._super(e, i), "collapsible" === e && (this.element.toggleClass("ui-tabs-collapsible", i), i || this.options.active !== !1 || this._activate(0)), "event" === e && this._setupEvents(i), "heightStyle" === e && this._setupHeightStyle(i), t)
    }, _tabId: function (e) {
        return e.attr("aria-controls") || "ui-tabs-" + i()
    }, _sanitizeSelector: function (e) {
        return e ? e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""
    }, refresh: function () {
        var t = this.options, i = this.tablist.children(":has(a[href])");
        t.disabled = e.map(i.filter(".ui-state-disabled"), function (e) {
            return i.index(e)
        }), this._processTabs(), t.active !== !1 && this.anchors.length ? this.active.length && !e.contains(this.tablist[0], this.active[0]) ? this.tabs.length === t.disabled.length ? (t.active = !1, this.active = e()) : this._activate(this._findNextTab(Math.max(0, t.active - 1), !1)) : t.active = this.tabs.index(this.active) : (t.active = !1, this.active = e()), this._refresh()
    }, _refresh: function () {
        this._setupDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({"aria-selected": "false", tabIndex: -1}), this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded": "false", "aria-hidden": "true"}), this.active.length ? (this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected": "true", tabIndex: 0}), this._getPanelForTab(this.active).show().attr({"aria-expanded": "true", "aria-hidden": "false"})) : this.tabs.eq(0).attr("tabIndex", 0)
    }, _processTabs: function () {
        var t = this;
        this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist"), this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role: "tab", tabIndex: -1}), this.anchors = this.tabs.map(function () {
            return e("a", this)[0]
        }).addClass("ui-tabs-anchor").attr({role: "presentation", tabIndex: -1}), this.panels = e(), this.anchors.each(function (i, a) {
            var n, r, o, h = e(a).uniqueId().attr("id"), l = e(a).closest("li"), u = l.attr("aria-controls");
            s(a) ? (n = a.hash, r = t.element.find(t._sanitizeSelector(n))) : (o = t._tabId(l), n = "#" + o, r = t.element.find(n), r.length || (r = t._createPanel(o), r.insertAfter(t.panels[i - 1] || t.tablist)), r.attr("aria-live", "polite")), r.length && (t.panels = t.panels.add(r)), u && l.data("ui-tabs-aria-controls", u), l.attr({"aria-controls": n.substring(1), "aria-labelledby": h}), r.attr("aria-labelledby", h)
        }), this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel")
    }, _getList: function () {
        return this.element.find("ol,ul").eq(0)
    }, _createPanel: function (t) {
        return e("<div>").attr("id", t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0)
    }, _setupDisabled: function (t) {
        e.isArray(t) && (t.length ? t.length === this.anchors.length && (t = !0) : t = !1);
        for (var i, s = 0; i = this.tabs[s]; s++)t === !0 || -1 !== e.inArray(s, t) ? e(i).addClass("ui-state-disabled").attr("aria-disabled", "true") : e(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");
        this.options.disabled = t
    }, _setupEvents: function (t) {
        var i = {click: function (e) {
            e.preventDefault()
        }};
        t && e.each(t.split(" "), function (e, t) {
            i[t] = "_eventHandler"
        }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(this.anchors, i), this._on(this.tabs, {keydown: "_tabKeydown"}), this._on(this.panels, {keydown: "_panelKeydown"}), this._focusable(this.tabs), this._hoverable(this.tabs)
    }, _setupHeightStyle: function (t) {
        var i, s, a = this.element.parent();
        "fill" === t ? (e.support.minHeight || (s = a.css("overflow"), a.css("overflow", "hidden")), i = a.height(), this.element.siblings(":visible").each(function () {
            var t = e(this), s = t.css("position");
            "absolute" !== s && "fixed" !== s && (i -= t.outerHeight(!0))
        }), s && a.css("overflow", s), this.element.children().not(this.panels).each(function () {
            i -= e(this).outerHeight(!0)
        }), this.panels.each(function () {
            e(this).height(Math.max(0, i - e(this).innerHeight() + e(this).height()))
        }).css("overflow", "auto")) : "auto" === t && (i = 0, this.panels.each(function () {
            i = Math.max(i, e(this).height("").height())
        }).height(i))
    }, _eventHandler: function (t) {
        var i = this.options, s = this.active, a = e(t.currentTarget), n = a.closest("li"), r = n[0] === s[0], o = r && i.collapsible, h = o ? e() : this._getPanelForTab(n), l = s.length ? this._getPanelForTab(s) : e(), u = {oldTab: s, oldPanel: l, newTab: o ? e() : n, newPanel: h};
        t.preventDefault(), n.hasClass("ui-state-disabled") || n.hasClass("ui-tabs-loading") || this.running || r && !i.collapsible || this._trigger("beforeActivate", t, u) === !1 || (i.active = o ? !1 : this.tabs.index(n), this.active = r ? e() : n, this.xhr && this.xhr.abort(), l.length || h.length || e.error("jQuery UI Tabs: Mismatching fragment identifier."), h.length && this.load(this.tabs.index(n), t), this._toggle(t, u))
    }, _toggle: function (t, i) {
        function s() {
            n.running = !1, n._trigger("activate", t, i)
        }

        function a() {
            i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), r.length && n.options.show ? n._show(r, n.options.show, s) : (r.show(), s())
        }

        var n = this, r = i.newPanel, o = i.oldPanel;
        this.running = !0, o.length && this.options.hide ? this._hide(o, this.options.hide, function () {
            i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), a()
        }) : (i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), o.hide(), a()), o.attr({"aria-expanded": "false", "aria-hidden": "true"}), i.oldTab.attr("aria-selected", "false"), r.length && o.length ? i.oldTab.attr("tabIndex", -1) : r.length && this.tabs.filter(function () {
            return 0 === e(this).attr("tabIndex")
        }).attr("tabIndex", -1), r.attr({"aria-expanded": "true", "aria-hidden": "false"}), i.newTab.attr({"aria-selected": "true", tabIndex: 0})
    }, _activate: function (t) {
        var i, s = this._findActive(t);
        s[0] !== this.active[0] && (s.length || (s = this.active), i = s.find(".ui-tabs-anchor")[0], this._eventHandler({target: i, currentTarget: i, preventDefault: e.noop}))
    }, _findActive: function (t) {
        return t === !1 ? e() : this.tabs.eq(t)
    }, _getIndex: function (e) {
        return"string" == typeof e && (e = this.anchors.index(this.anchors.filter("[href$='" + e + "']"))), e
    }, _destroy: function () {
        this.xhr && this.xhr.abort(), this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"), this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"), this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId(), this.tabs.add(this.panels).each(function () {
            e.data(this, "ui-tabs-destroy") ? e(this).remove() : e(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")
        }), this.tabs.each(function () {
            var t = e(this), i = t.data("ui-tabs-aria-controls");
            i ? t.attr("aria-controls", i) : t.removeAttr("aria-controls")
        }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "")
    }, enable: function (i) {
        var s = this.options.disabled;
        s !== !1 && (i === t ? s = !1 : (i = this._getIndex(i), s = e.isArray(s) ? e.map(s, function (e) {
            return e !== i ? e : null
        }) : e.map(this.tabs, function (e, t) {
            return t !== i ? t : null
        })), this._setupDisabled(s))
    }, disable: function (i) {
        var s = this.options.disabled;
        if (s !== !0) {
            if (i === t)s = !0; else {
                if (i = this._getIndex(i), -1 !== e.inArray(i, s))return;
                s = e.isArray(s) ? e.merge([i], s).sort() : [i]
            }
            this._setupDisabled(s)
        }
    }, load: function (t, i) {
        t = this._getIndex(t);
        var a = this, n = this.tabs.eq(t), r = n.find(".ui-tabs-anchor"), o = this._getPanelForTab(n), h = {tab: n, panel: o};
        s(r[0]) || (this.xhr = e.ajax(this._ajaxSettings(r, i, h)), this.xhr && "canceled" !== this.xhr.statusText && (n.addClass("ui-tabs-loading"), o.attr("aria-busy", "true"), this.xhr.success(function (e) {
            setTimeout(function () {
                o.html(e), a._trigger("load", i, h)
            }, 1)
        }).complete(function (e, t) {
                setTimeout(function () {
                    "abort" === t && a.panels.stop(!1, !0), n.removeClass("ui-tabs-loading"), o.removeAttr("aria-busy"), e === a.xhr && delete a.xhr
                }, 1)
            })))
    }, _ajaxSettings: function (t, i, s) {
        var a = this;
        return{url: t.attr("href"), beforeSend: function (t, n) {
            return a._trigger("beforeLoad", i, e.extend({jqXHR: t, ajaxSettings: n}, s))
        }}
    }, _getPanelForTab: function (t) {
        var i = e(t).attr("aria-controls");
        return this.element.find(this._sanitizeSelector("#" + i))
    }}), e.uiBackCompat !== !1 && (e.ui.tabs.prototype._ui = function (e, t) {
        return{tab: e, panel: t, index: this.anchors.index(e)}
    }, e.widget("ui.tabs", e.ui.tabs, {url: function (e, t) {
        this.anchors.eq(e).attr("href", t)
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {ajaxOptions: null, cache: !1}, _create: function () {
        this._super();
        var i = this;
        this._on({tabsbeforeload: function (s, a) {
            return e.data(a.tab[0], "cache.tabs") ? (s.preventDefault(), t) : (a.jqXHR.success(function () {
                i.options.cache && e.data(a.tab[0], "cache.tabs", !0)
            }), t)
        }})
    }, _ajaxSettings: function (t, i, s) {
        var a = this.options.ajaxOptions;
        return e.extend({}, a, {error: function (e, t) {
            try {
                a.error(e, t, s.tab.closest("li").index(), s.tab[0])
            } catch (i) {
            }
        }}, this._superApply(arguments))
    }, _setOption: function (e, t) {
        "cache" === e && t === !1 && this.anchors.removeData("cache.tabs"), this._super(e, t)
    }, _destroy: function () {
        this.anchors.removeData("cache.tabs"), this._super()
    }, url: function (e) {
        this.anchors.eq(e).removeData("cache.tabs"), this._superApply(arguments)
    }}), e.widget("ui.tabs", e.ui.tabs, {abort: function () {
        this.xhr && this.xhr.abort()
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {spinner: "<em>Loading&#8230;</em>"}, _create: function () {
        this._super(), this._on({tabsbeforeload: function (e, t) {
            if (e.target === this.element[0] && this.options.spinner) {
                var i = t.tab.find("span"), s = i.html();
                i.html(this.options.spinner), t.jqXHR.complete(function () {
                    i.html(s)
                })
            }
        }})
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {enable: null, disable: null}, enable: function (t) {
        var i, s = this.options;
        (t && s.disabled === !0 || e.isArray(s.disabled) && -1 !== e.inArray(t, s.disabled)) && (i = !0), this._superApply(arguments), i && this._trigger("enable", null, this._ui(this.anchors[t], this.panels[t]))
    }, disable: function (t) {
        var i, s = this.options;
        (t && s.disabled === !1 || e.isArray(s.disabled) && -1 === e.inArray(t, s.disabled)) && (i = !0), this._superApply(arguments), i && this._trigger("disable", null, this._ui(this.anchors[t], this.panels[t]))
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {add: null, remove: null, tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"}, add: function (i, s, a) {
        a === t && (a = this.anchors.length);
        var n, r, o = this.options, h = e(o.tabTemplate.replace(/#\{href\}/g, i).replace(/#\{label\}/g, s)), l = i.indexOf("#") ? this._tabId(h) : i.replace("#", "");
        return h.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy", !0), h.attr("aria-controls", l), n = a >= this.tabs.length, r = this.element.find("#" + l), r.length || (r = this._createPanel(l), n ? a > 0 ? r.insertAfter(this.panels.eq(-1)) : r.appendTo(this.element) : r.insertBefore(this.panels[a])), r.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide(), n ? h.appendTo(this.tablist) : h.insertBefore(this.tabs[a]), o.disabled = e.map(o.disabled, function (e) {
            return e >= a ? ++e : e
        }), this.refresh(), 1 === this.tabs.length && o.active === !1 && this.option("active", 0), this._trigger("add", null, this._ui(this.anchors[a], this.panels[a])), this
    }, remove: function (t) {
        t = this._getIndex(t);
        var i = this.options, s = this.tabs.eq(t).remove(), a = this._getPanelForTab(s).remove();
        return s.hasClass("ui-tabs-active") && this.anchors.length > 2 && this._activate(t + (this.anchors.length > t + 1 ? 1 : -1)), i.disabled = e.map(e.grep(i.disabled, function (e) {
            return e !== t
        }), function (e) {
            return e >= t ? --e : e
        }), this.refresh(), this._trigger("remove", null, this._ui(s.find("a")[0], a[0])), this
    }}), e.widget("ui.tabs", e.ui.tabs, {length: function () {
        return this.anchors.length
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {idPrefix: "ui-tabs-"}, _tabId: function (t) {
        var s = t.is("li") ? t.find("a[href]") : t;
        return s = s[0], e(s).closest("li").attr("aria-controls") || s.title && s.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF\-]/g, "") || this.options.idPrefix + i()
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {panelTemplate: "<div></div>"}, _createPanel: function (t) {
        return e(this.options.panelTemplate).attr("id", t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0)
    }}), e.widget("ui.tabs", e.ui.tabs, {_create: function () {
        var e = this.options;
        null === e.active && e.selected !== t && (e.active = -1 === e.selected ? !1 : e.selected), this._super(), e.selected = e.active, e.selected === !1 && (e.selected = -1)
    }, _setOption: function (e, t) {
        if ("selected" !== e)return this._super(e, t);
        var i = this.options;
        this._super("active", -1 === t ? !1 : t), i.selected = i.active, i.selected === !1 && (i.selected = -1)
    }, _eventHandler: function () {
        this._superApply(arguments), this.options.selected = this.options.active, this.options.selected === !1 && (this.options.selected = -1)
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {show: null, select: null}, _create: function () {
        this._super(), this.options.active !== !1 && this._trigger("show", null, this._ui(this.active.find(".ui-tabs-anchor")[0], this._getPanelForTab(this.active)[0]))
    }, _trigger: function (e, t, i) {
        var s, a, n = this._superApply(arguments);
        return n ? ("beforeActivate" === e ? (s = i.newTab.length ? i.newTab : i.oldTab, a = i.newPanel.length ? i.newPanel : i.oldPanel, n = this._super("select", t, {tab: s.find(".ui-tabs-anchor")[0], panel: a[0], index: s.closest("li").index()})) : "activate" === e && i.newTab.length && (n = this._super("show", t, {tab: i.newTab.find(".ui-tabs-anchor")[0], panel: i.newPanel[0], index: i.newTab.closest("li").index()})), n) : !1
    }}), e.widget("ui.tabs", e.ui.tabs, {select: function (e) {
        if (e = this._getIndex(e), -1 === e) {
            if (!this.options.collapsible || -1 === this.options.selected)return;
            e = this.options.selected
        }
        this.anchors.eq(e).trigger(this.options.event + this.eventNamespace)
    }}), function () {
        var t = 0;
        e.widget("ui.tabs", e.ui.tabs, {options: {cookie: null}, _create: function () {
            var e, t = this.options;
            null == t.active && t.cookie && (e = parseInt(this._cookie(), 10), -1 === e && (e = !1), t.active = e), this._super()
        }, _cookie: function (i) {
            var s = [this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + ++t)];
            return arguments.length && (s.push(i === !1 ? -1 : i), s.push(this.options.cookie)), e.cookie.apply(null, s)
        }, _refresh: function () {
            this._super(), this.options.cookie && this._cookie(this.options.active, this.options.cookie)
        }, _eventHandler: function () {
            this._superApply(arguments), this.options.cookie && this._cookie(this.options.active, this.options.cookie)
        }, _destroy: function () {
            this._super(), this.options.cookie && this._cookie(null, this.options.cookie)
        }})
    }(), e.widget("ui.tabs", e.ui.tabs, {_trigger: function (t, i, s) {
        var a = e.extend({}, s);
        return"load" === t && (a.panel = a.panel[0], a.tab = a.tab.find(".ui-tabs-anchor")[0]), this._super(t, i, a)
    }}), e.widget("ui.tabs", e.ui.tabs, {options: {fx: null}, _getFx: function () {
        var t, i, s = this.options.fx;
        return s && (e.isArray(s) ? (t = s[0], i = s[1]) : t = i = s), s ? {show: i, hide: t} : null
    }, _toggle: function (e, i) {
        function s() {
            n.running = !1, n._trigger("activate", e, i)
        }

        function a() {
            i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), r.length && h.show ? r.animate(h.show, h.show.duration, function () {
                s()
            }) : (r.show(), s())
        }

        var n = this, r = i.newPanel, o = i.oldPanel, h = this._getFx();
        return h ? (n.running = !0, o.length && h.hide ? o.animate(h.hide, h.hide.duration, function () {
            i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), a()
        }) : (i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), o.hide(), a()), t) : this._super(e, i)
    }}))
})(jQuery);
(function (e) {
    function t(t, i) {
        var s = (t.attr("aria-describedby") || "").split(/\s+/);
        s.push(i), t.data("ui-tooltip-id", i).attr("aria-describedby", e.trim(s.join(" ")))
    }

    function i(t) {
        var i = t.data("ui-tooltip-id"), s = (t.attr("aria-describedby") || "").split(/\s+/), a = e.inArray(i, s);
        -1 !== a && s.splice(a, 1), t.removeData("ui-tooltip-id"), s = e.trim(s.join(" ")), s ? t.attr("aria-describedby", s) : t.removeAttr("aria-describedby")
    }

    var s = 0;
    e.widget("ui.tooltip", {version: "1.9.2", options: {content: function () {
        return e(this).attr("title")
    }, hide: !0, items: "[title]:not([disabled])", position: {my: "left top+15", at: "left bottom", collision: "flipfit flip"}, show: !0, tooltipClass: null, track: !1, close: null, open: null}, _create: function () {
        this._on({mouseover: "open", focusin: "open"}), this.tooltips = {}, this.parents = {}, this.options.disabled && this._disable()
    }, _setOption: function (t, i) {
        var s = this;
        return"disabled" === t ? (this[i ? "_disable" : "_enable"](), this.options[t] = i, void 0) : (this._super(t, i), "content" === t && e.each(this.tooltips, function (e, t) {
            s._updateContent(t)
        }), void 0)
    }, _disable: function () {
        var t = this;
        e.each(this.tooltips, function (i, s) {
            var a = e.Event("blur");
            a.target = a.currentTarget = s[0], t.close(a, !0)
        }), this.element.find(this.options.items).andSelf().each(function () {
            var t = e(this);
            t.is("[title]") && t.data("ui-tooltip-title", t.attr("title")).attr("title", "")
        })
    }, _enable: function () {
        this.element.find(this.options.items).andSelf().each(function () {
            var t = e(this);
            t.data("ui-tooltip-title") && t.attr("title", t.data("ui-tooltip-title"))
        })
    }, open: function (t) {
        var i = this, s = e(t ? t.target : this.element).closest(this.options.items);
        s.length && !s.data("ui-tooltip-id") && (s.attr("title") && s.data("ui-tooltip-title", s.attr("title")), s.data("ui-tooltip-open", !0), t && "mouseover" === t.type && s.parents().each(function () {
            var t, s = e(this);
            s.data("ui-tooltip-open") && (t = e.Event("blur"), t.target = t.currentTarget = this, i.close(t, !0)), s.attr("title") && (s.uniqueId(), i.parents[this.id] = {element: this, title: s.attr("title")}, s.attr("title", ""))
        }), this._updateContent(s, t))
    }, _updateContent: function (e, t) {
        var i, s = this.options.content, a = this, n = t ? t.type : null;
        return"string" == typeof s ? this._open(t, e, s) : (i = s.call(e[0], function (i) {
            e.data("ui-tooltip-open") && a._delay(function () {
                t && (t.type = n), this._open(t, e, i)
            })
        }), i && this._open(t, e, i), void 0)
    }, _open: function (i, s, a) {
        function n(e) {
            l.of = e, r.is(":hidden") || r.position(l)
        }

        var r, o, h, l = e.extend({}, this.options.position);
        if (a) {
            if (r = this._find(s), r.length)return r.find(".ui-tooltip-content").html(a), void 0;
            s.is("[title]") && (i && "mouseover" === i.type ? s.attr("title", "") : s.removeAttr("title")), r = this._tooltip(s), t(s, r.attr("id")), r.find(".ui-tooltip-content").html(a), this.options.track && i && /^mouse/.test(i.type) ? (this._on(this.document, {mousemove: n}), n(i)) : r.position(e.extend({of: s}, this.options.position)), r.hide(), this._show(r, this.options.show), this.options.show && this.options.show.delay && (h = setInterval(function () {
                r.is(":visible") && (n(l.of), clearInterval(h))
            }, e.fx.interval)), this._trigger("open", i, {tooltip: r}), o = {keyup: function (t) {
                if (t.keyCode === e.ui.keyCode.ESCAPE) {
                    var i = e.Event(t);
                    i.currentTarget = s[0], this.close(i, !0)
                }
            }, remove: function () {
                this._removeTooltip(r)
            }}, i && "mouseover" !== i.type || (o.mouseleave = "close"), i && "focusin" !== i.type || (o.focusout = "close"), this._on(!0, s, o)
        }
    }, close: function (t) {
        var s = this, a = e(t ? t.currentTarget : this.element), n = this._find(a);
        this.closing || (a.data("ui-tooltip-title") && a.attr("title", a.data("ui-tooltip-title")), i(a), n.stop(!0), this._hide(n, this.options.hide, function () {
            s._removeTooltip(e(this))
        }), a.removeData("ui-tooltip-open"), this._off(a, "mouseleave focusout keyup"), a[0] !== this.element[0] && this._off(a, "remove"), this._off(this.document, "mousemove"), t && "mouseleave" === t.type && e.each(this.parents, function (t, i) {
            e(i.element).attr("title", i.title), delete s.parents[t]
        }), this.closing = !0, this._trigger("close", t, {tooltip: n}), this.closing = !1)
    }, _tooltip: function (t) {
        var i = "ui-tooltip-" + s++, a = e("<div>").attr({id: i, role: "tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || ""));
        return e("<div>").addClass("ui-tooltip-content").appendTo(a), a.appendTo(this.document[0].body), e.fn.bgiframe && a.bgiframe(), this.tooltips[i] = t, a
    }, _find: function (t) {
        var i = t.data("ui-tooltip-id");
        return i ? e("#" + i) : e()
    }, _removeTooltip: function (e) {
        e.remove(), delete this.tooltips[e.attr("id")]
    }, _destroy: function () {
        var t = this;
        e.each(this.tooltips, function (i, s) {
            var a = e.Event("blur");
            a.target = a.currentTarget = s[0], t.close(a, !0), e("#" + i).remove(), s.data("ui-tooltip-title") && (s.attr("title", s.data("ui-tooltip-title")), s.removeData("ui-tooltip-title"))
        })
    }})
})(jQuery);
jQuery.effects || function (e, t) {
    var i = e.uiBackCompat !== !1, a = "ui-effects-";
    e.effects = {effect: {}}, function (t, i) {
        function a(e, t, i) {
            var a = c[t.type] || {};
            return null == e ? i || !t.def ? null : t.def : (e = a.floor ? ~~e : parseFloat(e), isNaN(e) ? t.def : a.mod ? (e + a.mod) % a.mod : 0 > e ? 0 : e > a.max ? a.max : e)
        }

        function s(e) {
            var a = u(), s = a._rgba = [];
            return e = e.toLowerCase(), m(l, function (t, n) {
                var r, o = n.re.exec(e), h = o && n.parse(o), l = n.space || "rgba";
                return h ? (r = a[l](h), a[d[l].cache] = r[d[l].cache], s = a._rgba = r._rgba, !1) : i
            }), s.length ? ("0,0,0,0" === s.join() && t.extend(s, r.transparent), a) : r[e]
        }

        function n(e, t, i) {
            return i = (i + 1) % 1, 1 > 6 * i ? e + 6 * (t - e) * i : 1 > 2 * i ? t : 2 > 3 * i ? e + 6 * (t - e) * (2 / 3 - i) : e
        }

        var r, o = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "), h = /^([\-+])=\s*(\d+\.?\d*)/, l = [
            {re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function (e) {
                return[e[1], e[2], e[3], e[4]]
            }},
            {re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function (e) {
                return[2.55 * e[1], 2.55 * e[2], 2.55 * e[3], e[4]]
            }},
            {re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function (e) {
                return[parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)]
            }},
            {re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (e) {
                return[parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)]
            }},
            {re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function (e) {
                return[e[1], e[2] / 100, e[3] / 100, e[4]]
            }}
        ], u = t.Color = function (e, i, a, s) {
            return new t.Color.fn.parse(e, i, a, s)
        }, d = {rgba: {props: {red: {idx: 0, type: "byte"}, green: {idx: 1, type: "byte"}, blue: {idx: 2, type: "byte"}}}, hsla: {props: {hue: {idx: 0, type: "degrees"}, saturation: {idx: 1, type: "percent"}, lightness: {idx: 2, type: "percent"}}}}, c = {"byte": {floor: !0, max: 255}, percent: {max: 1}, degrees: {mod: 360, floor: !0}}, p = u.support = {}, f = t("<p>")[0], m = t.each;
        f.style.cssText = "background-color:rgba(1,1,1,.5)", p.rgba = f.style.backgroundColor.indexOf("rgba") > -1, m(d, function (e, t) {
            t.cache = "_" + e, t.props.alpha = {idx: 3, type: "percent", def: 1}
        }), u.fn = t.extend(u.prototype, {parse: function (n, o, h, l) {
            if (n === i)return this._rgba = [null, null, null, null], this;
            (n.jquery || n.nodeType) && (n = t(n).css(o), o = i);
            var c = this, p = t.type(n), f = this._rgba = [];
            return o !== i && (n = [n, o, h, l], p = "array"), "string" === p ? this.parse(s(n) || r._default) : "array" === p ? (m(d.rgba.props, function (e, t) {
                f[t.idx] = a(n[t.idx], t)
            }), this) : "object" === p ? (n instanceof u ? m(d, function (e, t) {
                n[t.cache] && (c[t.cache] = n[t.cache].slice())
            }) : m(d, function (t, i) {
                var s = i.cache;
                m(i.props, function (e, t) {
                    if (!c[s] && i.to) {
                        if ("alpha" === e || null == n[e])return;
                        c[s] = i.to(c._rgba)
                    }
                    c[s][t.idx] = a(n[e], t, !0)
                }), c[s] && 0 > e.inArray(null, c[s].slice(0, 3)) && (c[s][3] = 1, i.from && (c._rgba = i.from(c[s])))
            }), this) : i
        }, is: function (e) {
            var t = u(e), a = !0, s = this;
            return m(d, function (e, n) {
                var r, o = t[n.cache];
                return o && (r = s[n.cache] || n.to && n.to(s._rgba) || [], m(n.props, function (e, t) {
                    return null != o[t.idx] ? a = o[t.idx] === r[t.idx] : i
                })), a
            }), a
        }, _space: function () {
            var e = [], t = this;
            return m(d, function (i, a) {
                t[a.cache] && e.push(i)
            }), e.pop()
        }, transition: function (e, t) {
            var i = u(e), s = i._space(), n = d[s], r = 0 === this.alpha() ? u("transparent") : this, o = r[n.cache] || n.to(r._rgba), h = o.slice();
            return i = i[n.cache], m(n.props, function (e, s) {
                var n = s.idx, r = o[n], l = i[n], u = c[s.type] || {};
                null !== l && (null === r ? h[n] = l : (u.mod && (l - r > u.mod / 2 ? r += u.mod : r - l > u.mod / 2 && (r -= u.mod)), h[n] = a((l - r) * t + r, s)))
            }), this[s](h)
        }, blend: function (e) {
            if (1 === this._rgba[3])return this;
            var i = this._rgba.slice(), a = i.pop(), s = u(e)._rgba;
            return u(t.map(i, function (e, t) {
                return(1 - a) * s[t] + a * e
            }))
        }, toRgbaString: function () {
            var e = "rgba(", i = t.map(this._rgba, function (e, t) {
                return null == e ? t > 2 ? 1 : 0 : e
            });
            return 1 === i[3] && (i.pop(), e = "rgb("), e + i.join() + ")"
        }, toHslaString: function () {
            var e = "hsla(", i = t.map(this.hsla(), function (e, t) {
                return null == e && (e = t > 2 ? 1 : 0), t && 3 > t && (e = Math.round(100 * e) + "%"), e
            });
            return 1 === i[3] && (i.pop(), e = "hsl("), e + i.join() + ")"
        }, toHexString: function (e) {
            var i = this._rgba.slice(), a = i.pop();
            return e && i.push(~~(255 * a)), "#" + t.map(i,function (e) {
                return e = (e || 0).toString(16), 1 === e.length ? "0" + e : e
            }).join("")
        }, toString: function () {
            return 0 === this._rgba[3] ? "transparent" : this.toRgbaString()
        }}), u.fn.parse.prototype = u.fn, d.hsla.to = function (e) {
            if (null == e[0] || null == e[1] || null == e[2])return[null, null, null, e[3]];
            var t, i, a = e[0] / 255, s = e[1] / 255, n = e[2] / 255, r = e[3], o = Math.max(a, s, n), h = Math.min(a, s, n), l = o - h, u = o + h, d = .5 * u;
            return t = h === o ? 0 : a === o ? 60 * (s - n) / l + 360 : s === o ? 60 * (n - a) / l + 120 : 60 * (a - s) / l + 240, i = 0 === d || 1 === d ? d : .5 >= d ? l / u : l / (2 - u), [Math.round(t) % 360, i, d, null == r ? 1 : r]
        }, d.hsla.from = function (e) {
            if (null == e[0] || null == e[1] || null == e[2])return[null, null, null, e[3]];
            var t = e[0] / 360, i = e[1], a = e[2], s = e[3], r = .5 >= a ? a * (1 + i) : a + i - a * i, o = 2 * a - r;
            return[Math.round(255 * n(o, r, t + 1 / 3)), Math.round(255 * n(o, r, t)), Math.round(255 * n(o, r, t - 1 / 3)), s]
        }, m(d, function (e, s) {
            var n = s.props, r = s.cache, o = s.to, l = s.from;
            u.fn[e] = function (e) {
                if (o && !this[r] && (this[r] = o(this._rgba)), e === i)return this[r].slice();
                var s, h = t.type(e), d = "array" === h || "object" === h ? e : arguments, c = this[r].slice();
                return m(n, function (e, t) {
                    var i = d["object" === h ? e : t.idx];
                    null == i && (i = c[t.idx]), c[t.idx] = a(i, t)
                }), l ? (s = u(l(c)), s[r] = c, s) : u(c)
            }, m(n, function (i, a) {
                u.fn[i] || (u.fn[i] = function (s) {
                    var n, r = t.type(s), o = "alpha" === i ? this._hsla ? "hsla" : "rgba" : e, l = this[o](), u = l[a.idx];
                    return"undefined" === r ? u : ("function" === r && (s = s.call(this, u), r = t.type(s)), null == s && a.empty ? this : ("string" === r && (n = h.exec(s), n && (s = u + parseFloat(n[2]) * ("+" === n[1] ? 1 : -1))), l[a.idx] = s, this[o](l)))
                })
            })
        }), m(o, function (e, i) {
            t.cssHooks[i] = {set: function (e, a) {
                var n, r, o = "";
                if ("string" !== t.type(a) || (n = s(a))) {
                    if (a = u(n || a), !p.rgba && 1 !== a._rgba[3]) {
                        for (r = "backgroundColor" === i ? e.parentNode : e; ("" === o || "transparent" === o) && r && r.style;)try {
                            o = t.css(r, "backgroundColor"), r = r.parentNode
                        } catch (h) {
                        }
                        a = a.blend(o && "transparent" !== o ? o : "_default")
                    }
                    a = a.toRgbaString()
                }
                try {
                    e.style[i] = a
                } catch (l) {
                }
            }}, t.fx.step[i] = function (e) {
                e.colorInit || (e.start = u(e.elem, i), e.end = u(e.end), e.colorInit = !0), t.cssHooks[i].set(e.elem, e.start.transition(e.end, e.pos))
            }
        }), t.cssHooks.borderColor = {expand: function (e) {
            var t = {};
            return m(["Top", "Right", "Bottom", "Left"], function (i, a) {
                t["border" + a + "Color"] = e
            }), t
        }}, r = t.Color.names = {aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff"}
    }(jQuery), function () {
        function i() {
            var t, i, a = this.ownerDocument.defaultView ? this.ownerDocument.defaultView.getComputedStyle(this, null) : this.currentStyle, s = {};
            if (a && a.length && a[0] && a[a[0]])for (i = a.length; i--;)t = a[i], "string" == typeof a[t] && (s[e.camelCase(t)] = a[t]); else for (t in a)"string" == typeof a[t] && (s[t] = a[t]);
            return s
        }

        function a(t, i) {
            var a, s, r = {};
            for (a in i)s = i[a], t[a] !== s && (n[a] || (e.fx.step[a] || !isNaN(parseFloat(s))) && (r[a] = s));
            return r
        }

        var s = ["add", "remove", "toggle"], n = {border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1};
        e.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (t, i) {
            e.fx.step[i] = function (e) {
                ("none" !== e.end && !e.setAttr || 1 === e.pos && !e.setAttr) && (jQuery.style(e.elem, i, e.end), e.setAttr = !0)
            }
        }), e.effects.animateClass = function (t, n, r, o) {
            var h = e.speed(n, r, o);
            return this.queue(function () {
                var n, r = e(this), o = r.attr("class") || "", l = h.children ? r.find("*").andSelf() : r;
                l = l.map(function () {
                    var t = e(this);
                    return{el: t, start: i.call(this)}
                }), n = function () {
                    e.each(s, function (e, i) {
                        t[i] && r[i + "Class"](t[i])
                    })
                }, n(), l = l.map(function () {
                    return this.end = i.call(this.el[0]), this.diff = a(this.start, this.end), this
                }), r.attr("class", o), l = l.map(function () {
                    var t = this, i = e.Deferred(), a = jQuery.extend({}, h, {queue: !1, complete: function () {
                        i.resolve(t)
                    }});
                    return this.el.animate(this.diff, a), i.promise()
                }), e.when.apply(e, l.get()).done(function () {
                    n(), e.each(arguments, function () {
                        var t = this.el;
                        e.each(this.diff, function (e) {
                            t.css(e, "")
                        })
                    }), h.complete.call(r[0])
                })
            })
        }, e.fn.extend({_addClass: e.fn.addClass, addClass: function (t, i, a, s) {
            return i ? e.effects.animateClass.call(this, {add: t}, i, a, s) : this._addClass(t)
        }, _removeClass: e.fn.removeClass, removeClass: function (t, i, a, s) {
            return i ? e.effects.animateClass.call(this, {remove: t}, i, a, s) : this._removeClass(t)
        }, _toggleClass: e.fn.toggleClass, toggleClass: function (i, a, s, n, r) {
            return"boolean" == typeof a || a === t ? s ? e.effects.animateClass.call(this, a ? {add: i} : {remove: i}, s, n, r) : this._toggleClass(i, a) : e.effects.animateClass.call(this, {toggle: i}, a, s, n)
        }, switchClass: function (t, i, a, s, n) {
            return e.effects.animateClass.call(this, {add: i, remove: t}, a, s, n)
        }})
    }(), function () {
        function s(t, i, a, s) {
            return e.isPlainObject(t) && (i = t, t = t.effect), t = {effect: t}, null == i && (i = {}), e.isFunction(i) && (s = i, a = null, i = {}), ("number" == typeof i || e.fx.speeds[i]) && (s = a, a = i, i = {}), e.isFunction(a) && (s = a, a = null), i && e.extend(t, i), a = a || i.duration, t.duration = e.fx.off ? 0 : "number" == typeof a ? a : a in e.fx.speeds ? e.fx.speeds[a] : e.fx.speeds._default, t.complete = s || i.complete, t
        }

        function n(t) {
            return!t || "number" == typeof t || e.fx.speeds[t] ? !0 : "string" != typeof t || e.effects.effect[t] ? !1 : i && e.effects[t] ? !1 : !0
        }

        e.extend(e.effects, {version: "1.9.2", save: function (e, t) {
            for (var i = 0; t.length > i; i++)null !== t[i] && e.data(a + t[i], e[0].style[t[i]])
        }, restore: function (e, i) {
            var s, n;
            for (n = 0; i.length > n; n++)null !== i[n] && (s = e.data(a + i[n]), s === t && (s = ""), e.css(i[n], s))
        }, setMode: function (e, t) {
            return"toggle" === t && (t = e.is(":hidden") ? "show" : "hide"), t
        }, getBaseline: function (e, t) {
            var i, a;
            switch (e[0]) {
                case"top":
                    i = 0;
                    break;
                case"middle":
                    i = .5;
                    break;
                case"bottom":
                    i = 1;
                    break;
                default:
                    i = e[0] / t.height
            }
            switch (e[1]) {
                case"left":
                    a = 0;
                    break;
                case"center":
                    a = .5;
                    break;
                case"right":
                    a = 1;
                    break;
                default:
                    a = e[1] / t.width
            }
            return{x: a, y: i}
        }, createWrapper: function (t) {
            if (t.parent().is(".ui-effects-wrapper"))return t.parent();
            var i = {width: t.outerWidth(!0), height: t.outerHeight(!0), "float": t.css("float")}, a = e("<div></div>").addClass("ui-effects-wrapper").css({fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0}), s = {width: t.width(), height: t.height()}, n = document.activeElement;
            try {
                n.id
            } catch (r) {
                n = document.body
            }
            return t.wrap(a), (t[0] === n || e.contains(t[0], n)) && e(n).focus(), a = t.parent(), "static" === t.css("position") ? (a.css({position: "relative"}), t.css({position: "relative"})) : (e.extend(i, {position: t.css("position"), zIndex: t.css("z-index")}), e.each(["top", "left", "bottom", "right"], function (e, a) {
                i[a] = t.css(a), isNaN(parseInt(i[a], 10)) && (i[a] = "auto")
            }), t.css({position: "relative", top: 0, left: 0, right: "auto", bottom: "auto"})), t.css(s), a.css(i).show()
        }, removeWrapper: function (t) {
            var i = document.activeElement;
            return t.parent().is(".ui-effects-wrapper") && (t.parent().replaceWith(t), (t[0] === i || e.contains(t[0], i)) && e(i).focus()), t
        }, setTransition: function (t, i, a, s) {
            return s = s || {}, e.each(i, function (e, i) {
                var n = t.cssUnit(i);
                n[0] > 0 && (s[i] = n[0] * a + n[1])
            }), s
        }}), e.fn.extend({effect: function () {
            function t(t) {
                function i() {
                    e.isFunction(n) && n.call(s[0]), e.isFunction(t) && t()
                }

                var s = e(this), n = a.complete, r = a.mode;
                (s.is(":hidden") ? "hide" === r : "show" === r) ? i() : o.call(s[0], a, i)
            }

            var a = s.apply(this, arguments), n = a.mode, r = a.queue, o = e.effects.effect[a.effect], h = !o && i && e.effects[a.effect];
            return e.fx.off || !o && !h ? n ? this[n](a.duration, a.complete) : this.each(function () {
                a.complete && a.complete.call(this)
            }) : o ? r === !1 ? this.each(t) : this.queue(r || "fx", t) : h.call(this, {options: a, duration: a.duration, callback: a.complete, mode: a.mode})
        }, _show: e.fn.show, show: function (e) {
            if (n(e))return this._show.apply(this, arguments);
            var t = s.apply(this, arguments);
            return t.mode = "show", this.effect.call(this, t)
        }, _hide: e.fn.hide, hide: function (e) {
            if (n(e))return this._hide.apply(this, arguments);
            var t = s.apply(this, arguments);
            return t.mode = "hide", this.effect.call(this, t)
        }, __toggle: e.fn.toggle, toggle: function (t) {
            if (n(t) || "boolean" == typeof t || e.isFunction(t))return this.__toggle.apply(this, arguments);
            var i = s.apply(this, arguments);
            return i.mode = "toggle", this.effect.call(this, i)
        }, cssUnit: function (t) {
            var i = this.css(t), a = [];
            return e.each(["em", "px", "%", "pt"], function (e, t) {
                i.indexOf(t) > 0 && (a = [parseFloat(i), t])
            }), a
        }})
    }(), function () {
        var t = {};
        e.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (e, i) {
            t[i] = function (t) {
                return Math.pow(t, e + 2)
            }
        }), e.extend(t, {Sine: function (e) {
            return 1 - Math.cos(e * Math.PI / 2)
        }, Circ: function (e) {
            return 1 - Math.sqrt(1 - e * e)
        }, Elastic: function (e) {
            return 0 === e || 1 === e ? e : -Math.pow(2, 8 * (e - 1)) * Math.sin((80 * (e - 1) - 7.5) * Math.PI / 15)
        }, Back: function (e) {
            return e * e * (3 * e - 2)
        }, Bounce: function (e) {
            for (var t, i = 4; ((t = Math.pow(2, --i)) - 1) / 11 > e;);
            return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * t - 2) / 22 - e, 2)
        }}), e.each(t, function (t, i) {
            e.easing["easeIn" + t] = i, e.easing["easeOut" + t] = function (e) {
                return 1 - i(1 - e)
            }, e.easing["easeInOut" + t] = function (e) {
                return.5 > e ? i(2 * e) / 2 : 1 - i(-2 * e + 2) / 2
            }
        })
    }()
}(jQuery);
(function (e) {
    var t = /up|down|vertical/, i = /up|left|vertical|horizontal/;
    e.effects.effect.blind = function (a, s) {
        var n, r, o, l = e(this), h = ["position", "top", "bottom", "left", "right", "height", "width"], u = e.effects.setMode(l, a.mode || "hide"), d = a.direction || "up", c = t.test(d), p = c ? "height" : "width", m = c ? "top" : "left", f = i.test(d), g = {}, v = "show" === u;
        l.parent().is(".ui-effects-wrapper") ? e.effects.save(l.parent(), h) : e.effects.save(l, h), l.show(), n = e.effects.createWrapper(l).css({overflow: "hidden"}), r = n[p](), o = parseFloat(n.css(m)) || 0, g[p] = v ? r : 0, f || (l.css(c ? "bottom" : "right", 0).css(c ? "top" : "left", "auto").css({position: "absolute"}), g[m] = v ? o : r + o), v && (n.css(p, 0), f || n.css(m, o + r)), n.animate(g, {duration: a.duration, easing: a.easing, queue: !1, complete: function () {
            "hide" === u && l.hide(), e.effects.restore(l, h), e.effects.removeWrapper(l), s()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.bounce = function (t, i) {
        var a, s, n, r = e(this), o = ["position", "top", "bottom", "left", "right", "height", "width"], l = e.effects.setMode(r, t.mode || "effect"), h = "hide" === l, u = "show" === l, d = t.direction || "up", c = t.distance, p = t.times || 5, m = 2 * p + (u || h ? 1 : 0), f = t.duration / m, g = t.easing, v = "up" === d || "down" === d ? "top" : "left", y = "up" === d || "left" === d, b = r.queue(), _ = b.length;
        for ((u || h) && o.push("opacity"), e.effects.save(r, o), r.show(), e.effects.createWrapper(r), c || (c = r["top" === v ? "outerHeight" : "outerWidth"]() / 3), u && (n = {opacity: 1}, n[v] = 0, r.css("opacity", 0).css(v, y ? 2 * -c : 2 * c).animate(n, f, g)), h && (c /= Math.pow(2, p - 1)), n = {}, n[v] = 0, a = 0; p > a; a++)s = {}, s[v] = (y ? "-=" : "+=") + c, r.animate(s, f, g).animate(n, f, g), c = h ? 2 * c : c / 2;
        h && (s = {opacity: 0}, s[v] = (y ? "-=" : "+=") + c, r.animate(s, f, g)), r.queue(function () {
            h && r.hide(), e.effects.restore(r, o), e.effects.removeWrapper(r), i()
        }), _ > 1 && b.splice.apply(b, [1, 0].concat(b.splice(_, m + 1))), r.dequeue()
    }
})(jQuery);
(function (e) {
    e.effects.effect.clip = function (t, i) {
        var a, s, n, r = e(this), o = ["position", "top", "bottom", "left", "right", "height", "width"], l = e.effects.setMode(r, t.mode || "hide"), h = "show" === l, u = t.direction || "vertical", d = "vertical" === u, c = d ? "height" : "width", p = d ? "top" : "left", m = {};
        e.effects.save(r, o), r.show(), a = e.effects.createWrapper(r).css({overflow: "hidden"}), s = "IMG" === r[0].tagName ? a : r, n = s[c](), h && (s.css(c, 0), s.css(p, n / 2)), m[c] = h ? n : 0, m[p] = h ? 0 : n / 2, s.animate(m, {queue: !1, duration: t.duration, easing: t.easing, complete: function () {
            h || r.hide(), e.effects.restore(r, o), e.effects.removeWrapper(r), i()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.drop = function (t, i) {
        var a, s = e(this), n = ["position", "top", "bottom", "left", "right", "opacity", "height", "width"], r = e.effects.setMode(s, t.mode || "hide"), o = "show" === r, l = t.direction || "left", h = "up" === l || "down" === l ? "top" : "left", u = "up" === l || "left" === l ? "pos" : "neg", d = {opacity: o ? 1 : 0};
        e.effects.save(s, n), s.show(), e.effects.createWrapper(s), a = t.distance || s["top" === h ? "outerHeight" : "outerWidth"](!0) / 2, o && s.css("opacity", 0).css(h, "pos" === u ? -a : a), d[h] = (o ? "pos" === u ? "+=" : "-=" : "pos" === u ? "-=" : "+=") + a, s.animate(d, {queue: !1, duration: t.duration, easing: t.easing, complete: function () {
            "hide" === r && s.hide(), e.effects.restore(s, n), e.effects.removeWrapper(s), i()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.explode = function (t, i) {
        function a() {
            b.push(this), b.length === d * c && s()
        }

        function s() {
            p.css({visibility: "visible"}), e(b).remove(), m || p.hide(), i()
        }

        var n, r, o, l, h, u, d = t.pieces ? Math.round(Math.sqrt(t.pieces)) : 3, c = d, p = e(this), f = e.effects.setMode(p, t.mode || "hide"), m = "show" === f, g = p.show().css("visibility", "hidden").offset(), v = Math.ceil(p.outerWidth() / c), y = Math.ceil(p.outerHeight() / d), b = [];
        for (n = 0; d > n; n++)for (l = g.top + n * y, u = n - (d - 1) / 2, r = 0; c > r; r++)o = g.left + r * v, h = r - (c - 1) / 2, p.clone().appendTo("body").wrap("<div></div>").css({position: "absolute", visibility: "visible", left: -r * v, top: -n * y}).parent().addClass("ui-effects-explode").css({position: "absolute", overflow: "hidden", width: v, height: y, left: o + (m ? h * v : 0), top: l + (m ? u * y : 0), opacity: m ? 0 : 1}).animate({left: o + (m ? 0 : h * v), top: l + (m ? 0 : u * y), opacity: m ? 1 : 0}, t.duration || 500, t.easing, a)
    }
})(jQuery);
(function (e) {
    e.effects.effect.fade = function (t, i) {
        var a = e(this), s = e.effects.setMode(a, t.mode || "toggle");
        a.animate({opacity: s}, {queue: !1, duration: t.duration, easing: t.easing, complete: i})
    }
})(jQuery);
(function (e) {
    e.effects.effect.fold = function (t, i) {
        var a, s, n = e(this), r = ["position", "top", "bottom", "left", "right", "height", "width"], o = e.effects.setMode(n, t.mode || "hide"), l = "show" === o, h = "hide" === o, u = t.size || 15, d = /([0-9]+)%/.exec(u), c = !!t.horizFirst, p = l !== c, f = p ? ["width", "height"] : ["height", "width"], m = t.duration / 2, g = {}, v = {};
        e.effects.save(n, r), n.show(), a = e.effects.createWrapper(n).css({overflow: "hidden"}), s = p ? [a.width(), a.height()] : [a.height(), a.width()], d && (u = parseInt(d[1], 10) / 100 * s[h ? 0 : 1]), l && a.css(c ? {height: 0, width: u} : {height: u, width: 0}), g[f[0]] = l ? s[0] : u, v[f[1]] = l ? s[1] : 0, a.animate(g, m, t.easing).animate(v, m, t.easing, function () {
            h && n.hide(), e.effects.restore(n, r), e.effects.removeWrapper(n), i()
        })
    }
})(jQuery);
(function (e) {
    e.effects.effect.highlight = function (t, i) {
        var a = e(this), s = ["backgroundImage", "backgroundColor", "opacity"], n = e.effects.setMode(a, t.mode || "show"), r = {backgroundColor: a.css("backgroundColor")};
        "hide" === n && (r.opacity = 0), e.effects.save(a, s), a.show().css({backgroundImage: "none", backgroundColor: t.color || "#ffff99"}).animate(r, {queue: !1, duration: t.duration, easing: t.easing, complete: function () {
            "hide" === n && a.hide(), e.effects.restore(a, s), i()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.pulsate = function (t, i) {
        var a, s = e(this), n = e.effects.setMode(s, t.mode || "show"), r = "show" === n, o = "hide" === n, l = r || "hide" === n, h = 2 * (t.times || 5) + (l ? 1 : 0), u = t.duration / h, d = 0, c = s.queue(), p = c.length;
        for ((r || !s.is(":visible")) && (s.css("opacity", 0).show(), d = 1), a = 1; h > a; a++)s.animate({opacity: d}, u, t.easing), d = 1 - d;
        s.animate({opacity: d}, u, t.easing), s.queue(function () {
            o && s.hide(), i()
        }), p > 1 && c.splice.apply(c, [1, 0].concat(c.splice(p, h + 1))), s.dequeue()
    }
})(jQuery);
(function (e) {
    e.effects.effect.puff = function (t, i) {
        var a = e(this), s = e.effects.setMode(a, t.mode || "hide"), n = "hide" === s, r = parseInt(t.percent, 10) || 150, o = r / 100, h = {height: a.height(), width: a.width(), outerHeight: a.outerHeight(), outerWidth: a.outerWidth()};
        e.extend(t, {effect: "scale", queue: !1, fade: !0, mode: s, complete: i, percent: n ? r : 100, from: n ? h : {height: h.height * o, width: h.width * o, outerHeight: h.outerHeight * o, outerWidth: h.outerWidth * o}}), a.effect(t)
    }, e.effects.effect.scale = function (t, i) {
        var a = e(this), s = e.extend(!0, {}, t), n = e.effects.setMode(a, t.mode || "effect"), r = parseInt(t.percent, 10) || (0 === parseInt(t.percent, 10) ? 0 : "hide" === n ? 0 : 100), o = t.direction || "both", h = t.origin, l = {height: a.height(), width: a.width(), outerHeight: a.outerHeight(), outerWidth: a.outerWidth()}, u = {y: "horizontal" !== o ? r / 100 : 1, x: "vertical" !== o ? r / 100 : 1};
        s.effect = "size", s.queue = !1, s.complete = i, "effect" !== n && (s.origin = h || ["middle", "center"], s.restore = !0), s.from = t.from || ("show" === n ? {height: 0, width: 0, outerHeight: 0, outerWidth: 0} : l), s.to = {height: l.height * u.y, width: l.width * u.x, outerHeight: l.outerHeight * u.y, outerWidth: l.outerWidth * u.x}, s.fade && ("show" === n && (s.from.opacity = 0, s.to.opacity = 1), "hide" === n && (s.from.opacity = 1, s.to.opacity = 0)), a.effect(s)
    }, e.effects.effect.size = function (t, i) {
        var a, s, n, r = e(this), o = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"], h = ["position", "top", "bottom", "left", "right", "overflow", "opacity"], l = ["width", "height", "overflow"], u = ["fontSize"], d = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], c = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], p = e.effects.setMode(r, t.mode || "effect"), f = t.restore || "effect" !== p, m = t.scale || "both", g = t.origin || ["middle", "center"], v = r.css("position"), y = f ? o : h, b = {height: 0, width: 0, outerHeight: 0, outerWidth: 0};
        "show" === p && r.show(), a = {height: r.height(), width: r.width(), outerHeight: r.outerHeight(), outerWidth: r.outerWidth()}, "toggle" === t.mode && "show" === p ? (r.from = t.to || b, r.to = t.from || a) : (r.from = t.from || ("show" === p ? b : a), r.to = t.to || ("hide" === p ? b : a)), n = {from: {y: r.from.height / a.height, x: r.from.width / a.width}, to: {y: r.to.height / a.height, x: r.to.width / a.width}}, ("box" === m || "both" === m) && (n.from.y !== n.to.y && (y = y.concat(d), r.from = e.effects.setTransition(r, d, n.from.y, r.from), r.to = e.effects.setTransition(r, d, n.to.y, r.to)), n.from.x !== n.to.x && (y = y.concat(c), r.from = e.effects.setTransition(r, c, n.from.x, r.from), r.to = e.effects.setTransition(r, c, n.to.x, r.to))), ("content" === m || "both" === m) && n.from.y !== n.to.y && (y = y.concat(u).concat(l), r.from = e.effects.setTransition(r, u, n.from.y, r.from), r.to = e.effects.setTransition(r, u, n.to.y, r.to)), e.effects.save(r, y), r.show(), e.effects.createWrapper(r), r.css("overflow", "hidden").css(r.from), g && (s = e.effects.getBaseline(g, a), r.from.top = (a.outerHeight - r.outerHeight()) * s.y, r.from.left = (a.outerWidth - r.outerWidth()) * s.x, r.to.top = (a.outerHeight - r.to.outerHeight) * s.y, r.to.left = (a.outerWidth - r.to.outerWidth) * s.x), r.css(r.from), ("content" === m || "both" === m) && (d = d.concat(["marginTop", "marginBottom"]).concat(u), c = c.concat(["marginLeft", "marginRight"]), l = o.concat(d).concat(c), r.find("*[width]").each(function () {
            var i = e(this), a = {height: i.height(), width: i.width(), outerHeight: i.outerHeight(), outerWidth: i.outerWidth()};
            f && e.effects.save(i, l), i.from = {height: a.height * n.from.y, width: a.width * n.from.x, outerHeight: a.outerHeight * n.from.y, outerWidth: a.outerWidth * n.from.x}, i.to = {height: a.height * n.to.y, width: a.width * n.to.x, outerHeight: a.height * n.to.y, outerWidth: a.width * n.to.x}, n.from.y !== n.to.y && (i.from = e.effects.setTransition(i, d, n.from.y, i.from), i.to = e.effects.setTransition(i, d, n.to.y, i.to)), n.from.x !== n.to.x && (i.from = e.effects.setTransition(i, c, n.from.x, i.from), i.to = e.effects.setTransition(i, c, n.to.x, i.to)), i.css(i.from), i.animate(i.to, t.duration, t.easing, function () {
                f && e.effects.restore(i, l)
            })
        })), r.animate(r.to, {queue: !1, duration: t.duration, easing: t.easing, complete: function () {
            0 === r.to.opacity && r.css("opacity", r.from.opacity), "hide" === p && r.hide(), e.effects.restore(r, y), f || ("static" === v ? r.css({position: "relative", top: r.to.top, left: r.to.left}) : e.each(["top", "left"], function (e, t) {
                r.css(t, function (t, i) {
                    var a = parseInt(i, 10), s = e ? r.to.left : r.to.top;
                    return"auto" === i ? s + "px" : a + s + "px"
                })
            })), e.effects.removeWrapper(r), i()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.shake = function (t, i) {
        var a, s = e(this), n = ["position", "top", "bottom", "left", "right", "height", "width"], r = e.effects.setMode(s, t.mode || "effect"), o = t.direction || "left", h = t.distance || 20, l = t.times || 3, u = 2 * l + 1, d = Math.round(t.duration / u), c = "up" === o || "down" === o ? "top" : "left", p = "up" === o || "left" === o, f = {}, m = {}, g = {}, v = s.queue(), y = v.length;
        for (e.effects.save(s, n), s.show(), e.effects.createWrapper(s), f[c] = (p ? "-=" : "+=") + h, m[c] = (p ? "+=" : "-=") + 2 * h, g[c] = (p ? "-=" : "+=") + 2 * h, s.animate(f, d, t.easing), a = 1; l > a; a++)s.animate(m, d, t.easing).animate(g, d, t.easing);
        s.animate(m, d, t.easing).animate(f, d / 2, t.easing).queue(function () {
            "hide" === r && s.hide(), e.effects.restore(s, n), e.effects.removeWrapper(s), i()
        }), y > 1 && v.splice.apply(v, [1, 0].concat(v.splice(y, u + 1))), s.dequeue()
    }
})(jQuery);
(function (e) {
    e.effects.effect.slide = function (t, i) {
        var a, s = e(this), n = ["position", "top", "bottom", "left", "right", "width", "height"], r = e.effects.setMode(s, t.mode || "show"), o = "show" === r, h = t.direction || "left", l = "up" === h || "down" === h ? "top" : "left", u = "up" === h || "left" === h, d = {};
        e.effects.save(s, n), s.show(), a = t.distance || s["top" === l ? "outerHeight" : "outerWidth"](!0), e.effects.createWrapper(s).css({overflow: "hidden"}), o && s.css(l, u ? isNaN(a) ? "-" + a : -a : a), d[l] = (o ? u ? "+=" : "-=" : u ? "-=" : "+=") + a, s.animate(d, {queue: !1, duration: t.duration, easing: t.easing, complete: function () {
            "hide" === r && s.hide(), e.effects.restore(s, n), e.effects.removeWrapper(s), i()
        }})
    }
})(jQuery);
(function (e) {
    e.effects.effect.transfer = function (t, i) {
        var a = e(this), s = e(t.to), n = "fixed" === s.css("position"), r = e("body"), o = n ? r.scrollTop() : 0, h = n ? r.scrollLeft() : 0, l = s.offset(), u = {top: l.top - o, left: l.left - h, height: s.innerHeight(), width: s.innerWidth()}, d = a.offset(), c = e('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(t.className).css({top: d.top - o, left: d.left - h, height: a.innerHeight(), width: a.innerWidth(), position: n ? "fixed" : "absolute"}).animate(u, t.duration, t.easing, function () {
            c.remove(), i()
        })
    }
})(jQuery);
/* 
 * jqGrid  4.5.2 - jQuery Grid 
 * Copyright (c) 2008, Tony Tomov, tony@trirand.com 
 * Dual licensed under the MIT and GPL licenses 
 * http://www.opensource.org/licenses/mit-license.php 
 * http://www.gnu.org/licenses/gpl-2.0.html 
 * Date:2013-05-21 
 * Modules: grid.base.js; jquery.fmatter.js; grid.custom.js; grid.common.js; grid.formedit.js; grid.filter.js; grid.inlinedit.js; grid.celledit.js; jqModal.js; jqDnR.js; grid.subgrid.js; grid.grouping.js; grid.treegrid.js; grid.import.js; JsonXml.js; grid.tbltogrid.js; grid.jqueryui.js; 
 */


(function (b) {
    b.jgrid = b.jgrid || {};
    b.extend(b.jgrid, {version: "4.5.2", htmlDecode: function (b) {
        return b && ("&nbsp;" === b || "&#160;" === b || 1 === b.length && 160 === b.charCodeAt(0)) ? "" : !b ? b : ("" + b).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&")
    }, htmlEncode: function (b) {
        return!b ? b : ("" + b).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    }, format: function (d) {
        var f = b.makeArray(arguments).slice(1);
        null == d && (d = "");
        return d.replace(/\{(\d+)\}/g,
            function (b, e) {
                return f[e]
            })
    }, msie: "Microsoft Internet Explorer" === navigator.appName, msiever: function () {
        var b = -1;
        null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent) && (b = parseFloat(RegExp.$1));
        return b
    }, getCellIndex: function (d) {
        d = b(d);
        if (d.is("tr"))return-1;
        d = (!d.is("td") && !d.is("th") ? d.closest("td,th") : d)[0];
        return b.jgrid.msie ? b.inArray(d, d.parentNode.cells) : d.cellIndex
    }, stripHtml: function (b) {
        var b = "" + b, f = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
        return b ? (b = b.replace(f, "")) && "&nbsp;" !== b && "&#160;" !==
            b ? b.replace(/\"/g, "'") : "" : b
    }, stripPref: function (d, f) {
        var c = b.type(d);
        if ("string" === c || "number" === c)d = "" + d, f = "" !== d ? ("" + f).replace("" + d, "") : f;
        return f
    }, parse: function (d) {
        "while(1);" === d.substr(0, 9) && (d = d.substr(9));
        "/*" === d.substr(0, 2) && (d = d.substr(2, d.length - 4));
        d || (d = "{}");
        return!0 === b.jgrid.useJSON && "object" === typeof JSON && "function" === typeof JSON.parse ? JSON.parse(d) : eval("(" + d + ")")
    }, parseDate: function (d, f, c, e) {
        var a = /^\/Date\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\)\/$/, j = "string" === typeof f ?
            f.match(a) : null, a = function (a, b) {
            a = "" + a;
            for (b = parseInt(b, 10) || 2; a.length < b;)a = "0" + a;
            return a
        }, g = {m: 1, d: 1, y: 1970, h: 0, i: 0, s: 0, u: 0}, h = 0, i, k, h = function (a, b) {
            0 === a ? 12 === b && (b = 0) : 12 !== b && (b += 12);
            return b
        };
        void 0 === e && (e = b.jgrid.formatter.date);
        void 0 === e.parseRe && (e.parseRe = /[Tt\\\/:_;.,\t\s-]/);
        e.masks.hasOwnProperty(d) && (d = e.masks[d]);
        if (f && null != f)if (!isNaN(f - 0) && "u" === ("" + d).toLowerCase())h = new Date(1E3 * parseFloat(f)); else if (f.constructor === Date)h = f; else if (null !== j)h = new Date(parseInt(j[1], 10)), j[3] &&
            (d = 60 * Number(j[5]) + Number(j[6]), d *= "-" === j[4] ? 1 : -1, d -= h.getTimezoneOffset(), h.setTime(Number(Number(h) + 6E4 * d))); else {
            f = ("" + f).replace(/\\T/g, "T").replace(/\\t/, "t").split(e.parseRe);
            d = d.replace(/\\T/g, "T").replace(/\\t/, "t").split(e.parseRe);
            i = 0;
            for (k = d.length; i < k; i++)"M" === d[i] && (j = b.inArray(f[i], e.monthNames), -1 !== j && 12 > j && (f[i] = j + 1, g.m = f[i])), "F" === d[i] && (j = b.inArray(f[i], e.monthNames, 12), -1 !== j && 11 < j && (f[i] = j + 1 - 12, g.m = f[i])), "a" === d[i] && (j = b.inArray(f[i], e.AmPm), -1 !== j && 2 > j && f[i] === e.AmPm[j] &&
                (f[i] = j, g.h = h(f[i], g.h))), "A" === d[i] && (j = b.inArray(f[i], e.AmPm), -1 !== j && 1 < j && f[i] === e.AmPm[j] && (f[i] = j - 2, g.h = h(f[i], g.h))), "g" === d[i] && (g.h = parseInt(f[i], 10)), void 0 !== f[i] && (g[d[i].toLowerCase()] = parseInt(f[i], 10));
            g.f && (g.m = g.f);
            if (0 === g.m && 0 === g.y && 0 === g.d)return"&#160;";
            g.m = parseInt(g.m, 10) - 1;
            h = g.y;
            70 <= h && 99 >= h ? g.y = 1900 + g.y : 0 <= h && 69 >= h && (g.y = 2E3 + g.y);
            h = new Date(g.y, g.m, g.d, g.h, g.i, g.s, g.u)
        } else h = new Date(g.y, g.m, g.d, g.h, g.i, g.s, g.u);
        if (void 0 === c)return h;
        e.masks.hasOwnProperty(c) ? c = e.masks[c] :
            c || (c = "Y-m-d");
        d = h.getHours();
        f = h.getMinutes();
        g = h.getDate();
        j = h.getMonth() + 1;
        i = h.getTimezoneOffset();
        k = h.getSeconds();
        var l = h.getMilliseconds(), o = h.getDay(), n = h.getFullYear(), m = (o + 6) % 7 + 1, t = (new Date(n, j - 1, g) - new Date(n, 0, 1)) / 864E5, A = {d: a(g), D: e.dayNames[o], j: g, l: e.dayNames[o + 7], N: m, S: e.S(g), w: o, z: t, W: 5 > m ? Math.floor((t + m - 1) / 7) + 1 : Math.floor((t + m - 1) / 7) || (4 > ((new Date(n - 1, 0, 1)).getDay() + 6) % 7 ? 53 : 52), F: e.monthNames[j - 1 + 12], m: a(j), M: e.monthNames[j - 1], n: j, t: "?", L: "?", o: "?", Y: n, y: ("" + n).substring(2), a: 12 >
            d ? e.AmPm[0] : e.AmPm[1], A: 12 > d ? e.AmPm[2] : e.AmPm[3], B: "?", g: d % 12 || 12, G: d, h: a(d % 12 || 12), H: a(d), i: a(f), s: a(k), u: l, e: "?", I: "?", O: (0 < i ? "-" : "+") + a(100 * Math.floor(Math.abs(i) / 60) + Math.abs(i) % 60, 4), P: "?", T: (("" + h).match(/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g) || [""]).pop().replace(/[^-+\dA-Z]/g, ""), Z: "?", c: "?", r: "?", U: Math.floor(h / 1E3)};
        return c.replace(/\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g, function (a) {
            return A.hasOwnProperty(a) ?
                A[a] : a.substring(1)
        })
    }, jqID: function (b) {
        return("" + b).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&")
    }, guid: 1, uidPref: "jqg", randId: function (d) {
        return(d || b.jgrid.uidPref) + b.jgrid.guid++
    }, getAccessor: function (b, f) {
        var c, e, a = [], j;
        if ("function" === typeof f)return f(b);
        c = b[f];
        if (void 0 === c)try {
            if ("string" === typeof f && (a = f.split(".")), j = a.length)for (c = b; c && j--;)e = a.shift(), c = c[e]
        } catch (g) {
        }
        return c
    }, getXmlData: function (d, f, c) {
        var e = "string" === typeof f ? f.match(/^(.*)\[(\w+)\]$/) : null;
        if ("function" === typeof f)return f(d);
        if (e && e[2])return e[1] ? b(e[1], d).attr(e[2]) : b(d).attr(e[2]);
        d = b(f, d);
        return c ? d : 0 < d.length ? b(d).text() : void 0
    }, cellWidth: function () {
        var d = b("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;'></td></tr></table></div>"), f = d.appendTo("body").find("td").width();
        d.remove();
        return 5 !== f
    }, cell_width: !0, ajaxOptions: {}, from: function (d) {
        return new function (d, c) {
            "string" === typeof d && (d = b.data(d));
            var e =
                this, a = d, j = !0, g = !1, h = c, i = /[\$,%]/g, k = null, l = null, o = 0, n = !1, m = "", t = [], A = !0;
            if ("object" === typeof d && d.push)0 < d.length && (A = "object" !== typeof d[0] ? !1 : !0); else throw"data provides is not an array";
            this._hasData = function () {
                return null === a ? !1 : 0 === a.length ? !1 : !0
            };
            this._getStr = function (a) {
                var b = [];
                g && b.push("jQuery.trim(");
                b.push("String(" + a + ")");
                g && b.push(")");
                j || b.push(".toLowerCase()");
                return b.join("")
            };
            this._strComp = function (a) {
                return"string" === typeof a ? ".toString()" : ""
            };
            this._group = function (a, b) {
                return{field: a.toString(),
                    unique: b, items: []}
            };
            this._toStr = function (a) {
                g && (a = b.trim(a));
                a = a.toString().replace(/\\/g, "\\\\").replace(/\"/g, '\\"');
                return j ? a : a.toLowerCase()
            };
            this._funcLoop = function (e) {
                var d = [];
                b.each(a, function (a, b) {
                    d.push(e(b))
                });
                return d
            };
            this._append = function (a) {
                var b;
                h = null === h ? "" : h + ("" === m ? " && " : m);
                for (b = 0; b < o; b++)h += "(";
                n && (h += "!");
                h += "(" + a + ")";
                n = !1;
                m = "";
                o = 0
            };
            this._setCommand = function (a, b) {
                k = a;
                l = b
            };
            this._resetNegate = function () {
                n = !1
            };
            this._repeatCommand = function (a, b) {
                return null === k ? e : null !== a && null !==
                    b ? k(a, b) : null === l || !A ? k(a) : k(l, a)
            };
            this._equals = function (a, b) {
                return 0 === e._compare(a, b, 1)
            };
            this._compare = function (a, b, e) {
                var d = Object.prototype.toString;
                void 0 === e && (e = 1);
                void 0 === a && (a = null);
                void 0 === b && (b = null);
                if (null === a && null === b)return 0;
                if (null === a && null !== b)return 1;
                if (null !== a && null === b)return-1;
                if ("[object Date]" === d.call(a) && "[object Date]" === d.call(b))return a < b ? -e : a > b ? e : 0;
                !j && "number" !== typeof a && "number" !== typeof b && (a = "" + a, b = "" + b);
                return a < b ? -e : a > b ? e : 0
            };
            this._performSort = function () {
                0 !==
                    t.length && (a = e._doSort(a, 0))
            };
            this._doSort = function (a, b) {
                var d = t[b].by, g = t[b].dir, j = t[b].type, c = t[b].datefmt;
                if (b === t.length - 1)return e._getOrder(a, d, g, j, c);
                b++;
                for (var d = e._getGroup(a, d, g, j, c), g = [], f, j = 0; j < d.length; j++) {
                    f = e._doSort(d[j].items, b);
                    for (c = 0; c < f.length; c++)g.push(f[c])
                }
                return g
            };
            this._getOrder = function (a, d, g, c, f) {
                var h = [], k = [], l = "a" === g ? 1 : -1, o, n;
                void 0 === c && (c = "text");
                n = "float" === c || "number" === c || "currency" === c || "numeric" === c ? function (a) {
                    a = parseFloat(("" + a).replace(i, ""));
                    return isNaN(a) ?
                        0 : a
                } : "int" === c || "integer" === c ? function (a) {
                    return a ? parseFloat(("" + a).replace(i, "")) : 0
                } : "date" === c || "datetime" === c ? function (a) {
                    return b.jgrid.parseDate(f, a).getTime()
                } : b.isFunction(c) ? c : function (a) {
                    a = a ? b.trim("" + a) : "";
                    return j ? a : a.toLowerCase()
                };
                b.each(a, function (a, e) {
                    o = "" !== d ? b.jgrid.getAccessor(e, d) : e;
                    void 0 === o && (o = "");
                    o = n(o, e);
                    k.push({vSort: o, index: a})
                });
                k.sort(function (a, b) {
                    a = a.vSort;
                    b = b.vSort;
                    return e._compare(a, b, l)
                });
                for (var c = 0, m = a.length; c < m;)g = k[c].index, h.push(a[g]), c++;
                return h
            };
            this._getGroup =
                function (a, d, g, j, c) {
                    var f = [], h = null, i = null, k;
                    b.each(e._getOrder(a, d, g, j, c), function (a, g) {
                        k = b.jgrid.getAccessor(g, d);
                        null == k && (k = "");
                        e._equals(i, k) || (i = k, null !== h && f.push(h), h = e._group(d, k));
                        h.items.push(g)
                    });
                    null !== h && f.push(h);
                    return f
                };
            this.ignoreCase = function () {
                j = !1;
                return e
            };
            this.useCase = function () {
                j = !0;
                return e
            };
            this.trim = function () {
                g = !0;
                return e
            };
            this.noTrim = function () {
                g = !1;
                return e
            };
            this.execute = function () {
                var d = h, g = [];
                if (null === d)return e;
                b.each(a, function () {
                    eval(d) && g.push(this)
                });
                a = g;
                return e
            };
            this.data = function () {
                return a
            };
            this.select = function (d) {
                e._performSort();
                if (!e._hasData())return[];
                e.execute();
                if (b.isFunction(d)) {
                    var g = [];
                    b.each(a, function (a, b) {
                        g.push(d(b))
                    });
                    return g
                }
                return a
            };
            this.hasMatch = function () {
                if (!e._hasData())return!1;
                e.execute();
                return 0 < a.length
            };
            this.andNot = function (a, b, d) {
                n = !n;
                return e.and(a, b, d)
            };
            this.orNot = function (a, b, d) {
                n = !n;
                return e.or(a, b, d)
            };
            this.not = function (a, b, d) {
                return e.andNot(a, b, d)
            };
            this.and = function (a, b, d) {
                m = " && ";
                return void 0 === a ? e : e._repeatCommand(a,
                    b, d)
            };
            this.or = function (a, b, d) {
                m = " || ";
                return void 0 === a ? e : e._repeatCommand(a, b, d)
            };
            this.orBegin = function () {
                o++;
                return e
            };
            this.orEnd = function () {
                null !== h && (h += ")");
                return e
            };
            this.isNot = function (a) {
                n = !n;
                return e.is(a)
            };
            this.is = function (a) {
                e._append("this." + a);
                e._resetNegate();
                return e
            };
            this._compareValues = function (a, d, g, j, c) {
                var f;
                f = A ? "jQuery.jgrid.getAccessor(this,'" + d + "')" : "this";
                void 0 === g && (g = null);
                var h = g, k = void 0 === c.stype ? "text" : c.stype;
                if (null !== g)switch (k) {
                    case "int":
                    case "integer":
                        h = isNaN(Number(h)) ||
                            "" === h ? "0" : h;
                        f = "parseInt(" + f + ",10)";
                        h = "parseInt(" + h + ",10)";
                        break;
                    case "float":
                    case "number":
                    case "numeric":
                        h = ("" + h).replace(i, "");
                        h = isNaN(Number(h)) || "" === h ? "0" : h;
                        f = "parseFloat(" + f + ")";
                        h = "parseFloat(" + h + ")";
                        break;
                    case "date":
                    case "datetime":
                        h = "" + b.jgrid.parseDate(c.newfmt || "Y-m-d", h).getTime();
                        f = 'jQuery.jgrid.parseDate("' + c.srcfmt + '",' + f + ").getTime()";
                        break;
                    default:
                        f = e._getStr(f), h = e._getStr('"' + e._toStr(h) + '"')
                }
                e._append(f + " " + j + " " + h);
                e._setCommand(a, d);
                e._resetNegate();
                return e
            };
            this.equals = function (a, b, d) {
                return e._compareValues(e.equals, a, b, "==", d)
            };
            this.notEquals = function (a, b, d) {
                return e._compareValues(e.equals, a, b, "!==", d)
            };
            this.isNull = function (a, b, d) {
                return e._compareValues(e.equals, a, null, "===", d)
            };
            this.greater = function (a, b, d) {
                return e._compareValues(e.greater, a, b, ">", d)
            };
            this.less = function (a, b, d) {
                return e._compareValues(e.less, a, b, "<", d)
            };
            this.greaterOrEquals = function (a, b, d) {
                return e._compareValues(e.greaterOrEquals, a, b, ">=", d)
            };
            this.lessOrEquals = function (a, b, d) {
                return e._compareValues(e.lessOrEquals,
                    a, b, "<=", d)
            };
            this.startsWith = function (a, d) {
                var c = null == d ? a : d, c = g ? b.trim(c.toString()).length : c.toString().length;
                A ? e._append(e._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + ".substr(0," + c + ") == " + e._getStr('"' + e._toStr(d) + '"')) : (c = g ? b.trim(d.toString()).length : d.toString().length, e._append(e._getStr("this") + ".substr(0," + c + ") == " + e._getStr('"' + e._toStr(a) + '"')));
                e._setCommand(e.startsWith, a);
                e._resetNegate();
                return e
            };
            this.endsWith = function (a, d) {
                var c = null == d ? a : d, c = g ? b.trim(c.toString()).length :
                    c.toString().length;
                A ? e._append(e._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + ".substr(" + e._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + ".length-" + c + "," + c + ') == "' + e._toStr(d) + '"') : e._append(e._getStr("this") + ".substr(" + e._getStr("this") + '.length-"' + e._toStr(a) + '".length,"' + e._toStr(a) + '".length) == "' + e._toStr(a) + '"');
                e._setCommand(e.endsWith, a);
                e._resetNegate();
                return e
            };
            this.contains = function (a, b) {
                A ? e._append(e._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + '.indexOf("' + e._toStr(b) +
                    '",0) > -1') : e._append(e._getStr("this") + '.indexOf("' + e._toStr(a) + '",0) > -1');
                e._setCommand(e.contains, a);
                e._resetNegate();
                return e
            };
            this.groupBy = function (b, d, g, c) {
                return!e._hasData() ? null : e._getGroup(a, b, d, g, c)
            };
            this.orderBy = function (a, d, g, c) {
                d = null == d ? "a" : b.trim(d.toString().toLowerCase());
                null == g && (g = "text");
                null == c && (c = "Y-m-d");
                if ("desc" === d || "descending" === d)d = "d";
                if ("asc" === d || "ascending" === d)d = "a";
                t.push({by: a, dir: d, type: g, datefmt: c});
                return e
            };
            return e
        }(d, null)
    }, getMethod: function (d) {
        return this.getAccessor(b.fn.jqGrid,
            d)
    }, extend: function (d) {
        b.extend(b.fn.jqGrid, d);
        this.no_legacy_api || b.fn.extend(d)
    }});
    b.fn.jqGrid = function (d) {
        if ("string" === typeof d) {
            var f = b.jgrid.getMethod(d);
            if (!f)throw"jqGrid - No such method: " + d;
            var c = b.makeArray(arguments).slice(1);
            return f.apply(this, c)
        }
        return this.each(function () {
            if (!this.grid) {
                var e = b.extend(!0, {url: "", height: 150, page: 1, rowNum: 20, rowTotal: null, records: 0, pager: "", pgbuttons: !0, pginput: !0, colModel: [], rowList: [], colNames: [], sortorder: "asc", sortname: "", datatype: "xml", mtype: "GET",
                    altRows: !1, selarrrow: [], savedRow: [], shrinkToFit: !0, xmlReader: {}, jsonReader: {}, subGrid: !1, subGridModel: [], reccount: 0, lastpage: 0, lastsort: 0, selrow: null, beforeSelectRow: null, onSelectRow: null, onSortCol: null, ondblClickRow: null, onRightClickRow: null, onPaging: null, onSelectAll: null, onInitGrid: null, loadComplete: null, gridComplete: null, loadError: null, loadBeforeSend: null, afterInsertRow: null, beforeRequest: null, beforeProcessing: null, onHeaderClick: null, viewrecords: !1, loadonce: !1, multiselect: !1, multikey: !1, editurl: null,
                    search: !1, caption: "", hidegrid: !0, hiddengrid: !1, postData: {}, userData: {}, treeGrid: !1, treeGridModel: "nested", treeReader: {}, treeANode: -1, ExpandColumn: null, tree_root_level: 0, prmNames: {page: "page", rows: "rows", sort: "sidx", order: "sord", search: "_search", nd: "nd", id: "id", oper: "oper", editoper: "edit", addoper: "add", deloper: "del", subgridid: "id", npage: null, totalrows: "totalrows"}, forceFit: !1, gridstate: "visible", cellEdit: !1, cellsubmit: "remote", nv: 0, loadui: "enable", toolbar: [!1, ""], scroll: !1, multiboxonly: !1, deselectAfterSort: !0,
                    scrollrows: !1, autowidth: !1, scrollOffset: 18, cellLayout: 5, subGridWidth: 20, multiselectWidth: 20, gridview: !1, rownumWidth: 25, rownumbers: !1, pagerpos: "center", recordpos: "right", footerrow: !1, userDataOnFooter: !1, hoverrows: !0, altclass: "ui-priority-secondary", viewsortcols: [!1, "vertical", !0], resizeclass: "", autoencode: !1, remapColumns: [], ajaxGridOptions: {}, direction: "ltr", toppager: !1, headertitles: !1, scrollTimeout: 40, data: [], _index: {}, grouping: !1, groupingView: {groupField: [], groupOrder: [], groupText: [], groupColumnShow: [],
                        groupSummary: [], showSummaryOnHide: !1, sortitems: [], sortnames: [], summary: [], summaryval: [], plusicon: "ui-icon-circlesmall-plus", minusicon: "ui-icon-circlesmall-minus", displayField: []}, ignoreCase: !1, cmTemplate: {}, idPrefix: "", multiSort: !1}, b.jgrid.defaults, d || {}), a = this, c = {headers: [], cols: [], footers: [], dragStart: function (c, d, g) {
                    this.resizing = {idx: c, startX: d.clientX, sOL: g[0]};
                    this.hDiv.style.cursor = "col-resize";
                    this.curGbox = b("#rs_m" + b.jgrid.jqID(e.id), "#gbox_" + b.jgrid.jqID(e.id));
                    this.curGbox.css({display: "block",
                        left: g[0], top: g[1], height: g[2]});
                    b(a).triggerHandler("jqGridResizeStart", [d, c]);
                    b.isFunction(e.resizeStart) && e.resizeStart.call(a, d, c);
                    document.onselectstart = function () {
                        return!1
                    }
                }, dragMove: function (a) {
                    if (this.resizing) {
                        var b = a.clientX - this.resizing.startX, a = this.headers[this.resizing.idx], c = "ltr" === e.direction ? a.width + b : a.width - b, d;
                        33 < c && (this.curGbox.css({left: this.resizing.sOL + b}), !0 === e.forceFit ? (d = this.headers[this.resizing.idx + e.nv], b = "ltr" === e.direction ? d.width - b : d.width + b, 33 < b && (a.newWidth =
                            c, d.newWidth = b)) : (this.newWidth = "ltr" === e.direction ? e.tblwidth + b : e.tblwidth - b, a.newWidth = c))
                    }
                }, dragEnd: function () {
                    this.hDiv.style.cursor = "default";
                    if (this.resizing) {
                        var c = this.resizing.idx, d = this.headers[c].newWidth || this.headers[c].width, d = parseInt(d, 10);
                        this.resizing = !1;
                        b("#rs_m" + b.jgrid.jqID(e.id)).css("display", "none");
                        e.colModel[c].width = d;
                        this.headers[c].width = d;
                        this.headers[c].el.style.width = d + "px";
                        this.cols[c].style.width = d + "px";
                        0 < this.footers.length && (this.footers[c].style.width = d + "px");
                        !0 === e.forceFit ? (d = this.headers[c + e.nv].newWidth || this.headers[c + e.nv].width, this.headers[c + e.nv].width = d, this.headers[c + e.nv].el.style.width = d + "px", this.cols[c + e.nv].style.width = d + "px", 0 < this.footers.length && (this.footers[c + e.nv].style.width = d + "px"), e.colModel[c + e.nv].width = d) : (e.tblwidth = this.newWidth || e.tblwidth, b("table:first", this.bDiv).css("width", e.tblwidth + "px"), b("table:first", this.hDiv).css("width", e.tblwidth + "px"), this.hDiv.scrollLeft = this.bDiv.scrollLeft, e.footerrow && (b("table:first",
                            this.sDiv).css("width", e.tblwidth + "px"), this.sDiv.scrollLeft = this.bDiv.scrollLeft));
                        b(a).triggerHandler("jqGridResizeStop", [d, c]);
                        b.isFunction(e.resizeStop) && e.resizeStop.call(a, d, c)
                    }
                    this.curGbox = null;
                    document.onselectstart = function () {
                        return!0
                    }
                }, populateVisible: function () {
                    c.timer && clearTimeout(c.timer);
                    c.timer = null;
                    var a = b(c.bDiv).height();
                    if (a) {
                        var d = b("table:first", c.bDiv), g, f;
                        if (d[0].rows.length)try {
                            f = (g = d[0].rows[1]) ? b(g).outerHeight() || c.prevRowHeight : c.prevRowHeight
                        } catch (ua) {
                            f = c.prevRowHeight
                        }
                        if (f) {
                            c.prevRowHeight =
                                f;
                            var h = e.rowNum;
                            g = c.scrollTop = c.bDiv.scrollTop;
                            var i = Math.round(d.position().top) - g, k = i + d.height();
                            f *= h;
                            var z, F, y;
                            if (k < a && 0 >= i && (void 0 === e.lastpage || parseInt((k + g + f - 1) / f, 10) <= e.lastpage))F = parseInt((a - k + f - 1) / f, 10), 0 <= k || 2 > F || !0 === e.scroll ? (z = Math.round((k + g) / f) + 1, i = -1) : i = 1;
                            0 < i && (z = parseInt(g / f, 10) + 1, F = parseInt((g + a) / f, 10) + 2 - z, y = !0);
                            if (F && (!e.lastpage || !(z > e.lastpage || 1 === e.lastpage || z === e.page && z === e.lastpage)))c.hDiv.loading ? c.timer = setTimeout(c.populateVisible, e.scrollTimeout) : (e.page = z, y && (c.selectionPreserver(d[0]),
                                c.emptyRows.call(d[0], !1, !1)), c.populate(F))
                        }
                    }
                }, scrollGrid: function (a) {
                    if (e.scroll) {
                        var b = c.bDiv.scrollTop;
                        void 0 === c.scrollTop && (c.scrollTop = 0);
                        b !== c.scrollTop && (c.scrollTop = b, c.timer && clearTimeout(c.timer), c.timer = setTimeout(c.populateVisible, e.scrollTimeout))
                    }
                    c.hDiv.scrollLeft = c.bDiv.scrollLeft;
                    e.footerrow && (c.sDiv.scrollLeft = c.bDiv.scrollLeft);
                    a && a.stopPropagation()
                }, selectionPreserver: function (a) {
                    var c = a.p, d = c.selrow, e = c.selarrrow ? b.makeArray(c.selarrrow) : null, g = a.grid.bDiv.scrollLeft, f = function () {
                        var h;
                        c.selrow = null;
                        c.selarrrow = [];
                        if (c.multiselect && e && 0 < e.length)for (h = 0; h < e.length; h++)e[h] !== d && b(a).jqGrid("setSelection", e[h], !1, null);
                        d && b(a).jqGrid("setSelection", d, !1, null);
                        a.grid.bDiv.scrollLeft = g;
                        b(a).unbind(".selectionPreserver", f)
                    };
                    b(a).bind("jqGridGridComplete.selectionPreserver", f)
                }};
                if ("TABLE" !== this.tagName.toUpperCase())alert("Element is not a table"); else if (void 0 !== document.documentMode && 5 >= document.documentMode)alert("Grid can not be used in this ('quirks') mode!"); else {
                    b(this).empty().attr("tabindex",
                        "0");
                    this.p = e;
                    this.p.useProp = !!b.fn.prop;
                    var g, f;
                    if (0 === this.p.colNames.length)for (g = 0; g < this.p.colModel.length; g++)this.p.colNames[g] = this.p.colModel[g].label || this.p.colModel[g].name;
                    if (this.p.colNames.length !== this.p.colModel.length)alert(b.jgrid.errors.model); else {
                        var i = b("<div class='ui-jqgrid-view'></div>"), k = b.jgrid.msie;
                        a.p.direction = b.trim(a.p.direction.toLowerCase());
                        -1 === b.inArray(a.p.direction, ["ltr", "rtl"]) && (a.p.direction = "ltr");
                        f = a.p.direction;
                        b(i).insertBefore(this);
                        b(this).removeClass("scroll").appendTo(i);
                        var l = b("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>");
                        b(l).attr({id: "gbox_" + this.id, dir: f}).insertBefore(i);
                        b(i).attr("id", "gview_" + this.id).appendTo(l);
                        b("<div class='ui-widget-overlay jqgrid-overlay' id='lui_" + this.id + "'></div>").insertBefore(i);
                        b("<div class='loading ui-state-default ui-state-active' id='load_" + this.id + "'>" + this.p.loadtext + "</div>").insertBefore(i);
                        b(this).attr({cellspacing: "0", cellpadding: "0", border: "0", role: "grid", "aria-multiselectable": !!this.p.multiselect,
                            "aria-labelledby": "gbox_" + this.id});
                        var o = function (a, b) {
                            a = parseInt(a, 10);
                            return isNaN(a) ? b || 0 : a
                        }, n = function (d, e, g, f, h, i) {
                            var R = a.p.colModel[d], k = R.align, z = 'style="', F = R.classes, y = R.name, G = [];
                            k && (z = z + ("text-align:" + k + ";"));
                            R.hidden === true && (z = z + "display:none;");
                            if (e === 0)z = z + ("width: " + c.headers[d].width + "px;"); else if (R.cellattr && b.isFunction(R.cellattr))if ((d = R.cellattr.call(a, h, g, f, R, i)) && typeof d === "string") {
                                d = d.replace(/style/i, "style").replace(/title/i, "title");
                                if (d.indexOf("title") > -1)R.title =
                                    false;
                                d.indexOf("class") > -1 && (F = void 0);
                                G = d.split(/[^-]style/);
                                if (G.length === 2) {
                                    G[1] = b.trim(G[1].replace("=", ""));
                                    if (G[1].indexOf("'") === 0 || G[1].indexOf('"') === 0)G[1] = G[1].substring(1);
                                    z = z + G[1].replace(/'/gi, '"')
                                } else z = z + '"'
                            }
                            if (!G.length) {
                                G[0] = "";
                                z = z + '"'
                            }
                            z = z + ((F !== void 0 ? ' class="' + F + '"' : "") + (R.title && g ? ' title="' + b.jgrid.stripHtml(g) + '"' : ""));
                            z = z + (' aria-describedby="' + a.p.id + "_" + y + '"');
                            return z + G[0]
                        }, m = function (c) {
                            return c == null || c === "" ? "&#160;" : a.p.autoencode ? b.jgrid.htmlEncode(c) : "" + c
                        }, t = function (c, d, e, g, f) {
                            var h = a.p.colModel[e];
                            if (h.formatter !== void 0) {
                                c = "" + a.p.idPrefix !== "" ? b.jgrid.stripPref(a.p.idPrefix, c) : c;
                                c = {rowId: c, colModel: h, gid: a.p.id, pos: e};
                                d = b.isFunction(h.formatter) ? h.formatter.call(a, d, c, g, f) : b.fmatter ? b.fn.fmatter.call(a, h.formatter, d, c, g, f) : m(d)
                            } else d = m(d);
                            return d
                        }, A = function (a, b, c, d, e, g) {
                            b = t(a, b, c, e, "add");
                            return'<td role="gridcell" ' + n(c, d, b, e, a, g) + ">" + b + "</td>"
                        }, T = function (b, c, d, e) {
                            e = '<input role="checkbox" type="checkbox" id="jqg_' + a.p.id + "_" + b + '" class="cbox" name="jqg_' +
                                a.p.id + "_" + b + '"' + (e ? 'checked="checked"' : "") + "/>";
                            return'<td role="gridcell" ' + n(c, d, "", null, b, true) + ">" + e + "</td>"
                        }, M = function (a, b, c, d) {
                            c = (parseInt(c, 10) - 1) * parseInt(d, 10) + 1 + b;
                            return'<td role="gridcell" class="ui-state-default jqgrid-rownum" ' + n(a, b, c, null, b, true) + ">" + c + "</td>"
                        }, $ = function (b) {
                            var c, d = [], e = 0, g;
                            for (g = 0; g < a.p.colModel.length; g++) {
                                c = a.p.colModel[g];
                                if (c.name !== "cb" && c.name !== "subgrid" && c.name !== "rn") {
                                    d[e] = b === "local" ? c.name : b === "xml" || b === "xmlstring" ? c.xmlmap || c.name : c.jsonmap || c.name;
                                    e++
                                }
                            }
                            return d
                        }, U = function (c) {
                            var d = a.p.remapColumns;
                            if (!d || !d.length)d = b.map(a.p.colModel, function (a, b) {
                                return b
                            });
                            c && (d = b.map(d, function (a) {
                                return a < c ? null : a - c
                            }));
                            return d
                        }, V = function (a, c) {
                            var d;
                            if (this.p.deepempty)b(this.rows).slice(1).remove(); else {
                                d = this.rows.length > 0 ? this.rows[0] : null;
                                b(this.firstChild).empty().append(d)
                            }
                            if (a && this.p.scroll) {
                                b(this.grid.bDiv.firstChild).css({height: "auto"});
                                b(this.grid.bDiv.firstChild.firstChild).css({height: 0, display: "none"});
                                if (this.grid.bDiv.scrollTop !== 0)this.grid.bDiv.scrollTop =
                                    0
                            }
                            if (c === true && this.p.treeGrid) {
                                this.p.data = [];
                                this.p._index = {}
                            }
                        }, N = function () {
                            var c = a.p.data.length, d, e, g;
                            d = a.p.rownumbers === true ? 1 : 0;
                            e = a.p.multiselect === true ? 1 : 0;
                            g = a.p.subGrid === true ? 1 : 0;
                            d = a.p.keyIndex === false || a.p.loadonce === true ? a.p.localReader.id : a.p.colModel[a.p.keyIndex + e + g + d].name;
                            for (e = 0; e < c; e++) {
                                g = b.jgrid.getAccessor(a.p.data[e], d);
                                g === void 0 && (g = "" + (e + 1));
                                a.p._index[g] = e
                            }
                        }, X = function (c, d, e, g, f, h) {
                            var j = "-1", i = "", k, d = d ? "display:none;" : "", e = "ui-widget-content jqgrow ui-row-" + a.p.direction +
                                (e ? " " + e : "") + (h ? " ui-state-highlight" : ""), h = b(a).triggerHandler("jqGridRowAttr", [g, f, c]);
                            typeof h !== "object" && (h = b.isFunction(a.p.rowattr) ? a.p.rowattr.call(a, g, f, c) : {});
                            if (!b.isEmptyObject(h)) {
                                if (h.hasOwnProperty("id")) {
                                    c = h.id;
                                    delete h.id
                                }
                                if (h.hasOwnProperty("tabindex")) {
                                    j = h.tabindex;
                                    delete h.tabindex
                                }
                                if (h.hasOwnProperty("style")) {
                                    d = d + h.style;
                                    delete h.style
                                }
                                if (h.hasOwnProperty("class")) {
                                    e = e + (" " + h["class"]);
                                    delete h["class"]
                                }
                                try {
                                    delete h.role
                                } catch (F) {
                                }
                                for (k in h)h.hasOwnProperty(k) && (i = i + (" " + k +
                                    "=" + h[k]))
                            }
                            return'<tr role="row" id="' + c + '" tabindex="' + j + '" class="' + e + '"' + (d === "" ? "" : ' style="' + d + '"') + i + ">"
                        }, J = function (c, d, e, g, f) {
                            var h = new Date, j = a.p.datatype !== "local" && a.p.loadonce || a.p.datatype === "xmlstring", i = a.p.xmlReader, k = a.p.datatype === "local" ? "local" : "xml";
                            if (j) {
                                a.p.data = [];
                                a.p._index = {};
                                a.p.localReader.id = "_id_"
                            }
                            a.p.reccount = 0;
                            if (b.isXMLDoc(c)) {
                                if (a.p.treeANode === -1 && !a.p.scroll) {
                                    V.call(a, false, true);
                                    e = 1
                                } else e = e > 1 ? e : 1;
                                var F = b(a), y, G, l = 0, o, s = a.p.multiselect === true ? 1 : 0, u = 0, n, m = a.p.rownumbers ===
                                    true ? 1 : 0, t, p = [], E, q = {}, x, D, r = [], K = a.p.altRows === true ? a.p.altclass : "", v;
                                if (a.p.subGrid === true) {
                                    u = 1;
                                    n = b.jgrid.getMethod("addSubGridCell")
                                }
                                i.repeatitems || (p = $(k));
                                t = a.p.keyIndex === false ? b.isFunction(i.id) ? i.id.call(a, c) : i.id : a.p.keyIndex;
                                if (p.length > 0 && !isNaN(t)) {
                                    a.p.remapColumns && a.p.remapColumns.length && (t = b.inArray(t, a.p.remapColumns));
                                    t = p[t]
                                }
                                k = ("" + t).indexOf("[") === -1 ? p.length ? function (a, c) {
                                    return b(t, a).text() || c
                                } : function (a, c) {
                                    return b(i.cell, a).eq(t).text() || c
                                } : function (a, b) {
                                    return a.getAttribute(t.replace(/[\[\]]/g,
                                        "")) || b
                                };
                                a.p.userData = {};
                                a.p.page = b.jgrid.getXmlData(c, i.page) || a.p.page || 0;
                                a.p.lastpage = b.jgrid.getXmlData(c, i.total);
                                if (a.p.lastpage === void 0)a.p.lastpage = 1;
                                a.p.records = b.jgrid.getXmlData(c, i.records) || 0;
                                b.isFunction(i.userdata) ? a.p.userData = i.userdata.call(a, c) || {} : b.jgrid.getXmlData(c, i.userdata, true).each(function () {
                                    a.p.userData[this.getAttribute("name")] = b(this).text()
                                });
                                c = b.jgrid.getXmlData(c, i.root, true);
                                (c = b.jgrid.getXmlData(c, i.row, true)) || (c = []);
                                var w = c.length, L = 0, B = [], C = parseInt(a.p.rowNum,
                                    10), H = a.p.scroll ? b.jgrid.randId() : 1;
                                if (w > 0 && a.p.page <= 0)a.p.page = 1;
                                if (c && w) {
                                    f && (C = C * (f + 1));
                                    var f = b.isFunction(a.p.afterInsertRow), J = false, I;
                                    if (a.p.grouping) {
                                        J = a.p.groupingView.groupCollapse === true;
                                        I = b.jgrid.getMethod("groupingPrepare")
                                    }
                                    for (; L < w;) {
                                        x = c[L];
                                        D = k(x, H + L);
                                        D = a.p.idPrefix + D;
                                        y = e === 0 ? 0 : e + 1;
                                        v = (y + L) % 2 === 1 ? K : "";
                                        var O = r.length;
                                        r.push("");
                                        m && r.push(M(0, L, a.p.page, a.p.rowNum));
                                        s && r.push(T(D, m, L, false));
                                        u && r.push(n.call(F, s + m, L + e));
                                        if (i.repeatitems) {
                                            E || (E = U(s + u + m));
                                            var N = b.jgrid.getXmlData(x, i.cell,
                                                true);
                                            b.each(E, function (b) {
                                                var c = N[this];
                                                if (!c)return false;
                                                o = c.textContent || c.text;
                                                q[a.p.colModel[b + s + u + m].name] = o;
                                                r.push(A(D, o, b + s + u + m, L + e, x, q))
                                            })
                                        } else for (y = 0; y < p.length; y++) {
                                            o = b.jgrid.getXmlData(x, p[y]);
                                            q[a.p.colModel[y + s + u + m].name] = o;
                                            r.push(A(D, o, y + s + u + m, L + e, x, q))
                                        }
                                        r[O] = X(D, J, v, q, x, false);
                                        r.push("</tr>");
                                        if (a.p.grouping) {
                                            B = I.call(F, r, B, q, L);
                                            r = []
                                        }
                                        if (j || a.p.treeGrid === true) {
                                            q._id_ = b.jgrid.stripPref(a.p.idPrefix, D);
                                            a.p.data.push(q);
                                            a.p._index[q._id_] = a.p.data.length - 1
                                        }
                                        if (a.p.gridview === false) {
                                            b("tbody:first",
                                                d).append(r.join(""));
                                            F.triggerHandler("jqGridAfterInsertRow", [D, q, x]);
                                            f && a.p.afterInsertRow.call(a, D, q, x);
                                            r = []
                                        }
                                        q = {};
                                        l++;
                                        L++;
                                        if (l === C)break
                                    }
                                }
                                if (a.p.gridview === true) {
                                    G = a.p.treeANode > -1 ? a.p.treeANode : 0;
                                    if (a.p.grouping) {
                                        F.jqGrid("groupingRender", B, a.p.colModel.length);
                                        B = null
                                    } else a.p.treeGrid === true && G > 0 ? b(a.rows[G]).after(r.join("")) : b("tbody:first", d).append(r.join(""))
                                }
                                if (a.p.subGrid === true)try {
                                    F.jqGrid("addSubGrid", s + m)
                                } catch (Q) {
                                }
                                a.p.totaltime = new Date - h;
                                if (l > 0 && a.p.records === 0)a.p.records = w;
                                r = null;
                                if (a.p.treeGrid === true)try {
                                    F.jqGrid("setTreeNode", G + 1, l + G + 1)
                                } catch (S) {
                                }
                                if (!a.p.treeGrid && !a.p.scroll)a.grid.bDiv.scrollTop = 0;
                                a.p.reccount = l;
                                a.p.treeANode = -1;
                                a.p.userDataOnFooter && F.jqGrid("footerData", "set", a.p.userData, true);
                                if (j) {
                                    a.p.records = w;
                                    a.p.lastpage = Math.ceil(w / C)
                                }
                                g || a.updatepager(false, true);
                                if (j)for (; l < w;) {
                                    x = c[l];
                                    D = k(x, l + H);
                                    D = a.p.idPrefix + D;
                                    if (i.repeatitems) {
                                        E || (E = U(s + u + m));
                                        var P = b.jgrid.getXmlData(x, i.cell, true);
                                        b.each(E, function (b) {
                                            var c = P[this];
                                            if (!c)return false;
                                            o = c.textContent || c.text;
                                            q[a.p.colModel[b + s + u + m].name] = o
                                        })
                                    } else for (y = 0; y < p.length; y++) {
                                        o = b.jgrid.getXmlData(x, p[y]);
                                        q[a.p.colModel[y + s + u + m].name] = o
                                    }
                                    q._id_ = b.jgrid.stripPref(a.p.idPrefix, D);
                                    a.p.data.push(q);
                                    a.p._index[q._id_] = a.p.data.length - 1;
                                    q = {};
                                    l++
                                }
                            }
                        }, S = function (c, d, e, g, f) {
                            var h = new Date;
                            if (c) {
                                if (a.p.treeANode === -1 && !a.p.scroll) {
                                    V.call(a, false, true);
                                    e = 1
                                } else e = e > 1 ? e : 1;
                                var i, j = a.p.datatype !== "local" && a.p.loadonce || a.p.datatype === "jsonstring";
                                if (j) {
                                    a.p.data = [];
                                    a.p._index = {};
                                    a.p.localReader.id = "_id_"
                                }
                                a.p.reccount = 0;
                                if (a.p.datatype ===
                                    "local") {
                                    d = a.p.localReader;
                                    i = "local"
                                } else {
                                    d = a.p.jsonReader;
                                    i = "json"
                                }
                                var k = b(a), l = 0, y, o, n, m = [], s = a.p.multiselect ? 1 : 0, u = a.p.subGrid === true ? 1 : 0, t, p = a.p.rownumbers === true ? 1 : 0, w = U(s + u + p);
                                i = $(i);
                                var v, E, q, x = {}, D, r, K = [], B = a.p.altRows === true ? a.p.altclass : "", C;
                                a.p.page = b.jgrid.getAccessor(c, d.page) || a.p.page || 0;
                                E = b.jgrid.getAccessor(c, d.total);
                                u && (t = b.jgrid.getMethod("addSubGridCell"));
                                a.p.lastpage = E === void 0 ? 1 : E;
                                a.p.records = b.jgrid.getAccessor(c, d.records) || 0;
                                a.p.userData = b.jgrid.getAccessor(c, d.userdata) ||
                                {};
                                q = a.p.keyIndex === false ? b.isFunction(d.id) ? d.id.call(a, c) : d.id : a.p.keyIndex;
                                if (!d.repeatitems) {
                                    m = i;
                                    if (m.length > 0 && !isNaN(q)) {
                                        a.p.remapColumns && a.p.remapColumns.length && (q = b.inArray(q, a.p.remapColumns));
                                        q = m[q]
                                    }
                                }
                                E = b.jgrid.getAccessor(c, d.root);
                                E == null && b.isArray(c) && (E = c);
                                E || (E = []);
                                c = E.length;
                                o = 0;
                                if (c > 0 && a.p.page <= 0)a.p.page = 1;
                                var L = parseInt(a.p.rowNum, 10), H = a.p.scroll ? b.jgrid.randId() : 1, J = false, I;
                                f && (L = L * (f + 1));
                                a.p.datatype === "local" && !a.p.deselectAfterSort && (J = true);
                                var O = b.isFunction(a.p.afterInsertRow),
                                    N = [], P = false, Q;
                                if (a.p.grouping) {
                                    P = a.p.groupingView.groupCollapse === true;
                                    Q = b.jgrid.getMethod("groupingPrepare")
                                }
                                for (; o < c;) {
                                    f = E[o];
                                    r = b.jgrid.getAccessor(f, q);
                                    if (r === void 0) {
                                        typeof q === "number" && a.p.colModel[q + s + u + p] != null && (r = b.jgrid.getAccessor(f, a.p.colModel[q + s + u + p].name));
                                        if (r === void 0) {
                                            r = H + o;
                                            if (m.length === 0 && d.cell) {
                                                y = b.jgrid.getAccessor(f, d.cell) || f;
                                                r = y != null && y[q] !== void 0 ? y[q] : r
                                            }
                                        }
                                    }
                                    r = a.p.idPrefix + r;
                                    y = e === 1 ? 0 : e;
                                    C = (y + o) % 2 === 1 ? B : "";
                                    J && (I = a.p.multiselect ? b.inArray(r, a.p.selarrrow) !== -1 : r === a.p.selrow);
                                    var S = K.length;
                                    K.push("");
                                    p && K.push(M(0, o, a.p.page, a.p.rowNum));
                                    s && K.push(T(r, p, o, I));
                                    u && K.push(t.call(k, s + p, o + e));
                                    v = i;
                                    if (d.repeatitems) {
                                        d.cell && (f = b.jgrid.getAccessor(f, d.cell) || f);
                                        b.isArray(f) && (v = w)
                                    }
                                    for (n = 0; n < v.length; n++) {
                                        y = b.jgrid.getAccessor(f, v[n]);
                                        x[a.p.colModel[n + s + u + p].name] = y;
                                        K.push(A(r, y, n + s + u + p, o + e, f, x))
                                    }
                                    K[S] = X(r, P, C, x, f, I);
                                    K.push("</tr>");
                                    if (a.p.grouping) {
                                        N = Q.call(k, K, N, x, o);
                                        K = []
                                    }
                                    if (j || a.p.treeGrid === true) {
                                        x._id_ = b.jgrid.stripPref(a.p.idPrefix, r);
                                        a.p.data.push(x);
                                        a.p._index[x._id_] =
                                            a.p.data.length - 1
                                    }
                                    if (a.p.gridview === false) {
                                        b("#" + b.jgrid.jqID(a.p.id) + " tbody:first").append(K.join(""));
                                        k.triggerHandler("jqGridAfterInsertRow", [r, x, f]);
                                        O && a.p.afterInsertRow.call(a, r, x, f);
                                        K = []
                                    }
                                    x = {};
                                    l++;
                                    o++;
                                    if (l === L)break
                                }
                                if (a.p.gridview === true) {
                                    D = a.p.treeANode > -1 ? a.p.treeANode : 0;
                                    a.p.grouping ? k.jqGrid("groupingRender", N, a.p.colModel.length) : a.p.treeGrid === true && D > 0 ? b(a.rows[D]).after(K.join("")) : b("#" + b.jgrid.jqID(a.p.id) + " tbody:first").append(K.join(""))
                                }
                                if (a.p.subGrid === true)try {
                                    k.jqGrid("addSubGrid",
                                        s + p)
                                } catch (aa) {
                                }
                                a.p.totaltime = new Date - h;
                                if (l > 0 && a.p.records === 0)a.p.records = c;
                                if (a.p.treeGrid === true)try {
                                    k.jqGrid("setTreeNode", D + 1, l + D + 1)
                                } catch (W) {
                                }
                                if (!a.p.treeGrid && !a.p.scroll)a.grid.bDiv.scrollTop = 0;
                                a.p.reccount = l;
                                a.p.treeANode = -1;
                                a.p.userDataOnFooter && k.jqGrid("footerData", "set", a.p.userData, true);
                                if (j) {
                                    a.p.records = c;
                                    a.p.lastpage = Math.ceil(c / L)
                                }
                                g || a.updatepager(false, true);
                                if (j)for (; l < c && E[l];) {
                                    f = E[l];
                                    r = b.jgrid.getAccessor(f, q);
                                    if (r === void 0) {
                                        typeof q === "number" && a.p.colModel[q + s + u + p] != null &&
                                        (r = b.jgrid.getAccessor(f, a.p.colModel[q + s + u + p].name));
                                        if (r === void 0) {
                                            r = H + l;
                                            if (m.length === 0 && d.cell) {
                                                e = b.jgrid.getAccessor(f, d.cell) || f;
                                                r = e != null && e[q] !== void 0 ? e[q] : r
                                            }
                                        }
                                    }
                                    if (f) {
                                        r = a.p.idPrefix + r;
                                        v = i;
                                        if (d.repeatitems) {
                                            d.cell && (f = b.jgrid.getAccessor(f, d.cell) || f);
                                            b.isArray(f) && (v = w)
                                        }
                                        for (n = 0; n < v.length; n++)x[a.p.colModel[n + s + u + p].name] = b.jgrid.getAccessor(f, v[n]);
                                        x._id_ = b.jgrid.stripPref(a.p.idPrefix, r);
                                        a.p.data.push(x);
                                        a.p._index[x._id_] = a.p.data.length - 1;
                                        x = {}
                                    }
                                    l++
                                }
                            }
                        }, ja = function () {
                            function c(a) {
                                var b =
                                    0, d, e, g, h, i;
                                if (a.groups != null) {
                                    (e = a.groups.length && a.groupOp.toString().toUpperCase() === "OR") && s.orBegin();
                                    for (d = 0; d < a.groups.length; d++) {
                                        b > 0 && e && s.or();
                                        try {
                                            c(a.groups[d])
                                        } catch (j) {
                                            alert(j)
                                        }
                                        b++
                                    }
                                    e && s.orEnd()
                                }
                                if (a.rules != null)try {
                                    (g = a.rules.length && a.groupOp.toString().toUpperCase() === "OR") && s.orBegin();
                                    for (d = 0; d < a.rules.length; d++) {
                                        i = a.rules[d];
                                        h = a.groupOp.toString().toUpperCase();
                                        if (p[i.op] && i.field) {
                                            b > 0 && h && h === "OR" && (s = s.or());
                                            s = p[i.op](s, h)(i.field, i.data, f[i.field])
                                        }
                                        b++
                                    }
                                    g && s.orEnd()
                                } catch (qa) {
                                    alert(qa)
                                }
                            }

                            var d = a.p.multiSort ? [] : "", e = [], g = false, f = {}, h = [], i = [], j, k, l;
                            if (b.isArray(a.p.data)) {
                                var o = a.p.grouping ? a.p.groupingView : false, n, m;
                                b.each(a.p.colModel, function () {
                                    k = this.sorttype || "text";
                                    if (k === "date" || k === "datetime") {
                                        if (this.formatter && typeof this.formatter === "string" && this.formatter === "date") {
                                            j = this.formatoptions && this.formatoptions.srcformat ? this.formatoptions.srcformat : b.jgrid.formatter.date.srcformat;
                                            l = this.formatoptions && this.formatoptions.newformat ? this.formatoptions.newformat : b.jgrid.formatter.date.newformat
                                        } else j =
                                            l = this.datefmt || "Y-m-d";
                                        f[this.name] = {stype: k, srcfmt: j, newfmt: l}
                                    } else f[this.name] = {stype: k, srcfmt: "", newfmt: ""};
                                    if (a.p.grouping) {
                                        m = 0;
                                        for (n = o.groupField.length; m < n; m++)if (this.name === o.groupField[m]) {
                                            var c = this.name;
                                            if (this.index)c = this.index;
                                            h[m] = f[c];
                                            i[m] = c
                                        }
                                    }
                                    if (a.p.multiSort) {
                                        if (this.lso) {
                                            d.push(this.name);
                                            c = this.lso.split("-");
                                            e.push(c[c.length - 1])
                                        }
                                    } else if (!g && (this.index === a.p.sortname || this.name === a.p.sortname)) {
                                        d = this.name;
                                        g = true
                                    }
                                });
                                if (a.p.treeGrid)b(a).jqGrid("SortTree", d, a.p.sortorder, f[d].stype,
                                    f[d].srcfmt); else {
                                    var p = {eq: function (a) {
                                        return a.equals
                                    }, ne: function (a) {
                                        return a.notEquals
                                    }, lt: function (a) {
                                        return a.less
                                    }, le: function (a) {
                                        return a.lessOrEquals
                                    }, gt: function (a) {
                                        return a.greater
                                    }, ge: function (a) {
                                        return a.greaterOrEquals
                                    }, cn: function (a) {
                                        return a.contains
                                    }, nc: function (a, b) {
                                        return b === "OR" ? a.orNot().contains : a.andNot().contains
                                    }, bw: function (a) {
                                        return a.startsWith
                                    }, bn: function (a, b) {
                                        return b === "OR" ? a.orNot().startsWith : a.andNot().startsWith
                                    }, en: function (a, b) {
                                        return b === "OR" ? a.orNot().endsWith :
                                            a.andNot().endsWith
                                    }, ew: function (a) {
                                        return a.endsWith
                                    }, ni: function (a, b) {
                                        return b === "OR" ? a.orNot().equals : a.andNot().equals
                                    }, "in": function (a) {
                                        return a.equals
                                    }, nu: function (a) {
                                        return a.isNull
                                    }, nn: function (a, b) {
                                        return b === "OR" ? a.orNot().isNull : a.andNot().isNull
                                    }}, s = b.jgrid.from(a.p.data);
                                    a.p.ignoreCase && (s = s.ignoreCase());
                                    if (a.p.search === true) {
                                        var u = a.p.postData.filters;
                                        if (u) {
                                            typeof u === "string" && (u = b.jgrid.parse(u));
                                            c(u)
                                        } else try {
                                            s = p[a.p.postData.searchOper](s)(a.p.postData.searchField, a.p.postData.searchString,
                                                f[a.p.postData.searchField])
                                        } catch (t) {
                                        }
                                    }
                                    if (a.p.grouping)for (m = 0; m < n; m++)s.orderBy(i[m], o.groupOrder[m], h[m].stype, h[m].srcfmt);
                                    a.p.multiSort ? b.each(d, function (a) {
                                        s.orderBy(this, e[a], f[this].stype, f[this].srcfmt)
                                    }) : d && a.p.sortorder && g && (a.p.sortorder.toUpperCase() === "DESC" ? s.orderBy(a.p.sortname, "d", f[d].stype, f[d].srcfmt) : s.orderBy(a.p.sortname, "a", f[d].stype, f[d].srcfmt));
                                    var u = s.select(), v = parseInt(a.p.rowNum, 10), w = u.length, A = parseInt(a.p.page, 10), B = Math.ceil(w / v), q = {}, u = u.slice((A - 1) * v, A * v), f =
                                        s = null;
                                    q[a.p.localReader.total] = B;
                                    q[a.p.localReader.page] = A;
                                    q[a.p.localReader.records] = w;
                                    q[a.p.localReader.root] = u;
                                    q[a.p.localReader.userdata] = a.p.userData;
                                    u = null;
                                    return q
                                }
                            }
                        }, aa = function () {
                            a.grid.hDiv.loading = true;
                            if (!a.p.hiddengrid)switch (a.p.loadui) {
                                case "enable":
                                    b("#load_" + b.jgrid.jqID(a.p.id)).show();
                                    break;
                                case "block":
                                    b("#lui_" + b.jgrid.jqID(a.p.id)).show();
                                    b("#load_" + b.jgrid.jqID(a.p.id)).show()
                            }
                        }, P = function () {
                            a.grid.hDiv.loading = false;
                            switch (a.p.loadui) {
                                case "enable":
                                    b("#load_" + b.jgrid.jqID(a.p.id)).hide();
                                    break;
                                case "block":
                                    b("#lui_" + b.jgrid.jqID(a.p.id)).hide();
                                    b("#load_" + b.jgrid.jqID(a.p.id)).hide()
                            }
                        }, O = function (c) {
                            if (!a.grid.hDiv.loading) {
                                var d = a.p.scroll && c === false, e = {}, g, f = a.p.prmNames;
                                if (a.p.page <= 0)a.p.page = 1;
                                if (f.search !== null)e[f.search] = a.p.search;
                                f.nd !== null && (e[f.nd] = (new Date).getTime());
                                if (f.rows !== null)e[f.rows] = a.p.rowNum;
                                if (f.page !== null)e[f.page] = a.p.page;
                                if (f.sort !== null)e[f.sort] = a.p.sortname;
                                if (f.order !== null)e[f.order] = a.p.sortorder;
                                if (a.p.rowTotal !== null && f.totalrows !== null)e[f.totalrows] =
                                    a.p.rowTotal;
                                var h = b.isFunction(a.p.loadComplete), i = h ? a.p.loadComplete : null, j = 0, c = c || 1;
                                if (c > 1)if (f.npage !== null) {
                                    e[f.npage] = c;
                                    j = c - 1;
                                    c = 1
                                } else i = function (b) {
                                    a.p.page++;
                                    a.grid.hDiv.loading = false;
                                    h && a.p.loadComplete.call(a, b);
                                    O(c - 1)
                                }; else f.npage !== null && delete a.p.postData[f.npage];
                                if (a.p.grouping) {
                                    b(a).jqGrid("groupingSetup");
                                    var k = a.p.groupingView, l, o = "";
                                    for (l = 0; l < k.groupField.length; l++) {
                                        var m = k.groupField[l];
                                        b.each(a.p.colModel, function (a, b) {
                                            if (b.name === m && b.index)m = b.index
                                        });
                                        o = o + (m + " " + k.groupOrder[l] +
                                            ", ")
                                    }
                                    e[f.sort] = o + e[f.sort]
                                }
                                b.extend(a.p.postData, e);
                                var n = !a.p.scroll ? 1 : a.rows.length - 1, e = b(a).triggerHandler("jqGridBeforeRequest");
                                if (!(e === false || e === "stop"))if (b.isFunction(a.p.datatype))a.p.datatype.call(a, a.p.postData, "load_" + a.p.id); else {
                                    if (b.isFunction(a.p.beforeRequest)) {
                                        e = a.p.beforeRequest.call(a);
                                        e === void 0 && (e = true);
                                        if (e === false)return
                                    }
                                    g = a.p.datatype.toLowerCase();
                                    switch (g) {
                                        case "json":
                                        case "jsonp":
                                        case "xml":
                                        case "script":
                                            b.ajax(b.extend({url: a.p.url, type: a.p.mtype, dataType: g, data: b.isFunction(a.p.serializeGridData) ?
                                                a.p.serializeGridData.call(a, a.p.postData) : a.p.postData, success: function (e, f, h) {
                                                if (b.isFunction(a.p.beforeProcessing) && a.p.beforeProcessing.call(a, e, f, h) === false)P(); else {
                                                    g === "xml" ? J(e, a.grid.bDiv, n, c > 1, j) : S(e, a.grid.bDiv, n, c > 1, j);
                                                    b(a).triggerHandler("jqGridLoadComplete", [e]);
                                                    i && i.call(a, e);
                                                    b(a).triggerHandler("jqGridAfterLoadComplete", [e]);
                                                    d && a.grid.populateVisible();
                                                    if (a.p.loadonce || a.p.treeGrid)a.p.datatype = "local";
                                                    c === 1 && P()
                                                }
                                            }, error: function (d, e, f) {
                                                b.isFunction(a.p.loadError) && a.p.loadError.call(a,
                                                    d, e, f);
                                                c === 1 && P()
                                            }, beforeSend: function (c, d) {
                                                var e = true;
                                                b.isFunction(a.p.loadBeforeSend) && (e = a.p.loadBeforeSend.call(a, c, d));
                                                e === void 0 && (e = true);
                                                if (e === false)return false;
                                                aa()
                                            }}, b.jgrid.ajaxOptions, a.p.ajaxGridOptions));
                                            break;
                                        case "xmlstring":
                                            aa();
                                            e = typeof a.p.datastr !== "string" ? a.p.datastr : b.parseXML(a.p.datastr);
                                            J(e, a.grid.bDiv);
                                            b(a).triggerHandler("jqGridLoadComplete", [e]);
                                            h && a.p.loadComplete.call(a, e);
                                            b(a).triggerHandler("jqGridAfterLoadComplete", [e]);
                                            a.p.datatype = "local";
                                            a.p.datastr = null;
                                            P();
                                            break;
                                        case "jsonstring":
                                            aa();
                                            e = typeof a.p.datastr === "string" ? b.jgrid.parse(a.p.datastr) : a.p.datastr;
                                            S(e, a.grid.bDiv);
                                            b(a).triggerHandler("jqGridLoadComplete", [e]);
                                            h && a.p.loadComplete.call(a, e);
                                            b(a).triggerHandler("jqGridAfterLoadComplete", [e]);
                                            a.p.datatype = "local";
                                            a.p.datastr = null;
                                            P();
                                            break;
                                        case "local":
                                        case "clientside":
                                            aa();
                                            a.p.datatype = "local";
                                            e = ja();
                                            S(e, a.grid.bDiv, n, c > 1, j);
                                            b(a).triggerHandler("jqGridLoadComplete", [e]);
                                            i && i.call(a, e);
                                            b(a).triggerHandler("jqGridAfterLoadComplete", [e]);
                                            d && a.grid.populateVisible();
                                            P()
                                    }
                                }
                            }
                        }, ca = function (c) {
                            b("#cb_" + b.jgrid.jqID(a.p.id), a.grid.hDiv)[a.p.useProp ? "prop" : "attr"]("checked", c);
                            if (a.p.frozenColumns && a.p.id + "_frozen")b("#cb_" + b.jgrid.jqID(a.p.id), a.grid.fhDiv)[a.p.useProp ? "prop" : "attr"]("checked", c)
                        }, ka = function (c, d) {
                            var e = "", g = "<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>", i = "", j, k, l, m, n = function (c) {
                                var d;
                                b.isFunction(a.p.onPaging) && (d = a.p.onPaging.call(a, c));
                                a.p.selrow = null;
                                if (a.p.multiselect) {
                                    a.p.selarrrow =
                                        [];
                                    ca(false)
                                }
                                a.p.savedRow = [];
                                return d === "stop" ? false : true
                            }, c = c.substr(1), d = d + ("_" + c);
                            j = "pg_" + c;
                            k = c + "_left";
                            l = c + "_center";
                            m = c + "_right";
                            b("#" + b.jgrid.jqID(c)).append("<div id='" + j + "' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody><tr><td id='" + k + "' align='left'></td><td id='" + l + "' align='center' style='white-space:pre;'></td><td id='" + m + "' align='right'></td></tr></tbody></table></div>").attr("dir",
                                "ltr");
                            if (a.p.rowList.length > 0) {
                                i = "<td dir='" + f + "'>";
                                i = i + "<select class='ui-pg-selbox' role='listbox'>";
                                for (k = 0; k < a.p.rowList.length; k++)i = i + ('<option role="option" value="' + a.p.rowList[k] + '"' + (a.p.rowNum === a.p.rowList[k] ? ' selected="selected"' : "") + ">" + a.p.rowList[k] + "</option>");
                                i = i + "</select></td>"
                            }
                            f === "rtl" && (g = g + i);
                            a.p.pginput === true && (e = "<td dir='" + f + "'>" + b.jgrid.format(a.p.pgtext || "", "<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" +
                                b.jgrid.jqID(c) + "'></span>") + "</td>");
                            if (a.p.pgbuttons === true) {
                                k = ["first" + d, "prev" + d, "next" + d, "last" + d];
                                f === "rtl" && k.reverse();
                                g = g + ("<td id='" + k[0] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-first'></span></td>");
                                g = g + ("<td id='" + k[1] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-prev'></span></td>");
                                g = g + (e !== "" ? "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>" + e + "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>" :
                                    "") + ("<td id='" + k[2] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-next'></span></td>");
                                g = g + ("<td id='" + k[3] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-end'></span></td>")
                            } else e !== "" && (g = g + e);
                            f === "ltr" && (g = g + i);
                            g = g + "</tr></tbody></table>";
                            a.p.viewrecords === true && b("td#" + c + "_" + a.p.recordpos, "#" + j).append("<div dir='" + f + "' style='text-align:" + a.p.recordpos + "' class='ui-paging-info'></div>");
                            b("td#" + c + "_" + a.p.pagerpos, "#" + j).append(g);
                            i = b(".ui-jqgrid").css("font-size") ||
                                "11px";
                            b(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + i + ";visibility:hidden;' ></div>");
                            g = b(g).clone().appendTo("#testpg").width();
                            b("#testpg").remove();
                            if (g > 0) {
                                e !== "" && (g = g + 50);
                                b("td#" + c + "_" + a.p.pagerpos, "#" + j).width(g)
                            }
                            a.p._nvtd = [];
                            a.p._nvtd[0] = g ? Math.floor((a.p.width - g) / 2) : Math.floor(a.p.width / 3);
                            a.p._nvtd[1] = 0;
                            g = null;
                            b(".ui-pg-selbox", "#" + j).bind("change", function () {
                                if (!n("records"))return false;
                                a.p.page = Math.round(a.p.rowNum * (a.p.page -
                                    1) / this.value - 0.5) + 1;
                                a.p.rowNum = this.value;
                                a.p.pager && b(".ui-pg-selbox", a.p.pager).val(this.value);
                                a.p.toppager && b(".ui-pg-selbox", a.p.toppager).val(this.value);
                                O();
                                return false
                            });
                            if (a.p.pgbuttons === true) {
                                b(".ui-pg-button", "#" + j).hover(function () {
                                    if (b(this).hasClass("ui-state-disabled"))this.style.cursor = "default"; else {
                                        b(this).addClass("ui-state-hover");
                                        this.style.cursor = "pointer"
                                    }
                                }, function () {
                                    if (!b(this).hasClass("ui-state-disabled")) {
                                        b(this).removeClass("ui-state-hover");
                                        this.style.cursor = "default"
                                    }
                                });
                                b("#first" + b.jgrid.jqID(d) + ", #prev" + b.jgrid.jqID(d) + ", #next" + b.jgrid.jqID(d) + ", #last" + b.jgrid.jqID(d)).click(function () {
                                    var b = o(a.p.page, 1), c = o(a.p.lastpage, 1), e = false, g = true, f = true, h = true, i = true;
                                    if (c === 0 || c === 1)i = h = f = g = false; else if (c > 1 && b >= 1)if (b === 1)f = g = false; else {
                                        if (b === c)i = h = false
                                    } else if (c > 1 && b === 0) {
                                        i = h = false;
                                        b = c - 1
                                    }
                                    if (!n(this.id))return false;
                                    if (this.id === "first" + d && g) {
                                        a.p.page = 1;
                                        e = true
                                    }
                                    if (this.id === "prev" + d && f) {
                                        a.p.page = b - 1;
                                        e = true
                                    }
                                    if (this.id === "next" + d && h) {
                                        a.p.page = b + 1;
                                        e = true
                                    }
                                    if (this.id ===
                                        "last" + d && i) {
                                        a.p.page = c;
                                        e = true
                                    }
                                    e && O();
                                    return false
                                })
                            }
                            a.p.pginput === true && b("input.ui-pg-input", "#" + j).keypress(function (c) {
                                if ((c.charCode || c.keyCode || 0) === 13) {
                                    if (!n("user"))return false;
                                    b(this).val(o(b(this).val(), 1));
                                    a.p.page = b(this).val() > 0 ? b(this).val() : a.p.page;
                                    O();
                                    return false
                                }
                                return this
                            })
                        }, ra = function (c, d) {
                            var e, g = "", f = a.p.colModel, h = false, i;
                            i = a.p.frozenColumns ? d : a.grid.headers[c].el;
                            var j = "";
                            b("span.ui-grid-ico-sort", i).addClass("ui-state-disabled");
                            b(i).attr("aria-selected", "false");
                            if (f[c].lso)if (f[c].lso ===
                                "asc") {
                                f[c].lso = f[c].lso + "-desc";
                                j = "desc"
                            } else if (f[c].lso === "desc") {
                                f[c].lso = f[c].lso + "-asc";
                                j = "asc"
                            } else {
                                if (f[c].lso === "asc-desc" || f[c].lso === "desc-asc")f[c].lso = ""
                            } else f[c].lso = j = f.firstsortorder || "asc";
                            if (j) {
                                b("span.s-ico", i).show();
                                b("span.ui-icon-" + j, i).removeClass("ui-state-disabled");
                                b(i).attr("aria-selected", "true")
                            } else a.p.viewsortcols[0] || b("span.s-ico", i).hide();
                            a.p.sortorder = "";
                            b.each(f, function (b) {
                                if (this.lso) {
                                    b > 0 && h && (g = g + ", ");
                                    e = this.lso.split("-");
                                    g = g + (f[b].index || f[b].name);
                                    g =
                                        g + (" " + e[e.length - 1]);
                                    h = true;
                                    a.p.sortorder = e[e.length - 1]
                                }
                            });
                            i = g.lastIndexOf(a.p.sortorder);
                            g = g.substring(0, i);
                            a.p.sortname = g
                        }, la = function (c, d, e, g, f) {
                            if (a.p.colModel[d].sortable) {
                                var h;
                                if (!(a.p.savedRow.length > 0)) {
                                    if (!e) {
                                        if (a.p.lastsort === d)if (a.p.sortorder === "asc")a.p.sortorder = "desc"; else {
                                            if (a.p.sortorder === "desc")a.p.sortorder = "asc"
                                        } else a.p.sortorder = a.p.colModel[d].firstsortorder || "asc";
                                        a.p.page = 1
                                    }
                                    if (a.p.multiSort)ra(d, f); else {
                                        if (g) {
                                            if (a.p.lastsort === d && a.p.sortorder === g && !e)return;
                                            a.p.sortorder =
                                                g
                                        }
                                        e = a.grid.headers[a.p.lastsort].el;
                                        f = a.p.frozenColumns ? f : a.grid.headers[d].el;
                                        b("span.ui-grid-ico-sort", e).addClass("ui-state-disabled");
                                        b(e).attr("aria-selected", "false");
                                        if (a.p.frozenColumns) {
                                            a.grid.fhDiv.find("span.ui-grid-ico-sort").addClass("ui-state-disabled");
                                            a.grid.fhDiv.find("th").attr("aria-selected", "false")
                                        }
                                        b("span.ui-icon-" + a.p.sortorder, f).removeClass("ui-state-disabled");
                                        b(f).attr("aria-selected", "true");
                                        if (!a.p.viewsortcols[0] && a.p.lastsort !== d) {
                                            a.p.frozenColumns && a.grid.fhDiv.find("span.s-ico").hide();
                                            b("span.s-ico", e).hide();
                                            b("span.s-ico", f).show()
                                        }
                                        c = c.substring(5 + a.p.id.length + 1);
                                        a.p.sortname = a.p.colModel[d].index || c;
                                        h = a.p.sortorder
                                    }
                                    if (b(a).triggerHandler("jqGridSortCol", [c, d, h]) === "stop")a.p.lastsort = d; else if (b.isFunction(a.p.onSortCol) && a.p.onSortCol.call(a, c, d, h) === "stop")a.p.lastsort = d; else {
                                        if (a.p.datatype === "local")a.p.deselectAfterSort && b(a).jqGrid("resetSelection"); else {
                                            a.p.selrow = null;
                                            a.p.multiselect && ca(false);
                                            a.p.selarrrow = [];
                                            a.p.savedRow = []
                                        }
                                        if (a.p.scroll) {
                                            f = a.grid.bDiv.scrollLeft;
                                            V.call(a, true, false);
                                            a.grid.hDiv.scrollLeft = f
                                        }
                                        a.p.subGrid && a.p.datatype === "local" && b("td.sgexpanded", "#" + b.jgrid.jqID(a.p.id)).each(function () {
                                            b(this).trigger("click")
                                        });
                                        O();
                                        a.p.lastsort = d;
                                        if (a.p.sortname !== c && d)a.p.lastsort = d
                                    }
                                }
                            }
                        }, sa = function (c) {
                            c = b(a.grid.headers[c].el);
                            c = [c.position().left + c.outerWidth()];
                            a.p.direction === "rtl" && (c[0] = a.p.width - c[0]);
                            c[0] = c[0] - a.grid.bDiv.scrollLeft;
                            c.push(b(a.grid.hDiv).position().top);
                            c.push(b(a.grid.bDiv).offset().top - b(a.grid.hDiv).offset().top + b(a.grid.bDiv).height());
                            return c
                        }, ma = function (c) {
                            var d, e = a.grid.headers, g = b.jgrid.getCellIndex(c);
                            for (d = 0; d < e.length; d++)if (c === e[d].el) {
                                g = d;
                                break
                            }
                            return g
                        };
                        this.p.id = this.id;
                        -1 === b.inArray(a.p.multikey, ["shiftKey", "altKey", "ctrlKey"]) && (a.p.multikey = !1);
                        a.p.keyIndex = !1;
                        for (g = 0; g < a.p.colModel.length; g++)a.p.colModel[g] = b.extend(!0, {}, a.p.cmTemplate, a.p.colModel[g].template || {}, a.p.colModel[g]), !1 === a.p.keyIndex && !0 === a.p.colModel[g].key && (a.p.keyIndex = g);
                        a.p.sortorder = a.p.sortorder.toLowerCase();
                        b.jgrid.cell_width = b.jgrid.cellWidth();
                        !0 === a.p.grouping && (a.p.scroll = !1, a.p.rownumbers = !1, a.p.treeGrid = !1, a.p.gridview = !0);
                        if (!0 === this.p.treeGrid) {
                            try {
                                b(this).jqGrid("setTreeGrid")
                            } catch (va) {
                            }
                            "local" !== a.p.datatype && (a.p.localReader = {id: "_id_"})
                        }
                        if (this.p.subGrid)try {
                            b(a).jqGrid("setSubGrid")
                        } catch (wa) {
                        }
                        this.p.multiselect && (this.p.colNames.unshift("<input role='checkbox' id='cb_" + this.p.id + "' class='cbox' type='checkbox'/>"), this.p.colModel.unshift({name: "cb", width: b.jgrid.cell_width ? a.p.multiselectWidth + a.p.cellLayout : a.p.multiselectWidth,
                            sortable: !1, resizable: !1, hidedlg: !0, search: !1, align: "center", fixed: !0}));
                        this.p.rownumbers && (this.p.colNames.unshift(""), this.p.colModel.unshift({name: "rn", width: a.p.rownumWidth, sortable: !1, resizable: !1, hidedlg: !0, search: !1, align: "center", fixed: !0}));
                        a.p.xmlReader = b.extend(!0, {root: "rows", row: "row", page: "rows>page", total: "rows>total", records: "rows>records", repeatitems: !0, cell: "cell", id: "[id]", userdata: "userdata", subgrid: {root: "rows", row: "row", repeatitems: !0, cell: "cell"}}, a.p.xmlReader);
                        a.p.jsonReader =
                            b.extend(!0, {root: "rows", page: "page", total: "total", records: "records", repeatitems: !0, cell: "cell", id: "id", userdata: "userdata", subgrid: {root: "rows", repeatitems: !0, cell: "cell"}}, a.p.jsonReader);
                        a.p.localReader = b.extend(!0, {root: "rows", page: "page", total: "total", records: "records", repeatitems: !1, cell: "cell", id: "id", userdata: "userdata", subgrid: {root: "rows", repeatitems: !0, cell: "cell"}}, a.p.localReader);
                        a.p.scroll && (a.p.pgbuttons = !1, a.p.pginput = !1, a.p.rowList = []);
                        a.p.data.length && N();
                        var B = "<thead><tr class='ui-jqgrid-labels' role='rowheader'>",
                            na, C, da, ea, fa, v, p, W, oa = W = "", ba = [], pa = [];
                        C = [];
                        if (!0 === a.p.shrinkToFit && !0 === a.p.forceFit)for (g = a.p.colModel.length - 1; 0 <= g; g--)if (!a.p.colModel[g].hidden) {
                            a.p.colModel[g].resizable = !1;
                            break
                        }
                        "horizontal" === a.p.viewsortcols[1] && (W = " ui-i-asc", oa = " ui-i-desc");
                        na = k ? "class='ui-th-div-ie'" : "";
                        W = "<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc" + W + " ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-" + f + "'></span>" + ("<span sort='desc' class='ui-grid-ico-sort ui-icon-desc" +
                            oa + " ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-" + f + "'></span></span>");
                        if (a.p.multiSort) {
                            ba = a.p.sortname.split(",");
                            for (g = 0; g < ba.length; g++)C = b.trim(ba[g]).split(" "), ba[g] = b.trim(C[0]), pa[g] = C[1] ? b.trim(C[1]) : a.p.sortorder || "asc"
                        }
                        for (g = 0; g < this.p.colNames.length; g++)C = a.p.headertitles ? ' title="' + b.jgrid.stripHtml(a.p.colNames[g]) + '"' : "", B += "<th id='" + a.p.id + "_" + a.p.colModel[g].name + "' role='columnheader' class='ui-state-default ui-th-column ui-th-" + f + "'" + C + ">", C = a.p.colModel[g].index ||
                            a.p.colModel[g].name, B += "<div id='jqgh_" + a.p.id + "_" + a.p.colModel[g].name + "' " + na + ">" + a.p.colNames[g], a.p.colModel[g].width = a.p.colModel[g].width ? parseInt(a.p.colModel[g].width, 10) : 150, "boolean" !== typeof a.p.colModel[g].title && (a.p.colModel[g].title = !0), a.p.colModel[g].lso = "", C === a.p.sortname && (a.p.lastsort = g), a.p.multiSort && (C = b.inArray(C, ba), -1 !== C && (a.p.colModel[g].lso = pa[C])), B += W + "</div></th>";
                        W = null;
                        b(this).append(B + "</tr></thead>");
                        b("thead tr:first th", this).hover(function () {
                                b(this).addClass("ui-state-hover")
                            },
                            function () {
                                b(this).removeClass("ui-state-hover")
                            });
                        if (this.p.multiselect) {
                            var ga = [], Y;
                            b("#cb_" + b.jgrid.jqID(a.p.id), this).bind("click", function () {
                                a.p.selarrrow = [];
                                var c = a.p.frozenColumns === true ? a.p.id + "_frozen" : "";
                                if (this.checked) {
                                    b(a.rows).each(function (d) {
                                        if (d > 0 && !b(this).hasClass("ui-subgrid") && !b(this).hasClass("jqgroup") && !b(this).hasClass("ui-state-disabled")) {
                                            b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(this.id))[a.p.useProp ? "prop" : "attr"]("checked", true);
                                            b(this).addClass("ui-state-highlight").attr("aria-selected",
                                                "true");
                                            a.p.selarrrow.push(this.id);
                                            a.p.selrow = this.id;
                                            if (c) {
                                                b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(this.id), a.grid.fbDiv)[a.p.useProp ? "prop" : "attr"]("checked", true);
                                                b("#" + b.jgrid.jqID(this.id), a.grid.fbDiv).addClass("ui-state-highlight")
                                            }
                                        }
                                    });
                                    Y = true;
                                    ga = []
                                } else {
                                    b(a.rows).each(function (d) {
                                        if (d > 0 && !b(this).hasClass("ui-subgrid") && !b(this).hasClass("ui-state-disabled")) {
                                            b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(this.id))[a.p.useProp ? "prop" : "attr"]("checked", false);
                                            b(this).removeClass("ui-state-highlight").attr("aria-selected",
                                                "false");
                                            ga.push(this.id);
                                            if (c) {
                                                b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(this.id), a.grid.fbDiv)[a.p.useProp ? "prop" : "attr"]("checked", false);
                                                b("#" + b.jgrid.jqID(this.id), a.grid.fbDiv).removeClass("ui-state-highlight")
                                            }
                                        }
                                    });
                                    a.p.selrow = null;
                                    Y = false
                                }
                                b(a).triggerHandler("jqGridSelectAll", [Y ? a.p.selarrrow : ga, Y]);
                                b.isFunction(a.p.onSelectAll) && a.p.onSelectAll.call(a, Y ? a.p.selarrrow : ga, Y)
                            })
                        }
                        !0 === a.p.autowidth && (B = b(l).innerWidth(), a.p.width = 0 < B ? B : "nw");
                        (function () {
                            var d = 0, e = b.jgrid.cell_width ? 0 : o(a.p.cellLayout,
                                0), g = 0, f, h = o(a.p.scrollOffset, 0), i, k = false, l, m = 0, n;
                            b.each(a.p.colModel, function () {
                                if (this.hidden === void 0)this.hidden = false;
                                if (a.p.grouping && a.p.autowidth) {
                                    var c = b.inArray(this.name, a.p.groupingView.groupField);
                                    if (c >= 0 && a.p.groupingView.groupColumnShow.length > c)this.hidden = !a.p.groupingView.groupColumnShow[c]
                                }
                                this.widthOrg = i = o(this.width, 0);
                                if (this.hidden === false) {
                                    d = d + (i + e);
                                    this.fixed ? m = m + (i + e) : g++
                                }
                            });
                            if (isNaN(a.p.width))a.p.width = d + (a.p.shrinkToFit === false && !isNaN(a.p.height) ? h : 0);
                            c.width = a.p.width;
                            a.p.tblwidth = d;
                            if (a.p.shrinkToFit === false && a.p.forceFit === true)a.p.forceFit = false;
                            if (a.p.shrinkToFit === true && g > 0) {
                                l = c.width - e * g - m;
                                if (!isNaN(a.p.height)) {
                                    l = l - h;
                                    k = true
                                }
                                d = 0;
                                b.each(a.p.colModel, function (b) {
                                    if (this.hidden === false && !this.fixed) {
                                        this.width = i = Math.round(l * this.width / (a.p.tblwidth - e * g - m));
                                        d = d + i;
                                        f = b
                                    }
                                });
                                n = 0;
                                k ? c.width - m - (d + e * g) !== h && (n = c.width - m - (d + e * g) - h) : !k && Math.abs(c.width - m - (d + e * g)) !== 1 && (n = c.width - m - (d + e * g));
                                a.p.colModel[f].width = a.p.colModel[f].width + n;
                                a.p.tblwidth = d + n + e * g + m;
                                if (a.p.tblwidth >
                                    a.p.width) {
                                    a.p.colModel[f].width = a.p.colModel[f].width - (a.p.tblwidth - parseInt(a.p.width, 10));
                                    a.p.tblwidth = a.p.width
                                }
                            }
                        })();
                        b(l).css("width", c.width + "px").append("<div class='ui-jqgrid-resize-mark' id='rs_m" + a.p.id + "'>&#160;</div>");
                        b(i).css("width", c.width + "px");
                        var B = b("thead:first", a).get(0), Q = "";
                        a.p.footerrow && (Q += "<table role='grid' style='width:" + a.p.tblwidth + "px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-" +
                            f + "'>");
                        var i = b("tr:first", B), Z = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
                        a.p.disableClick = !1;
                        b("th", i).each(function (d) {
                            da = a.p.colModel[d].width;
                            if (a.p.colModel[d].resizable === void 0)a.p.colModel[d].resizable = true;
                            if (a.p.colModel[d].resizable) {
                                ea = document.createElement("span");
                                b(ea).html("&#160;").addClass("ui-jqgrid-resize ui-jqgrid-resize-" + f).css("cursor", "col-resize");
                                b(this).addClass(a.p.resizeclass)
                            } else ea = "";
                            b(this).css("width", da + "px").prepend(ea);
                            var e = "";
                            if (a.p.colModel[d].hidden) {
                                b(this).css("display",
                                    "none");
                                e = "display:none;"
                            }
                            Z = Z + ("<td role='gridcell' style='height:0px;width:" + da + "px;" + e + "'></td>");
                            c.headers[d] = {width: da, el: this};
                            fa = a.p.colModel[d].sortable;
                            if (typeof fa !== "boolean")fa = a.p.colModel[d].sortable = true;
                            e = a.p.colModel[d].name;
                            e === "cb" || e === "subgrid" || e === "rn" || a.p.viewsortcols[2] && b(">div", this).addClass("ui-jqgrid-sortable");
                            if (fa)if (a.p.multiSort)if (a.p.viewsortcols[0]) {
                                b("div span.s-ico", this).show();
                                a.p.colModel[d].lso && b("div span.ui-icon-" + a.p.colModel[d].lso, this).removeClass("ui-state-disabled")
                            } else {
                                if (a.p.colModel[d].lso) {
                                    b("div span.s-ico",
                                        this).show();
                                    b("div span.ui-icon-" + a.p.colModel[d].lso, this).removeClass("ui-state-disabled")
                                }
                            } else if (a.p.viewsortcols[0]) {
                                b("div span.s-ico", this).show();
                                d === a.p.lastsort && b("div span.ui-icon-" + a.p.sortorder, this).removeClass("ui-state-disabled")
                            } else if (d === a.p.lastsort) {
                                b("div span.s-ico", this).show();
                                b("div span.ui-icon-" + a.p.sortorder, this).removeClass("ui-state-disabled")
                            }
                            a.p.footerrow && (Q = Q + ("<td role='gridcell' " + n(d, 0, "", null, "", false) + ">&#160;</td>"))
                        }).mousedown(function (d) {
                                if (b(d.target).closest("th>span.ui-jqgrid-resize").length ===
                                    1) {
                                    var e = ma(this);
                                    if (a.p.forceFit === true) {
                                        var g = a.p, f = e, h;
                                        for (h = e + 1; h < a.p.colModel.length; h++)if (a.p.colModel[h].hidden !== true) {
                                            f = h;
                                            break
                                        }
                                        g.nv = f - e
                                    }
                                    c.dragStart(e, d, sa(e));
                                    return false
                                }
                            }).click(function (c) {
                                if (a.p.disableClick)return a.p.disableClick = false;
                                var d = "th>div.ui-jqgrid-sortable", e, g;
                                a.p.viewsortcols[2] || (d = "th>div>span>span.ui-grid-ico-sort");
                                c = b(c.target).closest(d);
                                if (c.length === 1) {
                                    var f;
                                    if (a.p.frozenColumns) {
                                        var h = b(this)[0].id.substring(5);
                                        b(a.p.colModel).each(function (a) {
                                            if (this.name ===
                                                h) {
                                                f = a;
                                                return false
                                            }
                                        })
                                    } else f = ma(this);
                                    if (!a.p.viewsortcols[2]) {
                                        e = true;
                                        g = c.attr("sort")
                                    }
                                    f != null && la(b("div", this)[0].id, f, e, g, this);
                                    return false
                                }
                            });
                        if (a.p.sortable && b.fn.sortable)try {
                            b(a).jqGrid("sortableColumns", i)
                        } catch (xa) {
                        }
                        a.p.footerrow && (Q += "</tr></tbody></table>");
                        Z += "</tr>";
                        this.appendChild(document.createElement("tbody"));
                        b(this).addClass("ui-jqgrid-btable").append(Z);
                        var Z = null, i = b("<table class='ui-jqgrid-htable' style='width:" + a.p.tblwidth + "px' role='grid' aria-labelledby='gbox_" + this.id +
                            "' cellspacing='0' cellpadding='0' border='0'></table>").append(B), H = a.p.caption && !0 === a.p.hiddengrid ? !0 : !1;
                        g = b("<div class='ui-jqgrid-hbox" + ("rtl" === f ? "-rtl" : "") + "'></div>");
                        B = null;
                        c.hDiv = document.createElement("div");
                        b(c.hDiv).css({width: c.width + "px"}).addClass("ui-state-default ui-jqgrid-hdiv").append(g);
                        b(g).append(i);
                        i = null;
                        H && b(c.hDiv).hide();
                        a.p.pager && ("string" === typeof a.p.pager ? "#" !== a.p.pager.substr(0, 1) && (a.p.pager = "#" + a.p.pager) : a.p.pager = "#" + b(a.p.pager).attr("id"), b(a.p.pager).css({width: c.width +
                            "px"}).addClass("ui-state-default ui-jqgrid-pager ui-corner-bottom").appendTo(l), H && b(a.p.pager).hide(), ka(a.p.pager, ""));
                        !1 === a.p.cellEdit && !0 === a.p.hoverrows && b(a).bind("mouseover",function (a) {
                            p = b(a.target).closest("tr.jqgrow");
                            b(p).attr("class") !== "ui-subgrid" && b(p).addClass("ui-state-hover")
                        }).bind("mouseout", function (a) {
                                p = b(a.target).closest("tr.jqgrow");
                                b(p).removeClass("ui-state-hover")
                            });
                        var w, I, ha;
                        b(a).before(c.hDiv).click(function (c) {
                            v = c.target;
                            p = b(v, a.rows).closest("tr.jqgrow");
                            if (b(p).length ===
                                0 || p[0].className.indexOf("ui-state-disabled") > -1 || (b(v, a).closest("table.ui-jqgrid-btable").attr("id") || "").replace("_frozen", "") !== a.id)return this;
                            var d = b(v).hasClass("cbox"), e = b(a).triggerHandler("jqGridBeforeSelectRow", [p[0].id, c]);
                            (e = e === false || e === "stop" ? false : true) && b.isFunction(a.p.beforeSelectRow) && (e = a.p.beforeSelectRow.call(a, p[0].id, c));
                            if (!(v.tagName === "A" || (v.tagName === "INPUT" || v.tagName === "TEXTAREA" || v.tagName === "OPTION" || v.tagName === "SELECT") && !d) && e === true) {
                                w = p[0].id;
                                I = b.jgrid.getCellIndex(v);
                                ha = b(v).closest("td,th").html();
                                b(a).triggerHandler("jqGridCellSelect", [w, I, ha, c]);
                                b.isFunction(a.p.onCellSelect) && a.p.onCellSelect.call(a, w, I, ha, c);
                                if (a.p.cellEdit === true)if (a.p.multiselect && d)b(a).jqGrid("setSelection", w, true, c); else {
                                    w = p[0].rowIndex;
                                    try {
                                        b(a).jqGrid("editCell", w, I, true)
                                    } catch (g) {
                                    }
                                } else if (a.p.multikey)if (c[a.p.multikey])b(a).jqGrid("setSelection", w, true, c); else {
                                    if (a.p.multiselect && d) {
                                        d = b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + w).is(":checked");
                                        b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + w)[a.p.useProp ?
                                            "prop" : "attr"]("checked", d)
                                    }
                                } else {
                                    if (a.p.multiselect && a.p.multiboxonly && !d) {
                                        var f = a.p.frozenColumns ? a.p.id + "_frozen" : "";
                                        b(a.p.selarrrow).each(function (c, d) {
                                            var e = a.rows.namedItem(d);
                                            b(e).removeClass("ui-state-highlight");
                                            b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(d))[a.p.useProp ? "prop" : "attr"]("checked", false);
                                            if (f) {
                                                b("#" + b.jgrid.jqID(d), "#" + b.jgrid.jqID(f)).removeClass("ui-state-highlight");
                                                b("#jqg_" + b.jgrid.jqID(a.p.id) + "_" + b.jgrid.jqID(d), "#" + b.jgrid.jqID(f))[a.p.useProp ? "prop" : "attr"]("checked",
                                                    false)
                                            }
                                        });
                                        a.p.selarrrow = []
                                    }
                                    b(a).jqGrid("setSelection", w, true, c)
                                }
                            }
                        }).bind("reloadGrid",function (c, d) {
                                if (a.p.treeGrid === true)a.p.datatype = a.p.treedatatype;
                                d && d.current && a.grid.selectionPreserver(a);
                                if (a.p.datatype === "local") {
                                    b(a).jqGrid("resetSelection");
                                    a.p.data.length && N()
                                } else if (!a.p.treeGrid) {
                                    a.p.selrow = null;
                                    if (a.p.multiselect) {
                                        a.p.selarrrow = [];
                                        ca(false)
                                    }
                                    a.p.savedRow = []
                                }
                                a.p.scroll && V.call(a, true, false);
                                if (d && d.page) {
                                    var e = d.page;
                                    if (e > a.p.lastpage)e = a.p.lastpage;
                                    e < 1 && (e = 1);
                                    a.p.page = e;
                                    a.grid.bDiv.scrollTop =
                                        a.grid.prevRowHeight ? (e - 1) * a.grid.prevRowHeight * a.p.rowNum : 0
                                }
                                if (a.grid.prevRowHeight && a.p.scroll) {
                                    delete a.p.lastpage;
                                    a.grid.populateVisible()
                                } else a.grid.populate();
                                a.p._inlinenav === true && b(a).jqGrid("showAddEditButtons");
                                return false
                            }).dblclick(function (c) {
                                v = c.target;
                                p = b(v, a.rows).closest("tr.jqgrow");
                                if (b(p).length !== 0) {
                                    w = p[0].rowIndex;
                                    I = b.jgrid.getCellIndex(v);
                                    b(a).triggerHandler("jqGridDblClickRow", [b(p).attr("id"), w, I, c]);
                                    b.isFunction(a.p.ondblClickRow) && a.p.ondblClickRow.call(a, b(p).attr("id"),
                                        w, I, c)
                                }
                            }).bind("contextmenu", function (c) {
                                v = c.target;
                                p = b(v, a.rows).closest("tr.jqgrow");
                                if (b(p).length !== 0) {
                                    a.p.multiselect || b(a).jqGrid("setSelection", p[0].id, true, c);
                                    w = p[0].rowIndex;
                                    I = b.jgrid.getCellIndex(v);
                                    b(a).triggerHandler("jqGridRightClickRow", [b(p).attr("id"), w, I, c]);
                                    b.isFunction(a.p.onRightClickRow) && a.p.onRightClickRow.call(a, b(p).attr("id"), w, I, c)
                                }
                            });
                        c.bDiv = document.createElement("div");
                        k && "auto" === ("" + a.p.height).toLowerCase() && (a.p.height = "100%");
                        b(c.bDiv).append(b('<div style="position:relative;' +
                            (k && 8 > b.jgrid.msiever() ? "height:0.01%;" : "") + '"></div>').append("<div></div>").append(this)).addClass("ui-jqgrid-bdiv").css({height: a.p.height + (isNaN(a.p.height) ? "" : "px"), width: c.width + "px"}).scroll(c.scrollGrid);
                        b("table:first", c.bDiv).css({width: a.p.tblwidth + "px"});
                        b.support.tbody || 2 === b("tbody", this).length && b("tbody:gt(0)", this).remove();
                        a.p.multikey && (b.jgrid.msie ? b(c.bDiv).bind("selectstart", function () {
                            return false
                        }) : b(c.bDiv).bind("mousedown", function () {
                            return false
                        }));
                        H && b(c.bDiv).hide();
                        c.cDiv =
                            document.createElement("div");
                        var ia = !0 === a.p.hidegrid ? b("<a role='link' href='javascript:void(0)'/>").addClass("ui-jqgrid-titlebar-close HeaderButton").hover(function () {
                            ia.addClass("ui-state-hover")
                        },function () {
                            ia.removeClass("ui-state-hover")
                        }).append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css("rtl" === f ? "left" : "right", "0px") : "";
                        b(c.cDiv).append(ia).append("<span class='ui-jqgrid-title" + ("rtl" === f ? "-rtl" : "") + "'>" + a.p.caption + "</span>").addClass("ui-jqgrid-titlebar ui-widget-header ui-corner-top ui-helper-clearfix");
                        b(c.cDiv).insertBefore(c.hDiv);
                        a.p.toolbar[0] && (c.uDiv = document.createElement("div"), "top" === a.p.toolbar[1] ? b(c.uDiv).insertBefore(c.hDiv) : "bottom" === a.p.toolbar[1] && b(c.uDiv).insertAfter(c.hDiv), "both" === a.p.toolbar[1] ? (c.ubDiv = document.createElement("div"), b(c.uDiv).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id).insertBefore(c.hDiv), b(c.ubDiv).addClass("ui-userdata ui-state-default").attr("id", "tb_" + this.id).insertAfter(c.hDiv), H && b(c.ubDiv).hide()) : b(c.uDiv).width(c.width).addClass("ui-userdata ui-state-default").attr("id",
                            "t_" + this.id), H && b(c.uDiv).hide());
                        a.p.toppager && (a.p.toppager = b.jgrid.jqID(a.p.id) + "_toppager", c.topDiv = b("<div id='" + a.p.toppager + "'></div>")[0], a.p.toppager = "#" + a.p.toppager, b(c.topDiv).addClass("ui-state-default ui-jqgrid-toppager").width(c.width).insertBefore(c.hDiv), ka(a.p.toppager, "_t"));
                        a.p.footerrow && (c.sDiv = b("<div class='ui-jqgrid-sdiv'></div>")[0], g = b("<div class='ui-jqgrid-hbox" + ("rtl" === f ? "-rtl" : "") + "'></div>"), b(c.sDiv).append(g).width(c.width).insertAfter(c.hDiv), b(g).append(Q), c.footers =
                            b(".ui-jqgrid-ftable", c.sDiv)[0].rows[0].cells, a.p.rownumbers && (c.footers[0].className = "ui-state-default jqgrid-rownum"), H && b(c.sDiv).hide());
                        g = null;
                        if (a.p.caption) {
                            var ta = a.p.datatype;
                            !0 === a.p.hidegrid && (b(".ui-jqgrid-titlebar-close", c.cDiv).click(function (d) {
                                var e = b.isFunction(a.p.onHeaderClick), g = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv", f, h = this;
                                if (a.p.toolbar[0] === true) {
                                    a.p.toolbar[1] === "both" && (g = g + (", #" + b(c.ubDiv).attr("id")));
                                    g = g + (", #" + b(c.uDiv).attr("id"))
                                }
                                f =
                                    b(g, "#gview_" + b.jgrid.jqID(a.p.id)).length;
                                a.p.gridstate === "visible" ? b(g, "#gbox_" + b.jgrid.jqID(a.p.id)).slideUp("fast", function () {
                                    f--;
                                    if (f === 0) {
                                        b("span", h).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");
                                        a.p.gridstate = "hidden";
                                        b("#gbox_" + b.jgrid.jqID(a.p.id)).hasClass("ui-resizable") && b(".ui-resizable-handle", "#gbox_" + b.jgrid.jqID(a.p.id)).hide();
                                        b(a).triggerHandler("jqGridHeaderClick", [a.p.gridstate, d]);
                                        e && (H || a.p.onHeaderClick.call(a, a.p.gridstate, d))
                                    }
                                }) : a.p.gridstate ===
                                    "hidden" && b(g, "#gbox_" + b.jgrid.jqID(a.p.id)).slideDown("fast", function () {
                                    f--;
                                    if (f === 0) {
                                        b("span", h).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");
                                        if (H) {
                                            a.p.datatype = ta;
                                            O();
                                            H = false
                                        }
                                        a.p.gridstate = "visible";
                                        b("#gbox_" + b.jgrid.jqID(a.p.id)).hasClass("ui-resizable") && b(".ui-resizable-handle", "#gbox_" + b.jgrid.jqID(a.p.id)).show();
                                        b(a).triggerHandler("jqGridHeaderClick", [a.p.gridstate, d]);
                                        e && (H || a.p.onHeaderClick.call(a, a.p.gridstate, d))
                                    }
                                });
                                return false
                            }), H && (a.p.datatype =
                                "local", b(".ui-jqgrid-titlebar-close", c.cDiv).trigger("click")))
                        } else b(c.cDiv).hide();
                        b(c.hDiv).after(c.bDiv).mousemove(function (a) {
                            if (c.resizing) {
                                c.dragMove(a);
                                return false
                            }
                        });
                        b(".ui-jqgrid-labels", c.hDiv).bind("selectstart", function () {
                            return false
                        });
                        b(document).mouseup(function () {
                            if (c.resizing) {
                                c.dragEnd();
                                return false
                            }
                            return true
                        });
                        a.formatCol = n;
                        a.sortData = la;
                        a.updatepager = function (c, d) {
                            var e, g, f, h, i, j, k, l = "", m = a.p.pager ? "_" + b.jgrid.jqID(a.p.pager.substr(1)) : "", n = a.p.toppager ? "_" + a.p.toppager.substr(1) :
                                "";
                            f = parseInt(a.p.page, 10) - 1;
                            f < 0 && (f = 0);
                            f = f * parseInt(a.p.rowNum, 10);
                            i = f + a.p.reccount;
                            if (a.p.scroll) {
                                e = b("tbody:first > tr:gt(0)", a.grid.bDiv);
                                f = i - e.length;
                                a.p.reccount = e.length;
                                if (e = e.outerHeight() || a.grid.prevRowHeight) {
                                    g = f * e;
                                    k = parseInt(a.p.records, 10) * e;
                                    b(">div:first", a.grid.bDiv).css({height: k}).children("div:first").css({height: g, display: g ? "" : "none"});
                                    if (a.grid.bDiv.scrollTop == 0 && a.p.page > 1)a.grid.bDiv.scrollTop = a.p.rowNum * (a.p.page - 1) * e
                                }
                                a.grid.bDiv.scrollLeft = a.grid.hDiv.scrollLeft
                            }
                            l = a.p.pager ||
                                "";
                            if (l = l + (a.p.toppager ? l ? "," + a.p.toppager : a.p.toppager : "")) {
                                k = b.jgrid.formatter.integer || {};
                                e = o(a.p.page);
                                g = o(a.p.lastpage);
                                b(".selbox", l)[this.p.useProp ? "prop" : "attr"]("disabled", false);
                                if (a.p.pginput === true) {
                                    b(".ui-pg-input", l).val(a.p.page);
                                    h = a.p.toppager ? "#sp_1" + m + ",#sp_1" + n : "#sp_1" + m;
                                    b(h).html(b.fmatter ? b.fmatter.util.NumberFormat(a.p.lastpage, k) : a.p.lastpage)
                                }
                                if (a.p.viewrecords)if (a.p.reccount === 0)b(".ui-paging-info", l).html(a.p.emptyrecords); else {
                                    h = f + 1;
                                    j = a.p.records;
                                    if (b.fmatter) {
                                        h = b.fmatter.util.NumberFormat(h,
                                            k);
                                        i = b.fmatter.util.NumberFormat(i, k);
                                        j = b.fmatter.util.NumberFormat(j, k)
                                    }
                                    b(".ui-paging-info", l).html(b.jgrid.format(a.p.recordtext, h, i, j))
                                }
                                if (a.p.pgbuttons === true) {
                                    e <= 0 && (e = g = 0);
                                    if (e === 1 || e === 0) {
                                        b("#first" + m + ", #prev" + m).addClass("ui-state-disabled").removeClass("ui-state-hover");
                                        a.p.toppager && b("#first_t" + n + ", #prev_t" + n).addClass("ui-state-disabled").removeClass("ui-state-hover")
                                    } else {
                                        b("#first" + m + ", #prev" + m).removeClass("ui-state-disabled");
                                        a.p.toppager && b("#first_t" + n + ", #prev_t" + n).removeClass("ui-state-disabled")
                                    }
                                    if (e ===
                                        g || e === 0) {
                                        b("#next" + m + ", #last" + m).addClass("ui-state-disabled").removeClass("ui-state-hover");
                                        a.p.toppager && b("#next_t" + n + ", #last_t" + n).addClass("ui-state-disabled").removeClass("ui-state-hover")
                                    } else {
                                        b("#next" + m + ", #last" + m).removeClass("ui-state-disabled");
                                        a.p.toppager && b("#next_t" + n + ", #last_t" + n).removeClass("ui-state-disabled")
                                    }
                                }
                            }
                            c === true && a.p.rownumbers === true && b(">td.jqgrid-rownum", a.rows).each(function (a) {
                                b(this).html(f + 1 + a)
                            });
                            d && a.p.jqgdnd && b(a).jqGrid("gridDnD", "updateDnD");
                            b(a).triggerHandler("jqGridGridComplete");
                            b.isFunction(a.p.gridComplete) && a.p.gridComplete.call(a);
                            b(a).triggerHandler("jqGridAfterGridComplete")
                        };
                        a.refreshIndex = N;
                        a.setHeadCheckBox = ca;
                        a.constructTr = X;
                        a.formatter = function (a, b, c, d, e) {
                            return t(a, b, c, d, e)
                        };
                        b.extend(c, {populate: O, emptyRows: V});
                        this.grid = c;
                        a.addXmlData = function (b) {
                            J(b, a.grid.bDiv)
                        };
                        a.addJSONData = function (b) {
                            S(b, a.grid.bDiv)
                        };
                        this.grid.cols = this.rows[0].cells;
                        b(a).triggerHandler("jqGridInitGrid");
                        b.isFunction(a.p.onInitGrid) && a.p.onInitGrid.call(a);
                        O();
                        a.p.hiddengrid = !1
                    }
                }
            }
        })
    };
    b.jgrid.extend({getGridParam: function (b) {
        var f = this[0];
        return!f || !f.grid ? void 0 : !b ? f.p : void 0 !== f.p[b] ? f.p[b] : null
    }, setGridParam: function (d) {
        return this.each(function () {
            this.grid && "object" === typeof d && b.extend(!0, this.p, d)
        })
    }, getDataIDs: function () {
        var d = [], f = 0, c, e = 0;
        this.each(function () {
            if ((c = this.rows.length) && 0 < c)for (; f < c;)b(this.rows[f]).hasClass("jqgrow") && (d[e] = this.rows[f].id, e++), f++
        });
        return d
    }, setSelection: function (d, f, c) {
        return this.each(function () {
            var e, a, j, g, h, i;
            if (void 0 !== d && (f = !1 ===
                f ? !1 : !0, (a = this.rows.namedItem("" + d)) && a.className && !(-1 < a.className.indexOf("ui-state-disabled"))))if (!0 === this.p.scrollrows && (j = this.rows.namedItem(d).rowIndex, 0 <= j && (e = b(this.grid.bDiv)[0].clientHeight, g = b(this.grid.bDiv)[0].scrollTop, h = b(this.rows[j]).position().top, j = this.rows[j].clientHeight, h + j >= e + g ? b(this.grid.bDiv)[0].scrollTop = h - (e + g) + j + g : h < e + g && h < g && (b(this.grid.bDiv)[0].scrollTop = h))), !0 === this.p.frozenColumns && (i = this.p.id + "_frozen"), this.p.multiselect) {
                if (this.setHeadCheckBox(!1), this.p.selrow =
                    a.id, g = b.inArray(this.p.selrow, this.p.selarrrow), -1 === g ? ("ui-subgrid" !== a.className && b(a).addClass("ui-state-highlight").attr("aria-selected", "true"), e = !0, this.p.selarrrow.push(this.p.selrow)) : ("ui-subgrid" !== a.className && b(a).removeClass("ui-state-highlight").attr("aria-selected", "false"), e = !1, this.p.selarrrow.splice(g, 1), h = this.p.selarrrow[0], this.p.selrow = void 0 === h ? null : h), b("#jqg_" + b.jgrid.jqID(this.p.id) + "_" + b.jgrid.jqID(a.id))[this.p.useProp ? "prop" : "attr"]("checked", e), i && (-1 === g ? b("#" + b.jgrid.jqID(d),
                    "#" + b.jgrid.jqID(i)).addClass("ui-state-highlight") : b("#" + b.jgrid.jqID(d), "#" + b.jgrid.jqID(i)).removeClass("ui-state-highlight"), b("#jqg_" + b.jgrid.jqID(this.p.id) + "_" + b.jgrid.jqID(d), "#" + b.jgrid.jqID(i))[this.p.useProp ? "prop" : "attr"]("checked", e)), f)b(this).triggerHandler("jqGridSelectRow", [a.id, e, c]), this.p.onSelectRow && this.p.onSelectRow.call(this, a.id, e, c)
            } else if ("ui-subgrid" !== a.className && (this.p.selrow !== a.id ? (b(this.rows.namedItem(this.p.selrow)).removeClass("ui-state-highlight").attr({"aria-selected": "false",
                tabindex: "-1"}), b(a).addClass("ui-state-highlight").attr({"aria-selected": "true", tabindex: "0"}), i && (b("#" + b.jgrid.jqID(this.p.selrow), "#" + b.jgrid.jqID(i)).removeClass("ui-state-highlight"), b("#" + b.jgrid.jqID(d), "#" + b.jgrid.jqID(i)).addClass("ui-state-highlight")), e = !0) : e = !1, this.p.selrow = a.id, f))b(this).triggerHandler("jqGridSelectRow", [a.id, e, c]), this.p.onSelectRow && this.p.onSelectRow.call(this, a.id, e, c)
        })
    }, resetSelection: function (d) {
        return this.each(function () {
            var f = this, c, e, a;
            !0 === f.p.frozenColumns &&
            (a = f.p.id + "_frozen");
            if (void 0 !== d) {
                e = d === f.p.selrow ? f.p.selrow : d;
                b("#" + b.jgrid.jqID(f.p.id) + " tbody:first tr#" + b.jgrid.jqID(e)).removeClass("ui-state-highlight").attr("aria-selected", "false");
                a && b("#" + b.jgrid.jqID(e), "#" + b.jgrid.jqID(a)).removeClass("ui-state-highlight");
                if (f.p.multiselect) {
                    b("#jqg_" + b.jgrid.jqID(f.p.id) + "_" + b.jgrid.jqID(e), "#" + b.jgrid.jqID(f.p.id))[f.p.useProp ? "prop" : "attr"]("checked", !1);
                    if (a)b("#jqg_" + b.jgrid.jqID(f.p.id) + "_" + b.jgrid.jqID(e), "#" + b.jgrid.jqID(a))[f.p.useProp ? "prop" :
                        "attr"]("checked", !1);
                    f.setHeadCheckBox(!1)
                }
                e = null
            } else f.p.multiselect ? (b(f.p.selarrrow).each(function (d, e) {
                c = f.rows.namedItem(e);
                b(c).removeClass("ui-state-highlight").attr("aria-selected", "false");
                b("#jqg_" + b.jgrid.jqID(f.p.id) + "_" + b.jgrid.jqID(e))[f.p.useProp ? "prop" : "attr"]("checked", !1);
                a && (b("#" + b.jgrid.jqID(e), "#" + b.jgrid.jqID(a)).removeClass("ui-state-highlight"), b("#jqg_" + b.jgrid.jqID(f.p.id) + "_" + b.jgrid.jqID(e), "#" + b.jgrid.jqID(a))[f.p.useProp ? "prop" : "attr"]("checked", !1))
            }), f.setHeadCheckBox(!1),
                f.p.selarrrow = []) : f.p.selrow && (b("#" + b.jgrid.jqID(f.p.id) + " tbody:first tr#" + b.jgrid.jqID(f.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected", "false"), a && b("#" + b.jgrid.jqID(f.p.selrow), "#" + b.jgrid.jqID(a)).removeClass("ui-state-highlight"), f.p.selrow = null);
            !0 === f.p.cellEdit && 0 <= parseInt(f.p.iCol, 10) && 0 <= parseInt(f.p.iRow, 10) && (b("td:eq(" + f.p.iCol + ")", f.rows[f.p.iRow]).removeClass("edit-cell ui-state-highlight"), b(f.rows[f.p.iRow]).removeClass("selected-row ui-state-hover"));
            f.p.savedRow =
                []
        })
    }, getRowData: function (d) {
        var f = {}, c, e = !1, a, j = 0;
        this.each(function () {
            var g = this, h, i;
            if (void 0 === d)e = !0, c = [], a = g.rows.length; else {
                i = g.rows.namedItem(d);
                if (!i)return f;
                a = 2
            }
            for (; j < a;)e && (i = g.rows[j]), b(i).hasClass("jqgrow") && (b('td[role="gridcell"]', i).each(function (a) {
                h = g.p.colModel[a].name;
                if ("cb" !== h && "subgrid" !== h && "rn" !== h)if (!0 === g.p.treeGrid && h === g.p.ExpandColumn)f[h] = b.jgrid.htmlDecode(b("span:first", this).html()); else try {
                    f[h] = b.unformat.call(g, this, {rowId: i.id, colModel: g.p.colModel[a]},
                        a)
                } catch (c) {
                    f[h] = b.jgrid.htmlDecode(b(this).html())
                }
            }), e && (c.push(f), f = {})), j++
        });
        return c || f
    }, delRowData: function (d) {
        var f = !1, c, e;
        this.each(function () {
            c = this.rows.namedItem(d);
            if (!c)return!1;
            b(c).remove();
            this.p.records--;
            this.p.reccount--;
            this.updatepager(!0, !1);
            f = !0;
            this.p.multiselect && (e = b.inArray(d, this.p.selarrrow), -1 !== e && this.p.selarrrow.splice(e, 1));
            this.p.selrow = this.p.multiselect && 0 < this.p.selarrrow.length ? this.p.selarrrow[this.p.selarrrow.length - 1] : null;
            if ("local" === this.p.datatype) {
                var a =
                    this.p._index[b.jgrid.stripPref(this.p.idPrefix, d)];
                void 0 !== a && (this.p.data.splice(a, 1), this.refreshIndex())
            }
            if (!0 === this.p.altRows && f) {
                var j = this.p.altclass;
                b(this.rows).each(function (a) {
                    a % 2 === 1 ? b(this).addClass(j) : b(this).removeClass(j)
                })
            }
        });
        return f
    }, setRowData: function (d, f, c) {
        var e, a = !0, j;
        this.each(function () {
            if (!this.grid)return!1;
            var g = this, h, i, k = typeof c, l = {};
            i = g.rows.namedItem(d);
            if (!i)return!1;
            if (f)try {
                if (b(this.p.colModel).each(function (a) {
                    e = this.name;
                    var c = b.jgrid.getAccessor(f, e);
                    void 0 !==
                        c && (l[e] = this.formatter && "string" === typeof this.formatter && "date" === this.formatter ? b.unformat.date.call(g, c, this) : c, h = g.formatter(d, c, a, f, "edit"), j = this.title ? {title: b.jgrid.stripHtml(h)} : {}, !0 === g.p.treeGrid && e === g.p.ExpandColumn ? b("td[role='gridcell']:eq(" + a + ") > span:first", i).html(h).attr(j) : b("td[role='gridcell']:eq(" + a + ")", i).html(h).attr(j))
                }), "local" === g.p.datatype) {
                    var o = b.jgrid.stripPref(g.p.idPrefix, d), n = g.p._index[o], m;
                    if (g.p.treeGrid)for (m in g.p.treeReader)g.p.treeReader.hasOwnProperty(m) && delete l[g.p.treeReader[m]];
                    void 0 !== n && (g.p.data[n] = b.extend(!0, g.p.data[n], l));
                    l = null
                }
            } catch (t) {
                a = !1
            }
            a && ("string" === k ? b(i).addClass(c) : "object" === k && b(i).css(c), b(g).triggerHandler("jqGridAfterGridComplete"))
        });
        return a
    }, addRowData: function (d, f, c, e) {
        c || (c = "last");
        var a = !1, j, g, h, i, k, l, o, n, m = "", t, A, T, M, $, U;
        f && (b.isArray(f) ? (t = !0, c = "last", A = d) : (f = [f], t = !1), this.each(function () {
            var V = f.length;
            k = this.p.rownumbers === true ? 1 : 0;
            h = this.p.multiselect === true ? 1 : 0;
            i = this.p.subGrid === true ? 1 : 0;
            if (!t)if (d !== void 0)d =
                "" + d; else {
                d = b.jgrid.randId();
                if (this.p.keyIndex !== false) {
                    A = this.p.colModel[this.p.keyIndex + h + i + k].name;
                    f[0][A] !== void 0 && (d = f[0][A])
                }
            }
            T = this.p.altclass;
            for (var N = 0, X = "", J = {}, S = b.isFunction(this.p.afterInsertRow) ? true : false; N < V;) {
                M = f[N];
                g = [];
                if (t) {
                    try {
                        d = M[A];
                        d === void 0 && (d = b.jgrid.randId())
                    } catch (ja) {
                        d = b.jgrid.randId()
                    }
                    X = this.p.altRows === true ? (this.rows.length - 1) % 2 === 0 ? T : "" : ""
                }
                U = d;
                d = this.p.idPrefix + d;
                if (k) {
                    m = this.formatCol(0, 1, "", null, d, true);
                    g[g.length] = '<td role="gridcell" class="ui-state-default jqgrid-rownum" ' +
                        m + ">0</td>"
                }
                if (h) {
                    n = '<input role="checkbox" type="checkbox" id="jqg_' + this.p.id + "_" + d + '" class="cbox"/>';
                    m = this.formatCol(k, 1, "", null, d, true);
                    g[g.length] = '<td role="gridcell" ' + m + ">" + n + "</td>"
                }
                i && (g[g.length] = b(this).jqGrid("addSubGridCell", h + k, 1));
                for (o = h + i + k; o < this.p.colModel.length; o++) {
                    $ = this.p.colModel[o];
                    j = $.name;
                    J[j] = M[j];
                    n = this.formatter(d, b.jgrid.getAccessor(M, j), o, M);
                    m = this.formatCol(o, 1, n, M, d, J);
                    g[g.length] = '<td role="gridcell" ' + m + ">" + n + "</td>"
                }
                g.unshift(this.constructTr(d, false, X, J, M,
                    false));
                g[g.length] = "</tr>";
                if (this.rows.length === 0)b("table:first", this.grid.bDiv).append(g.join("")); else switch (c) {
                    case "last":
                        b(this.rows[this.rows.length - 1]).after(g.join(""));
                        l = this.rows.length - 1;
                        break;
                    case "first":
                        b(this.rows[0]).after(g.join(""));
                        l = 1;
                        break;
                    case "after":
                        (l = this.rows.namedItem(e)) && (b(this.rows[l.rowIndex + 1]).hasClass("ui-subgrid") ? b(this.rows[l.rowIndex + 1]).after(g) : b(l).after(g.join("")));
                        l++;
                        break;
                    case "before":
                        if (l = this.rows.namedItem(e)) {
                            b(l).before(g.join(""));
                            l = l.rowIndex
                        }
                        l--
                }
                this.p.subGrid ===
                    true && b(this).jqGrid("addSubGrid", h + k, l);
                this.p.records++;
                this.p.reccount++;
                b(this).triggerHandler("jqGridAfterInsertRow", [d, M, M]);
                S && this.p.afterInsertRow.call(this, d, M, M);
                N++;
                if (this.p.datatype === "local") {
                    J[this.p.localReader.id] = U;
                    this.p._index[U] = this.p.data.length;
                    this.p.data.push(J);
                    J = {}
                }
            }
            this.p.altRows === true && !t && (c === "last" ? (this.rows.length - 1) % 2 === 1 && b(this.rows[this.rows.length - 1]).addClass(T) : b(this.rows).each(function (a) {
                a % 2 === 1 ? b(this).addClass(T) : b(this).removeClass(T)
            }));
            this.updatepager(true,
                true);
            a = true
        }));
        return a
    }, footerData: function (d, f, c) {
        function e(a) {
            for (var b in a)if (a.hasOwnProperty(b))return!1;
            return!0
        }

        var a, j = !1, g = {}, h;
        void 0 === d && (d = "get");
        "boolean" !== typeof c && (c = !0);
        d = d.toLowerCase();
        this.each(function () {
            var i = this, k;
            if (!i.grid || !i.p.footerrow || "set" === d && e(f))return!1;
            j = !0;
            b(this.p.colModel).each(function (e) {
                a = this.name;
                "set" === d ? void 0 !== f[a] && (k = c ? i.formatter("", f[a], e, f, "edit") : f[a], h = this.title ? {title: b.jgrid.stripHtml(k)} : {}, b("tr.footrow td:eq(" + e + ")", i.grid.sDiv).html(k).attr(h),
                    j = !0) : "get" === d && (g[a] = b("tr.footrow td:eq(" + e + ")", i.grid.sDiv).html())
            })
        });
        return"get" === d ? g : j
    }, showHideCol: function (d, f) {
        return this.each(function () {
            var c = this, e = !1, a = b.jgrid.cell_width ? 0 : c.p.cellLayout, j;
            if (c.grid) {
                "string" === typeof d && (d = [d]);
                f = "none" !== f ? "" : "none";
                var g = "" === f ? !0 : !1, h = c.p.groupHeader && ("object" === typeof c.p.groupHeader || b.isFunction(c.p.groupHeader));
                h && b(c).jqGrid("destroyGroupHeader", !1);
                b(this.p.colModel).each(function (h) {
                    if (-1 !== b.inArray(this.name, d) && this.hidden === g) {
                        if (!0 ===
                            c.p.frozenColumns && !0 === this.frozen)return!0;
                        b("tr", c.grid.hDiv).each(function () {
                            b(this.cells[h]).css("display", f)
                        });
                        b(c.rows).each(function () {
                            b(this).hasClass("jqgroup") || b(this.cells[h]).css("display", f)
                        });
                        c.p.footerrow && b("tr.footrow td:eq(" + h + ")", c.grid.sDiv).css("display", f);
                        j = parseInt(this.width, 10);
                        c.p.tblwidth = "none" === f ? c.p.tblwidth - (j + a) : c.p.tblwidth + (j + a);
                        this.hidden = !g;
                        e = !0;
                        b(c).triggerHandler("jqGridShowHideCol", [g, this.name, h])
                    }
                });
                !0 === e && (!0 === c.p.shrinkToFit && !isNaN(c.p.height) && (c.p.tblwidth +=
                    parseInt(c.p.scrollOffset, 10)), b(c).jqGrid("setGridWidth", !0 === c.p.shrinkToFit ? c.p.tblwidth : c.p.width));
                h && b(c).jqGrid("setGroupHeaders", c.p.groupHeader)
            }
        })
    }, hideCol: function (d) {
        return this.each(function () {
            b(this).jqGrid("showHideCol", d, "none")
        })
    }, showCol: function (d) {
        return this.each(function () {
            b(this).jqGrid("showHideCol", d, "")
        })
    }, remapColumns: function (d, f, c) {
        function e(a) {
            var c;
            c = a.length ? b.makeArray(a) : b.extend({}, a);
            b.each(d, function (b) {
                a[b] = c[this]
            })
        }

        function a(a, c) {
            b(">tr" + (c || ""), a).each(function () {
                var a =
                    this, c = b.makeArray(a.cells);
                b.each(d, function () {
                    var b = c[this];
                    b && a.appendChild(b)
                })
            })
        }

        var j = this.get(0);
        e(j.p.colModel);
        e(j.p.colNames);
        e(j.grid.headers);
        a(b("thead:first", j.grid.hDiv), c && ":not(.ui-jqgrid-labels)");
        f && a(b("#" + b.jgrid.jqID(j.p.id) + " tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
        j.p.footerrow && a(b("tbody:first", j.grid.sDiv));
        j.p.remapColumns && (j.p.remapColumns.length ? e(j.p.remapColumns) : j.p.remapColumns = b.makeArray(d));
        j.p.lastsort = b.inArray(j.p.lastsort, d);
        j.p.treeGrid && (j.p.expColInd =
            b.inArray(j.p.expColInd, d));
        b(j).triggerHandler("jqGridRemapColumns", [d, f, c])
    }, setGridWidth: function (d, f) {
        return this.each(function () {
            if (this.grid) {
                var c = this, e, a = 0, j = b.jgrid.cell_width ? 0 : c.p.cellLayout, g, h = 0, i = !1, k = c.p.scrollOffset, l, o = 0, n;
                "boolean" !== typeof f && (f = c.p.shrinkToFit);
                if (!isNaN(d)) {
                    d = parseInt(d, 10);
                    c.grid.width = c.p.width = d;
                    b("#gbox_" + b.jgrid.jqID(c.p.id)).css("width", d + "px");
                    b("#gview_" + b.jgrid.jqID(c.p.id)).css("width", d + "px");
                    b(c.grid.bDiv).css("width", d + "px");
                    b(c.grid.hDiv).css("width",
                        d + "px");
                    c.p.pager && b(c.p.pager).css("width", d + "px");
                    c.p.toppager && b(c.p.toppager).css("width", d + "px");
                    !0 === c.p.toolbar[0] && (b(c.grid.uDiv).css("width", d + "px"), "both" === c.p.toolbar[1] && b(c.grid.ubDiv).css("width", d + "px"));
                    c.p.footerrow && b(c.grid.sDiv).css("width", d + "px");
                    !1 === f && !0 === c.p.forceFit && (c.p.forceFit = !1);
                    if (!0 === f) {
                        b.each(c.p.colModel, function () {
                            if (this.hidden === false) {
                                e = this.widthOrg;
                                a = a + (e + j);
                                this.fixed ? o = o + (e + j) : h++
                            }
                        });
                        if (0 === h)return;
                        c.p.tblwidth = a;
                        l = d - j * h - o;
                        if (!isNaN(c.p.height) && (b(c.grid.bDiv)[0].clientHeight <
                            b(c.grid.bDiv)[0].scrollHeight || 1 === c.rows.length))i = !0, l -= k;
                        var a = 0, m = 0 < c.grid.cols.length;
                        b.each(c.p.colModel, function (b) {
                            if (this.hidden === false && !this.fixed) {
                                e = this.widthOrg;
                                e = Math.round(l * e / (c.p.tblwidth - j * h - o));
                                if (!(e < 0)) {
                                    this.width = e;
                                    a = a + e;
                                    c.grid.headers[b].width = e;
                                    c.grid.headers[b].el.style.width = e + "px";
                                    if (c.p.footerrow)c.grid.footers[b].style.width = e + "px";
                                    if (m)c.grid.cols[b].style.width = e + "px";
                                    g = b
                                }
                            }
                        });
                        if (!g)return;
                        n = 0;
                        i ? d - o - (a + j * h) !== k && (n = d - o - (a + j * h) - k) : 1 !== Math.abs(d - o - (a + j * h)) && (n = d - o -
                            (a + j * h));
                        c.p.colModel[g].width += n;
                        c.p.tblwidth = a + n + j * h + o;
                        c.p.tblwidth > d ? (i = c.p.tblwidth - parseInt(d, 10), c.p.tblwidth = d, e = c.p.colModel[g].width -= i) : e = c.p.colModel[g].width;
                        c.grid.headers[g].width = e;
                        c.grid.headers[g].el.style.width = e + "px";
                        m && (c.grid.cols[g].style.width = e + "px");
                        c.p.footerrow && (c.grid.footers[g].style.width = e + "px")
                    }
                    c.p.tblwidth && (b("table:first", c.grid.bDiv).css("width", c.p.tblwidth + "px"), b("table:first", c.grid.hDiv).css("width", c.p.tblwidth + "px"), c.grid.hDiv.scrollLeft = c.grid.bDiv.scrollLeft,
                        c.p.footerrow && b("table:first", c.grid.sDiv).css("width", c.p.tblwidth + "px"))
                }
            }
        })
    }, setGridHeight: function (d) {
        return this.each(function () {
            if (this.grid) {
                var f = b(this.grid.bDiv);
                f.css({height: d + (isNaN(d) ? "" : "px")});
                !0 === this.p.frozenColumns && b("#" + b.jgrid.jqID(this.p.id) + "_frozen").parent().height(f.height() - 16);
                this.p.height = d;
                this.p.scroll && this.grid.populateVisible()
            }
        })
    }, setCaption: function (d) {
        return this.each(function () {
            this.p.caption = d;
            b("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl", this.grid.cDiv).html(d);
            b(this.grid.cDiv).show()
        })
    }, setLabel: function (d, f, c, e) {
        return this.each(function () {
            var a = -1;
            if (this.grid && void 0 !== d && (b(this.p.colModel).each(function (b) {
                if (this.name === d)return a = b, !1
            }), 0 <= a)) {
                var j = b("tr.ui-jqgrid-labels th:eq(" + a + ")", this.grid.hDiv);
                if (f) {
                    var g = b(".s-ico", j);
                    b("[id^=jqgh_]", j).empty().html(f).append(g);
                    this.p.colNames[a] = f
                }
                c && ("string" === typeof c ? b(j).addClass(c) : b(j).css(c));
                "object" === typeof e && b(j).attr(e)
            }
        })
    }, setCell: function (d, f, c, e, a, j) {
        return this.each(function () {
            var g =
                -1, h, i;
            if (this.grid && (isNaN(f) ? b(this.p.colModel).each(function (a) {
                if (this.name === f)return g = a, !1
            }) : g = parseInt(f, 10), 0 <= g && (h = this.rows.namedItem(d)))) {
                var k = b("td:eq(" + g + ")", h);
                if ("" !== c || !0 === j)h = this.formatter(d, c, g, h, "edit"), i = this.p.colModel[g].title ? {title: b.jgrid.stripHtml(h)} : {}, this.p.treeGrid && 0 < b(".tree-wrap", b(k)).length ? b("span", b(k)).html(h).attr(i) : b(k).html(h).attr(i), "local" === this.p.datatype && (h = this.p.colModel[g], c = h.formatter && "string" === typeof h.formatter && "date" === h.formatter ?
                    b.unformat.date.call(this, c, h) : c, i = this.p._index[b.jgrid.stripPref(this.p.idPrefix, d)], void 0 !== i && (this.p.data[i][h.name] = c));
                "string" === typeof e ? b(k).addClass(e) : e && b(k).css(e);
                "object" === typeof a && b(k).attr(a)
            }
        })
    }, getCell: function (d, f) {
        var c = !1;
        this.each(function () {
            var e = -1;
            if (this.grid && (isNaN(f) ? b(this.p.colModel).each(function (a) {
                if (this.name === f)return e = a, !1
            }) : e = parseInt(f, 10), 0 <= e)) {
                var a = this.rows.namedItem(d);
                if (a)try {
                    c = b.unformat.call(this, b("td:eq(" + e + ")", a), {rowId: a.id, colModel: this.p.colModel[e]},
                        e)
                } catch (j) {
                    c = b.jgrid.htmlDecode(b("td:eq(" + e + ")", a).html())
                }
            }
        });
        return c
    }, getCol: function (d, f, c) {
        var e = [], a, j = 0, g, h, i, f = "boolean" !== typeof f ? !1 : f;
        void 0 === c && (c = !1);
        this.each(function () {
            var k = -1;
            if (this.grid && (isNaN(d) ? b(this.p.colModel).each(function (a) {
                if (this.name === d)return k = a, !1
            }) : k = parseInt(d, 10), 0 <= k)) {
                var l = this.rows.length, o = 0;
                if (l && 0 < l) {
                    for (; o < l;) {
                        if (b(this.rows[o]).hasClass("jqgrow")) {
                            try {
                                a = b.unformat.call(this, b(this.rows[o].cells[k]), {rowId: this.rows[o].id, colModel: this.p.colModel[k]},
                                    k)
                            } catch (n) {
                                a = b.jgrid.htmlDecode(this.rows[o].cells[k].innerHTML)
                            }
                            c ? (i = parseFloat(a), j += i, void 0 === h && (h = g = i), g = Math.min(g, i), h = Math.max(h, i)) : f ? e.push({id: this.rows[o].id, value: a}) : e.push(a)
                        }
                        o++
                    }
                    if (c)switch (c.toLowerCase()) {
                        case "sum":
                            e = j;
                            break;
                        case "avg":
                            e = j / l;
                            break;
                        case "count":
                            e = l;
                            break;
                        case "min":
                            e = g;
                            break;
                        case "max":
                            e = h
                    }
                }
            }
        });
        return e
    }, clearGridData: function (d) {
        return this.each(function () {
            if (this.grid) {
                "boolean" !== typeof d && (d = !1);
                if (this.p.deepempty)b("#" + b.jgrid.jqID(this.p.id) + " tbody:first tr:gt(0)").remove();
                else {
                    var f = b("#" + b.jgrid.jqID(this.p.id) + " tbody:first tr:first")[0];
                    b("#" + b.jgrid.jqID(this.p.id) + " tbody:first").empty().append(f)
                }
                this.p.footerrow && d && b(".ui-jqgrid-ftable td", this.grid.sDiv).html("&#160;");
                this.p.selrow = null;
                this.p.selarrrow = [];
                this.p.savedRow = [];
                this.p.records = 0;
                this.p.page = 1;
                this.p.lastpage = 0;
                this.p.reccount = 0;
                this.p.data = [];
                this.p._index = {};
                this.updatepager(!0, !1)
            }
        })
    }, getInd: function (b, f) {
        var c = !1, e;
        this.each(function () {
            (e = this.rows.namedItem(b)) && (c = !0 === f ? e : e.rowIndex)
        });
        return c
    }, bindKeys: function (d) {
        var f = b.extend({onEnter: null, onSpace: null, onLeftKey: null, onRightKey: null, scrollingRows: !0}, d || {});
        return this.each(function () {
            var c = this;
            b("body").is("[role]") || b("body").attr("role", "application");
            c.p.scrollrows = f.scrollingRows;
            b(c).keydown(function (d) {
                var a = b(c).find("tr[tabindex=0]")[0], j, g, h, i = c.p.treeReader.expanded_field;
                if (a)if (h = c.p._index[b.jgrid.stripPref(c.p.idPrefix, a.id)], 37 === d.keyCode || 38 === d.keyCode || 39 === d.keyCode || 40 === d.keyCode) {
                    if (38 === d.keyCode) {
                        g =
                            a.previousSibling;
                        j = "";
                        if (g)if (b(g).is(":hidden"))for (; g;) {
                            if (g = g.previousSibling, !b(g).is(":hidden") && b(g).hasClass("jqgrow")) {
                                j = g.id;
                                break
                            }
                        } else j = g.id;
                        b(c).jqGrid("setSelection", j, !0, d);
                        d.preventDefault()
                    }
                    if (40 === d.keyCode) {
                        g = a.nextSibling;
                        j = "";
                        if (g)if (b(g).is(":hidden"))for (; g;) {
                            if (g = g.nextSibling, !b(g).is(":hidden") && b(g).hasClass("jqgrow")) {
                                j = g.id;
                                break
                            }
                        } else j = g.id;
                        b(c).jqGrid("setSelection", j, !0, d);
                        d.preventDefault()
                    }
                    37 === d.keyCode && (c.p.treeGrid && c.p.data[h][i] && b(a).find("div.treeclick").trigger("click"),
                        b(c).triggerHandler("jqGridKeyLeft", [c.p.selrow]), b.isFunction(f.onLeftKey) && f.onLeftKey.call(c, c.p.selrow));
                    39 === d.keyCode && (c.p.treeGrid && !c.p.data[h][i] && b(a).find("div.treeclick").trigger("click"), b(c).triggerHandler("jqGridKeyRight", [c.p.selrow]), b.isFunction(f.onRightKey) && f.onRightKey.call(c, c.p.selrow))
                } else 13 === d.keyCode ? (b(c).triggerHandler("jqGridKeyEnter", [c.p.selrow]), b.isFunction(f.onEnter) && f.onEnter.call(c, c.p.selrow)) : 32 === d.keyCode && (b(c).triggerHandler("jqGridKeySpace", [c.p.selrow]),
                    b.isFunction(f.onSpace) && f.onSpace.call(c, c.p.selrow))
            })
        })
    }, unbindKeys: function () {
        return this.each(function () {
            b(this).unbind("keydown")
        })
    }, getLocalRow: function (d) {
        var f = !1, c;
        this.each(function () {
            void 0 !== d && (c = this.p._index[b.jgrid.stripPref(this.p.idPrefix, d)], 0 <= c && (f = this.p.data[c]))
        });
        return f
    }})
})(jQuery);
(function (a) {
    a.fmatter = {};
    a.extend(a.fmatter, {isBoolean: function (a) {
        return"boolean" === typeof a
    }, isObject: function (c) {
        return c && ("object" === typeof c || a.isFunction(c)) || !1
    }, isString: function (a) {
        return"string" === typeof a
    }, isNumber: function (a) {
        return"number" === typeof a && isFinite(a)
    }, isValue: function (a) {
        return this.isObject(a) || this.isString(a) || this.isNumber(a) || this.isBoolean(a)
    }, isEmpty: function (c) {
        if (!this.isString(c) && this.isValue(c))return!1;
        if (!this.isValue(c))return!0;
        c = a.trim(c).replace(/\&nbsp\;/ig,
            "").replace(/\&#160\;/ig, "");
        return"" === c
    }});
    a.fn.fmatter = function (c, b, d, e, f) {
        var g = b, d = a.extend({}, a.jgrid.formatter, d);
        try {
            g = a.fn.fmatter[c].call(this, b, d, e, f)
        } catch (h) {
        }
        return g
    };
    a.fmatter.util = {NumberFormat: function (c, b) {
        a.fmatter.isNumber(c) || (c *= 1);
        if (a.fmatter.isNumber(c)) {
            var d = 0 > c, e = "" + c, f = b.decimalSeparator || ".", g;
            if (a.fmatter.isNumber(b.decimalPlaces)) {
                var h = b.decimalPlaces, e = Math.pow(10, h), e = "" + Math.round(c * e) / e;
                g = e.lastIndexOf(".");
                if (0 < h) {
                    0 > g ? (e += f, g = e.length - 1) : "." !== f && (e = e.replace(".",
                        f));
                    for (; e.length - 1 - g < h;)e += "0"
                }
            }
            if (b.thousandsSeparator) {
                h = b.thousandsSeparator;
                g = e.lastIndexOf(f);
                g = -1 < g ? g : e.length;
                var f = e.substring(g), j = -1, i;
                for (i = g; 0 < i; i--) {
                    j++;
                    if (0 === j % 3 && i !== g && (!d || 1 < i))f = h + f;
                    f = e.charAt(i - 1) + f
                }
                e = f
            }
            e = b.prefix ? b.prefix + e : e;
            return e = b.suffix ? e + b.suffix : e
        }
        return c
    }};
    a.fn.fmatter.defaultFormat = function (c, b) {
        return a.fmatter.isValue(c) && "" !== c ? c : b.defaultValue || "&#160;"
    };
    a.fn.fmatter.email = function (c, b) {
        return!a.fmatter.isEmpty(c) ? '<a href="mailto:' + c + '">' + c + "</a>" : a.fn.fmatter.defaultFormat(c,
            b)
    };
    a.fn.fmatter.checkbox = function (c, b) {
        var d = a.extend({}, b.checkbox), e;
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        e = !0 === d.disabled ? 'disabled="disabled"' : "";
        if (a.fmatter.isEmpty(c) || void 0 === c)c = a.fn.fmatter.defaultFormat(c, d);
        c = ("" + c).toLowerCase();
        return'<input type="checkbox" ' + (0 > c.search(/(false|f|0|no|n|off|undefined)/i) ? " checked='checked' " : "") + ' value="' + c + '" offval="no" ' + e + "/>"
    };
    a.fn.fmatter.link = function (c, b) {
        var d = {target: b.target},
            e = "";
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        d.target && (e = "target=" + d.target);
        return!a.fmatter.isEmpty(c) ? "<a " + e + ' href="' + c + '">' + c + "</a>" : a.fn.fmatter.defaultFormat(c, b)
    };
    a.fn.fmatter.showlink = function (c, b) {
        var d = {baseLinkUrl: b.baseLinkUrl, showAction: b.showAction, addParam: b.addParam || "", target: b.target, idName: b.idName}, e = "";
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        d.target && (e =
            "target=" + d.target);
        d = d.baseLinkUrl + d.showAction + "?" + d.idName + "=" + b.rowId + d.addParam;
        return a.fmatter.isString(c) || a.fmatter.isNumber(c) ? "<a " + e + ' href="' + d + '">' + c + "</a>" : a.fn.fmatter.defaultFormat(c, b)
    };
    a.fn.fmatter.integer = function (c, b) {
        var d = a.extend({}, b.integer);
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        return a.fmatter.isEmpty(c) ? d.defaultValue : a.fmatter.util.NumberFormat(c, d)
    };
    a.fn.fmatter.number = function (c, b) {
        var d = a.extend({}, b.number);
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        return a.fmatter.isEmpty(c) ? d.defaultValue : a.fmatter.util.NumberFormat(c, d)
    };
    a.fn.fmatter.currency = function (c, b) {
        var d = a.extend({}, b.currency);
        void 0 !== b.colModel && void 0 !== b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        return a.fmatter.isEmpty(c) ? d.defaultValue : a.fmatter.util.NumberFormat(c, d)
    };
    a.fn.fmatter.date = function (c, b, d, e) {
        d = a.extend({}, b.date);
        void 0 !== b.colModel && void 0 !==
            b.colModel.formatoptions && (d = a.extend({}, d, b.colModel.formatoptions));
        return!d.reformatAfterEdit && "edit" === e ? a.fn.fmatter.defaultFormat(c, b) : !a.fmatter.isEmpty(c) ? a.jgrid.parseDate(d.srcformat, c, d.newformat, d) : a.fn.fmatter.defaultFormat(c, b)
    };
    a.fn.fmatter.select = function (c, b) {
        var c = "" + c, d = !1, e = [], f, g;
        void 0 !== b.colModel.formatoptions ? (d = b.colModel.formatoptions.value, f = void 0 === b.colModel.formatoptions.separator ? ":" : b.colModel.formatoptions.separator, g = void 0 === b.colModel.formatoptions.delimiter ?
            ";" : b.colModel.formatoptions.delimiter) : void 0 !== b.colModel.editoptions && (d = b.colModel.editoptions.value, f = void 0 === b.colModel.editoptions.separator ? ":" : b.colModel.editoptions.separator, g = void 0 === b.colModel.editoptions.delimiter ? ";" : b.colModel.editoptions.delimiter);
        if (d) {
            var h = !0 === b.colModel.editoptions.multiple ? !0 : !1, j = [];
            h && (j = c.split(","), j = a.map(j, function (b) {
                return a.trim(b)
            }));
            if (a.fmatter.isString(d)) {
                var i = d.split(g), k = 0, l;
                for (l = 0; l < i.length; l++)if (g = i[l].split(f), 2 < g.length && (g[1] = a.map(g,
                    function (a, b) {
                        if (b > 0)return a
                    }).join(f)), h)-1 < a.inArray(g[0], j) && (e[k] = g[1], k++); else if (a.trim(g[0]) === a.trim(c)) {
                    e[0] = g[1];
                    break
                }
            } else a.fmatter.isObject(d) && (h ? e = a.map(j, function (a) {
                return d[a]
            }) : e[0] = d[c] || "")
        }
        c = e.join(", ");
        return"" === c ? a.fn.fmatter.defaultFormat(c, b) : c
    };
    a.fn.fmatter.rowactions = function (c) {
        var b = a(this).closest("tr.jqgrow"), d = b.attr("id"), e = a(this).closest("table.ui-jqgrid-btable").attr("id").replace(/_frozen([^_]*)$/, "$1"), e = a("#" + e), f = e[0], g = f.p, h = g.colModel[a.jgrid.getCellIndex(this)],
            j = h.frozen ? a("tr#" + d + " td:eq(" + a.jgrid.getCellIndex(this) + ") > div", e) : a(this).parent(), i = {keys: !1, onEdit: null, onSuccess: null, afterSave: null, onError: null, afterRestore: null, extraparam: {}, url: null, restoreAfterError: !0, mtype: "POST", delOptions: {}, editOptions: {}}, k = function (b) {
                a.isFunction(i.afterRestore) && i.afterRestore.call(f, b);
                j.find("div.ui-inline-edit,div.ui-inline-del").show();
                j.find("div.ui-inline-save,div.ui-inline-cancel").hide()
            };
        void 0 !== h.formatoptions && (i = a.extend(i, h.formatoptions));
        void 0 !==
            g.editOptions && (i.editOptions = g.editOptions);
        void 0 !== g.delOptions && (i.delOptions = g.delOptions);
        b.hasClass("jqgrid-new-row") && (i.extraparam[g.prmNames.oper] = g.prmNames.addoper);
        b = {keys: i.keys, oneditfunc: i.onEdit, successfunc: i.onSuccess, url: i.url, extraparam: i.extraparam, aftersavefunc: function (b, c) {
            a.isFunction(i.afterSave) && i.afterSave.call(f, b, c);
            j.find("div.ui-inline-edit,div.ui-inline-del").show();
            j.find("div.ui-inline-save,div.ui-inline-cancel").hide()
        }, errorfunc: i.onError, afterrestorefunc: k, restoreAfterError: i.restoreAfterError,
            mtype: i.mtype};
        switch (c) {
            case "edit":
                e.jqGrid("editRow", d, b);
                j.find("div.ui-inline-edit,div.ui-inline-del").hide();
                j.find("div.ui-inline-save,div.ui-inline-cancel").show();
                e.triggerHandler("jqGridAfterGridComplete");
                break;
            case "save":
                e.jqGrid("saveRow", d, b) && (j.find("div.ui-inline-edit,div.ui-inline-del").show(), j.find("div.ui-inline-save,div.ui-inline-cancel").hide(), e.triggerHandler("jqGridAfterGridComplete"));
                break;
            case "cancel":
                e.jqGrid("restoreRow", d, k);
                j.find("div.ui-inline-edit,div.ui-inline-del").show();
                j.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                e.triggerHandler("jqGridAfterGridComplete");
                break;
            case "del":
                e.jqGrid("delGridRow", d, i.delOptions);
                break;
            case "formedit":
                e.jqGrid("setSelection", d), e.jqGrid("editGridRow", d, i.editOptions)
        }
    };
    a.fn.fmatter.actions = function (c, b) {
        var d = {keys: !1, editbutton: !0, delbutton: !0, editformbutton: !1}, e = b.rowId, f = "";
        void 0 !== b.colModel.formatoptions && (d = a.extend(d, b.colModel.formatoptions));
        if (void 0 === e || a.fmatter.isEmpty(e))return"";
        d.editformbutton ? f += "<div title='" +
            a.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ("id='jEditButton_" + e + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ") + "><span class='ui-icon ui-icon-pencil'></span></div>" : d.editbutton && (f += "<div title='" + a.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ("id='jEditButton_" + e + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') ") +
            "><span class='ui-icon ui-icon-pencil'></span></div>");
        d.delbutton && (f += "<div title='" + a.jgrid.nav.deltitle + "' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' " + ("id='jDeleteButton_" + e + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ") + "><span class='ui-icon ui-icon-trash'></span></div>");
        f += "<div title='" + a.jgrid.edit.bSubmit + "' style='float:left;display:none' class='ui-pg-div ui-inline-save' " +
            ("id='jSaveButton_" + e + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ") + "><span class='ui-icon ui-icon-disk'></span></div>";
        f += "<div title='" + a.jgrid.edit.bCancel + "' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' " + ("id='jCancelButton_" + e + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ") +
            "><span class='ui-icon ui-icon-cancel'></span></div>";
        return"<div style='margin-left:8px;'>" + f + "</div>"
    };
    a.unformat = function (c, b, d, e) {
        var f, g = b.colModel.formatter, h = b.colModel.formatoptions || {}, j = /([\.\*\_\'\(\)\{\}\+\?\\])/g, i = b.colModel.unformat || a.fn.fmatter[g] && a.fn.fmatter[g].unformat;
        if (void 0 !== i && a.isFunction(i))f = i.call(this, a(c).text(), b, c); else if (void 0 !== g && a.fmatter.isString(g))switch (f = a.jgrid.formatter || {}, g) {
            case "integer":
                h = a.extend({}, f.integer, h);
                b = h.thousandsSeparator.replace(j,
                    "\\$1");
                f = a(c).text().replace(RegExp(b, "g"), "");
                break;
            case "number":
                h = a.extend({}, f.number, h);
                b = h.thousandsSeparator.replace(j, "\\$1");
                f = a(c).text().replace(RegExp(b, "g"), "").replace(h.decimalSeparator, ".");
                break;
            case "currency":
                h = a.extend({}, f.currency, h);
                b = h.thousandsSeparator.replace(j, "\\$1");
                b = RegExp(b, "g");
                f = a(c).text();
                h.prefix && h.prefix.length && (f = f.substr(h.prefix.length));
                h.suffix && h.suffix.length && (f = f.substr(0, f.length - h.suffix.length));
                f = f.replace(b, "").replace(h.decimalSeparator, ".");
                break;
            case "checkbox":
                h = b.colModel.editoptions ? b.colModel.editoptions.value.split(":") : ["Yes", "No"];
                f = a("input", c).is(":checked") ? h[0] : h[1];
                break;
            case "select":
                f = a.unformat.select(c, b, d, e);
                break;
            case "actions":
                return"";
            default:
                f = a(c).text()
        }
        return void 0 !== f ? f : !0 === e ? a(c).text() : a.jgrid.htmlDecode(a(c).html())
    };
    a.unformat.select = function (c, b, d, e) {
        d = [];
        c = a(c).text();
        if (!0 === e)return c;
        var e = a.extend({}, void 0 !== b.colModel.formatoptions ? b.colModel.formatoptions : b.colModel.editoptions), b = void 0 === e.separator ?
            ":" : e.separator, f = void 0 === e.delimiter ? ";" : e.delimiter;
        if (e.value) {
            var g = e.value, e = !0 === e.multiple ? !0 : !1, h = [];
            e && (h = c.split(","), h = a.map(h, function (b) {
                return a.trim(b)
            }));
            if (a.fmatter.isString(g)) {
                var j = g.split(f), i = 0, k;
                for (k = 0; k < j.length; k++)if (f = j[k].split(b), 2 < f.length && (f[1] = a.map(f,function (a, b) {
                    if (b > 0)return a
                }).join(b)), e)-1 < a.inArray(f[1], h) && (d[i] = f[0], i++); else if (a.trim(f[1]) === a.trim(c)) {
                    d[0] = f[0];
                    break
                }
            } else if (a.fmatter.isObject(g) || a.isArray(g))e || (h[0] = c), d = a.map(h, function (b) {
                var c;
                a.each(g, function (a, d) {
                    if (d === b) {
                        c = a;
                        return false
                    }
                });
                if (c !== void 0)return c
            });
            return d.join(", ")
        }
        return c || ""
    };
    a.unformat.date = function (c, b) {
        var d = a.jgrid.formatter.date || {};
        void 0 !== b.formatoptions && (d = a.extend({}, d, b.formatoptions));
        return!a.fmatter.isEmpty(c) ? a.jgrid.parseDate(d.newformat, c, d.srcformat, d) : a.fn.fmatter.defaultFormat(c, b)
    }
})(jQuery);
(function (a) {
    a.jgrid.extend({getColProp: function (a) {
        var c = {}, f = this[0];
        if (!f.grid)return!1;
        var f = f.p.colModel, g;
        for (g = 0; g < f.length; g++)if (f[g].name === a) {
            c = f[g];
            break
        }
        return c
    }, setColProp: function (b, c) {
        return this.each(function () {
            if (this.grid && c) {
                var f = this.p.colModel, g;
                for (g = 0; g < f.length; g++)if (f[g].name === b) {
                    a.extend(!0, this.p.colModel[g], c);
                    break
                }
            }
        })
    }, sortGrid: function (a, c, f) {
        return this.each(function () {
            var g = -1, j;
            if (this.grid) {
                a || (a = this.p.sortname);
                for (j = 0; j < this.p.colModel.length; j++)if (this.p.colModel[j].index ===
                    a || this.p.colModel[j].name === a) {
                    g = j;
                    break
                }
                -1 !== g && (j = this.p.colModel[g].sortable, "boolean" !== typeof j && (j = !0), "boolean" !== typeof c && (c = !1), j && this.sortData("jqgh_" + this.p.id + "_" + a, g, c, f))
            }
        })
    }, clearBeforeUnload: function () {
        return this.each(function () {
            var b = this.grid;
            b.emptyRows.call(this, !0, !0);
            a(b.hDiv).unbind("mousemove");
            a(this).unbind();
            b.dragEnd = null;
            b.dragMove = null;
            b.dragStart = null;
            b.emptyRows = null;
            b.populate = null;
            b.populateVisible = null;
            b.scrollGrid = null;
            b.selectionPreserver = null;
            b.bDiv = null;
            b.cDiv = null;
            b.hDiv = null;
            b.cols = null;
            var c, f = b.headers.length;
            for (c = 0; c < f; c++)b.headers[c].el = null;
            this.addJSONData = this.addXmlData = this.formatter = this.constructTr = this.setHeadCheckBox = this.refreshIndex = this.updatepager = this.sortData = this.formatCol = null
        })
    }, GridDestroy: function () {
        return this.each(function () {
            if (this.grid) {
                this.p.pager && a(this.p.pager).remove();
                try {
                    a(this).jqGrid("clearBeforeUnload"), a("#gbox_" + a.jgrid.jqID(this.id)).remove()
                } catch (b) {
                }
            }
        })
    }, GridUnload: function () {
        return this.each(function () {
            if (this.grid) {
                var b =
                    a(this).attr("id"), c = a(this).attr("class");
                this.p.pager && a(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager corner-bottom");
                var f = document.createElement("table");
                a(f).attr({id: b});
                f.className = c;
                b = a.jgrid.jqID(this.id);
                a(f).removeClass("ui-jqgrid-btable");
                1 === a(this.p.pager).parents("#gbox_" + b).length ? (a(f).insertBefore("#gbox_" + b).show(), a(this.p.pager).insertBefore("#gbox_" + b)) : a(f).insertBefore("#gbox_" + b).show();
                a(this).jqGrid("clearBeforeUnload");
                a("#gbox_" + b).remove()
            }
        })
    },
        setGridState: function (b) {
            return this.each(function () {
                this.grid && ("hidden" === b ? (a(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + a.jgrid.jqID(this.p.id)).slideUp("fast"), this.p.pager && a(this.p.pager).slideUp("fast"), this.p.toppager && a(this.p.toppager).slideUp("fast"), !0 === this.p.toolbar[0] && ("both" === this.p.toolbar[1] && a(this.grid.ubDiv).slideUp("fast"), a(this.grid.uDiv).slideUp("fast")), this.p.footerrow && a(".ui-jqgrid-sdiv", "#gbox_" + a.jgrid.jqID(this.p.id)).slideUp("fast"), a(".ui-jqgrid-titlebar-close span",
                    this.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"), this.p.gridstate = "hidden") : "visible" === b && (a(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + a.jgrid.jqID(this.p.id)).slideDown("fast"), this.p.pager && a(this.p.pager).slideDown("fast"), this.p.toppager && a(this.p.toppager).slideDown("fast"), !0 === this.p.toolbar[0] && ("both" === this.p.toolbar[1] && a(this.grid.ubDiv).slideDown("fast"), a(this.grid.uDiv).slideDown("fast")), this.p.footerrow && a(".ui-jqgrid-sdiv", "#gbox_" +
                    a.jgrid.jqID(this.p.id)).slideDown("fast"), a(".ui-jqgrid-titlebar-close span", this.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"), this.p.gridstate = "visible"))
            })
        }, filterToolbar: function (b) {
            b = a.extend({autosearch: !0, searchOnEnter: !0, beforeSearch: null, afterSearch: null, beforeClear: null, afterClear: null, searchurl: "", stringResult: !1, groupOp: "AND", defaultSearch: "bw", searchOperators: !1, operandTitle: "Click to select search operation.", operands: {eq: "==", ne: "!", lt: "<",
                le: "<=", gt: ">", ge: ">=", bw: "^", bn: "!^", "in": "=", ni: "!=", ew: "|", en: "!@", cn: "~", nc: "!~", nu: "#", nn: "!#"}}, a.jgrid.search, b || {});
            return this.each(function () {
                var c = this;
                if (!this.ftoolbar) {
                    var f = function () {
                        var e = {}, d = 0, f, l, j = {}, n;
                        a.each(c.p.colModel, function () {
                            var i = a("#gs_" + a.jgrid.jqID(this.name), !0 === this.frozen && !0 === c.p.frozenColumns ? c.grid.fhDiv : c.grid.hDiv);
                            l = this.index || this.name;
                            n = b.searchOperators ? i.parent().prev().children("a").attr("soper") || b.defaultSearch : this.searchoptions && this.searchoptions.sopt ?
                                this.searchoptions.sopt[0] : "select" === this.stype ? "eq" : b.defaultSearch;
                            if ((f = "custom" === this.stype && a.isFunction(this.searchoptions.custom_value) && 0 < i.length && "SPAN" === i[0].nodeName.toUpperCase() ? this.searchoptions.custom_value.call(c, i.children(".customelement:first"), "get") : i.val()) || "nu" === n || "nn" === n)e[l] = f, j[l] = n, d++; else try {
                                delete c.p.postData[l]
                            } catch (k) {
                            }
                        });
                        var i = 0 < d ? !0 : !1;
                        if (!0 === b.stringResult || "local" === c.p.datatype) {
                            var k = '{"groupOp":"' + b.groupOp + '","rules":[', h = 0;
                            a.each(e, function (a, b) {
                                0 < h && (k += ",");
                                k += '{"field":"' + a + '",';
                                k += '"op":"' + j[a] + '",';
                                k += '"data":"' + (b + "").replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}';
                                h++
                            });
                            k += "]}";
                            a.extend(c.p.postData, {filters: k});
                            a.each(["searchField", "searchString", "searchOper"], function (a, b) {
                                c.p.postData.hasOwnProperty(b) && delete c.p.postData[b]
                            })
                        } else a.extend(c.p.postData, e);
                        var g;
                        c.p.searchurl && (g = c.p.url, a(c).jqGrid("setGridParam", {url: c.p.searchurl}));
                        var o = "stop" === a(c).triggerHandler("jqGridToolbarBeforeSearch") ? !0 : !1;
                        !o && a.isFunction(b.beforeSearch) &&
                        (o = b.beforeSearch.call(c));
                        o || a(c).jqGrid("setGridParam", {search: i}).trigger("reloadGrid", [
                            {page: 1}
                        ]);
                        g && a(c).jqGrid("setGridParam", {url: g});
                        a(c).triggerHandler("jqGridToolbarAfterSearch");
                        a.isFunction(b.afterSearch) && b.afterSearch.call(c)
                    }, g = function (e, d, j) {
                        a("#sopt_menu").remove();
                        var d = parseInt(d, 10), j = parseInt(j, 10) + 18, d = '<ul id="sopt_menu" class="ui-search-menu" role="menu" tabindex="0" style="font-size:' + (a(".ui-jqgrid-view").css("font-size") || "11px") + ";left:" + d + "px;top:" + j + 'px;">', j = a(e).attr("soper"),
                            l, h = [], n, i = 0, k = a(e).attr("colname");
                        for (l = c.p.colModel.length; i < l && c.p.colModel[i].name !== k;)i++;
                        i = c.p.colModel[i];
                        k = a.extend({}, i.searchoptions);
                        k.sopt || (k.sopt = [], k.sopt[0] = "select" === i.stype ? "eq" : b.defaultSearch);
                        a.each(b.odata, function () {
                            h.push(this.oper)
                        });
                        for (i = 0; i < k.sopt.length; i++)n = a.inArray(k.sopt[i], h), -1 !== n && (l = j === b.odata[n].oper ? "ui-state-highlight" : "", d += '<li class="ui-menu-item ' + l + '" role="presentation"><a class="ui-corner-all g-menu-item" tabindex="0" role="menuitem" value="' + b.odata[n].oper +
                            '" oper="' + b.operands[b.odata[n].oper] + '"><table cellspacing="0" cellpadding="0" border="0"><tr><td width="25px">' + b.operands[b.odata[n].oper] + "</td><td>" + b.odata[n].text + "</td></tr></table></a></li>");
                        a("body").append(d + "</ul>");
                        a("#sopt_menu").addClass("ui-menu ui-widget ui-widget-content ui-corner-all");
                        a("#sopt_menu > li > a").hover(function () {
                            a(this).addClass("ui-state-hover")
                        },function () {
                            a(this).removeClass("ui-state-hover")
                        }).click(function () {
                                var d = a(this).attr("value"), i = a(this).attr("oper");
                                a(c).triggerHandler("jqGridToolbarSelectOper", [d, i, e]);
                                a("#sopt_menu").hide();
                                a(e).text(i).attr("soper", d);
                                if (b.autosearch === true) {
                                    i = a(e).parent().next().children()[0];
                                    (a(i).val() || d === "nu" || d === "nn") && f()
                                }
                            })
                    }, j = a("<tr class='ui-search-toolbar' role='rowheader'></tr>"), h;
                    a.each(c.p.colModel, function () {
                        var e = this, d, g;
                        g = "";
                        var l = "=", s, n = a("<th role='columnheader' class='ui-state-default ui-th-column ui-th-" + c.p.direction + "'></th>"), i = a("<div style='position:relative;height:100%;padding-right:0.3em;padding-left:0.3em;'></div>"),
                            k = a("<table class='ui-search-table' cellspacing='0'><tr><td class='ui-search-oper'></td><td class='ui-search-input'></td></tr></table>");
                        !0 === this.hidden && a(n).css("display", "none");
                        this.search = !1 === this.search ? !1 : !0;
                        void 0 === this.stype && (this.stype = "text");
                        d = a.extend({}, this.searchoptions || {});
                        if (this.search) {
                            if (b.searchOperators) {
                                g = d.sopt ? d.sopt[0] : "select" === e.stype ? "eq" : b.defaultSearch;
                                for (s = 0; s < b.odata.length; s++)if (b.odata[s].oper === g) {
                                    l = b.operands[g] || "";
                                    break
                                }
                                g = "<a title='" + (null != d.searchtitle ?
                                    d.searchtitle : b.operandTitle) + "' style='padding-right: 0.5em;' soper='" + g + "' class='soptclass' colname='" + this.name + "'>" + l + "</a>"
                            }
                            a("td:eq(0)", k).append(g);
                            switch (this.stype) {
                                case "select":
                                    if (g = this.surl || d.dataUrl)a.ajax(a.extend({url: g, dataType: "html", success: function (g) {
                                        if (d.buildSelect !== void 0) {
                                            if (g = d.buildSelect(g)) {
                                                a("td:eq(1)", k).append(g);
                                                a(i).append(k)
                                            }
                                        } else {
                                            a("td:eq(1)", k).append(g);
                                            a(i).append(k)
                                        }
                                        d.defaultValue !== void 0 && a("select", i).val(d.defaultValue);
                                        a("select", i).attr({name: e.index ||
                                            e.name, id: "gs_" + e.name});
                                        d.attr && a("select", i).attr(d.attr);
                                        a("select", i).css({width: "100%"});
                                        a.jgrid.bindEv.call(c, a("select", i)[0], d);
                                        b.autosearch === true && a("select", i).change(function () {
                                            f();
                                            return false
                                        });
                                        g = null
                                    }}, a.jgrid.ajaxOptions, c.p.ajaxSelectOptions || {})); else {
                                        var m, r, o;
                                        e.searchoptions ? (m = void 0 === e.searchoptions.value ? "" : e.searchoptions.value, r = void 0 === e.searchoptions.separator ? ":" : e.searchoptions.separator, o = void 0 === e.searchoptions.delimiter ? ";" : e.searchoptions.delimiter) : e.editoptions &&
                                            (m = void 0 === e.editoptions.value ? "" : e.editoptions.value, r = void 0 === e.editoptions.separator ? ":" : e.editoptions.separator, o = void 0 === e.editoptions.delimiter ? ";" : e.editoptions.delimiter);
                                        if (m) {
                                            l = document.createElement("select");
                                            l.style.width = "100%";
                                            a(l).attr({name: e.index || e.name, id: "gs_" + e.name});
                                            var q;
                                            if ("string" === typeof m) {
                                                g = m.split(o);
                                                for (q = 0; q < g.length; q++)m = g[q].split(r), o = document.createElement("option"), o.value = m[0], o.innerHTML = m[1], l.appendChild(o)
                                            } else if ("object" === typeof m)for (q in m)m.hasOwnProperty(q) &&
                                            (o = document.createElement("option"), o.value = q, o.innerHTML = m[q], l.appendChild(o));
                                            void 0 !== d.defaultValue && a(l).val(d.defaultValue);
                                            d.attr && a(l).attr(d.attr);
                                            a.jgrid.bindEv.call(c, l, d);
                                            a("td:eq(1)", k).append(l);
                                            a(i).append(k);
                                            !0 === b.autosearch && a(l).change(function () {
                                                f();
                                                return false
                                            })
                                        }
                                    }
                                    break;
                                case "text":
                                    r = void 0 !== d.defaultValue ? d.defaultValue : "";
                                    a("td:eq(1)", k).append("<input type='text' style='width:100%;padding:0px;' name='" + (e.index || e.name) + "' id='gs_" + e.name + "' value='" + r + "'/>");
                                    a(i).append(k);
                                    d.attr && a("input", i).attr(d.attr);
                                    a.jgrid.bindEv.call(c, a("input", i)[0], d);
                                    !0 === b.autosearch && (b.searchOnEnter ? a("input", i).keypress(function (a) {
                                        if ((a.charCode || a.keyCode || 0) === 13) {
                                            f();
                                            return false
                                        }
                                        return this
                                    }) : a("input", i).keydown(function (a) {
                                        switch (a.which) {
                                            case 13:
                                                return false;
                                            case 9:
                                            case 16:
                                            case 37:
                                            case 38:
                                            case 39:
                                            case 40:
                                            case 27:
                                                break;
                                            default:
                                                h && clearTimeout(h);
                                                h = setTimeout(function () {
                                                    f()
                                                }, 500)
                                        }
                                    }));
                                    break;
                                case "custom":
                                    a("td:eq(1)", k).append("<span style='width:95%;padding:0px;' name='" + (e.index ||
                                        e.name) + "' id='gs_" + e.name + "'/>");
                                    a(i).append(k);
                                    try {
                                        if (a.isFunction(d.custom_element)) {
                                            var u = d.custom_element.call(c, void 0 !== d.defaultValue ? d.defaultValue : "", d);
                                            if (u)u = a(u).addClass("customelement"), a(i).find(">span").append(u); else throw"e2";
                                        } else throw"e1";
                                    } catch (t) {
                                        "e1" === t && a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose), "e2" === t ? a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.novalue,
                                            a.jgrid.edit.bClose) : a.jgrid.info_dialog(a.jgrid.errors.errcap, "string" === typeof t ? t : t.message, a.jgrid.edit.bClose)
                                    }
                            }
                        }
                        a(n).append(i);
                        a(j).append(n);
                        b.searchOperators || a("td:eq(0)", k).hide()
                    });
                    a("table thead", c.grid.hDiv).append(j);
                    b.searchOperators && (a(".soptclass").click(function (b) {
                        var c = a(this).offset();
                        g(this, c.left, c.top);
                        b.stopPropagation()
                    }), a("body").on("click", function (b) {
                        "soptclass" !== b.target.className && a("#sopt_menu").hide()
                    }));
                    this.ftoolbar = !0;
                    this.triggerToolbar = f;
                    this.clearToolbar =
                        function (e) {
                            var d = {}, f = 0, g, e = typeof e !== "boolean" ? true : e;
                            a.each(c.p.colModel, function () {
                                var b, e = a("#gs_" + a.jgrid.jqID(this.name), this.frozen === true && c.p.frozenColumns === true ? c.grid.fhDiv : c.grid.hDiv);
                                if (this.searchoptions && this.searchoptions.defaultValue !== void 0)b = this.searchoptions.defaultValue;
                                g = this.index || this.name;
                                switch (this.stype) {
                                    case "select":
                                        e.find("option").each(function (c) {
                                            if (c === 0)this.selected = true;
                                            if (a(this).val() === b) {
                                                this.selected = true;
                                                return false
                                            }
                                        });
                                        if (b !== void 0) {
                                            d[g] = b;
                                            f++
                                        } else try {
                                            delete c.p.postData[g]
                                        } catch (i) {
                                        }
                                        break;
                                    case "text":
                                        e.val(b);
                                        if (b !== void 0) {
                                            d[g] = b;
                                            f++
                                        } else try {
                                            delete c.p.postData[g]
                                        } catch (h) {
                                        }
                                        break;
                                    case "custom":
                                        a.isFunction(this.searchoptions.custom_value) && e.length > 0 && e[0].nodeName.toUpperCase() === "SPAN" && this.searchoptions.custom_value.call(c, e.children(".customelement:first"), "set", b)
                                }
                            });
                            var j = f > 0 ? true : false;
                            if (b.stringResult === true || c.p.datatype === "local") {
                                var h = '{"groupOp":"' + b.groupOp + '","rules":[', i = 0;
                                a.each(d, function (a, b) {
                                    i > 0 && (h = h + ",");
                                    h = h + ('{"field":"' + a + '",');
                                    h = h + '"op":"eq",';
                                    h = h + ('"data":"' +
                                        (b + "").replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}');
                                    i++
                                });
                                h = h + "]}";
                                a.extend(c.p.postData, {filters: h});
                                a.each(["searchField", "searchString", "searchOper"], function (a, b) {
                                    c.p.postData.hasOwnProperty(b) && delete c.p.postData[b]
                                })
                            } else a.extend(c.p.postData, d);
                            var k;
                            if (c.p.searchurl) {
                                k = c.p.url;
                                a(c).jqGrid("setGridParam", {url: c.p.searchurl})
                            }
                            var m = a(c).triggerHandler("jqGridToolbarBeforeClear") === "stop" ? true : false;
                            !m && a.isFunction(b.beforeClear) && (m = b.beforeClear.call(c));
                            m || e && a(c).jqGrid("setGridParam",
                                {search: j}).trigger("reloadGrid", [
                                    {page: 1}
                                ]);
                            k && a(c).jqGrid("setGridParam", {url: k});
                            a(c).triggerHandler("jqGridToolbarAfterClear");
                            a.isFunction(b.afterClear) && b.afterClear()
                        };
                    this.toggleToolbar = function () {
                        var b = a("tr.ui-search-toolbar", c.grid.hDiv), d = c.p.frozenColumns === true ? a("tr.ui-search-toolbar", c.grid.fhDiv) : false;
                        if (b.css("display") === "none") {
                            b.show();
                            d && d.show()
                        } else {
                            b.hide();
                            d && d.hide()
                        }
                    }
                }
            })
        }, destroyFilterToolbar: function () {
            return this.each(function () {
                this.ftoolbar && (this.toggleToolbar = this.clearToolbar =
                    this.triggerToolbar = null, this.ftoolbar = !1, a(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove())
            })
        }, destroyGroupHeader: function (b) {
            void 0 === b && (b = !0);
            return this.each(function () {
                var c, f, g, j, h, e;
                f = this.grid;
                var d = a("table.ui-jqgrid-htable thead", f.hDiv), p = this.p.colModel;
                if (f) {
                    a(this).unbind(".setGroupHeaders");
                    c = a("<tr>", {role: "rowheader"}).addClass("ui-jqgrid-labels");
                    j = f.headers;
                    f = 0;
                    for (g = j.length; f < g; f++) {
                        h = p[f].hidden ? "none" : "";
                        h = a(j[f].el).width(j[f].width).css("display", h);
                        try {
                            h.removeAttr("rowSpan")
                        } catch (l) {
                            h.attr("rowSpan",
                                1)
                        }
                        c.append(h);
                        e = h.children("span.ui-jqgrid-resize");
                        0 < e.length && (e[0].style.height = "");
                        h.children("div")[0].style.top = ""
                    }
                    a(d).children("tr.ui-jqgrid-labels").remove();
                    a(d).prepend(c);
                    !0 === b && a(this).jqGrid("setGridParam", {groupHeader: null})
                }
            })
        }, setGroupHeaders: function (b) {
            b = a.extend({useColSpanStyle: !1, groupHeaders: []}, b || {});
            return this.each(function () {
                this.p.groupHeader = b;
                var c, f, g = 0, j, h, e, d, p, l = this.p.colModel, s = l.length, n = this.grid.headers, i = a("table.ui-jqgrid-htable", this.grid.hDiv), k = i.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header");
                j = i.children("thead");
                var m = i.find(".jqg-first-row-header");
                void 0 === m[0] ? m = a("<tr>", {role: "row", "aria-hidden": "true"}).addClass("jqg-first-row-header").css("height", "auto") : m.empty();
                var r, o = function (a, b) {
                    var c = b.length, d;
                    for (d = 0; d < c; d++)if (b[d].startColumnName === a)return d;
                    return-1
                };
                a(this).prepend(j);
                j = a("<tr>", {role: "rowheader"}).addClass("ui-jqgrid-labels jqg-third-row-header");
                for (c = 0; c < s; c++)if (e = n[c].el, d = a(e), f = l[c], h = {height: "0px", width: n[c].width + "px", display: f.hidden ? "none" : ""}, a("<th>",
                    {role: "gridcell"}).css(h).addClass("ui-first-th-" + this.p.direction).appendTo(m), e.style.width = "", h = o(f.name, b.groupHeaders), 0 <= h) {
                    h = b.groupHeaders[h];
                    g = h.numberOfColumns;
                    p = h.titleText;
                    for (h = f = 0; h < g && c + h < s; h++)l[c + h].hidden || f++;
                    h = a("<th>").attr({role: "columnheader"}).addClass("ui-state-default ui-th-column-header ui-th-" + this.p.direction).css({height: "22px", "border-top": "0px none"}).html(p);
                    0 < f && h.attr("colspan", "" + f);
                    this.p.headertitles && h.attr("title", h.text());
                    0 === f && h.hide();
                    d.before(h);
                    j.append(e);
                    g -= 1
                } else 0 === g ? b.useColSpanStyle ? d.attr("rowspan", "2") : (a("<th>", {role: "columnheader"}).addClass("ui-state-default ui-th-column-header ui-th-" + this.p.direction).css({display: f.hidden ? "none" : "", "border-top": "0px none"}).insertBefore(d), j.append(e)) : (j.append(e), g--);
                l = a(this).children("thead");
                l.prepend(m);
                j.insertAfter(k);
                i.append(l);
                b.useColSpanStyle && (i.find("span.ui-jqgrid-resize").each(function () {
                    var b = a(this).parent();
                    b.is(":visible") && (this.style.cssText = "height: " + b.height() + "px !important; cursor: col-resize;")
                }),
                    i.find("div.ui-jqgrid-sortable").each(function () {
                        var b = a(this), c = b.parent();
                        c.is(":visible") && c.is(":has(span.ui-jqgrid-resize)") && b.css("top", (c.height() - b.outerHeight()) / 2 + "px")
                    }));
                r = l.find("tr.jqg-first-row-header");
                a(this).bind("jqGridResizeStop.setGroupHeaders", function (a, b, c) {
                    r.find("th").eq(c).width(b)
                })
            })
        }, setFrozenColumns: function () {
            return this.each(function () {
                if (this.grid) {
                    var b = this, c = b.p.colModel, f = 0, g = c.length, j = -1, h = !1;
                    if (!(!0 === b.p.subGrid || !0 === b.p.treeGrid || !0 === b.p.cellEdit || b.p.sortable ||
                        b.p.scroll || b.p.grouping)) {
                        b.p.rownumbers && f++;
                        for (b.p.multiselect && f++; f < g;) {
                            if (!0 === c[f].frozen)h = !0, j = f; else break;
                            f++
                        }
                        if (0 <= j && h) {
                            c = b.p.caption ? a(b.grid.cDiv).outerHeight() : 0;
                            f = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).height();
                            b.p.toppager && (c += a(b.grid.topDiv).outerHeight());
                            !0 === b.p.toolbar[0] && "bottom" !== b.p.toolbar[1] && (c += a(b.grid.uDiv).outerHeight());
                            b.grid.fhDiv = a('<div style="position:absolute;left:0px;top:' + c + "px;height:" + f + 'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>');
                            b.grid.fbDiv = a('<div style="position:absolute;left:0px;top:' + (parseInt(c, 10) + parseInt(f, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
                            a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fhDiv);
                            c = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).clone(!0);
                            if (b.p.groupHeader) {
                                a("tr.jqg-first-row-header, tr.jqg-third-row-header", c).each(function () {
                                    a("th:gt(" + j + ")", this).remove()
                                });
                                var e = -1, d = -1, p, l;
                                a("tr.jqg-second-row-header th", c).each(function () {
                                    p = parseInt(a(this).attr("colspan"),
                                        10);
                                    if (l = parseInt(a(this).attr("rowspan"), 10))e++, d++;
                                    p && (e += p, d++);
                                    if (e === j)return!1
                                });
                                e !== j && (d = j);
                                a("tr.jqg-second-row-header", c).each(function () {
                                    a("th:gt(" + d + ")", this).remove()
                                })
                            } else a("tr", c).each(function () {
                                a("th:gt(" + j + ")", this).remove()
                            });
                            a(c).width(1);
                            a(b.grid.fhDiv).append(c).mousemove(function (a) {
                                if (b.grid.resizing)return b.grid.dragMove(a), !1
                            });
                            a(b).bind("jqGridResizeStop.setFrozenColumns", function (c, d, e) {
                                c = a(".ui-jqgrid-htable", b.grid.fhDiv);
                                a("th:eq(" + e + ")", c).width(d);
                                c = a(".ui-jqgrid-btable",
                                    b.grid.fbDiv);
                                a("tr:first td:eq(" + e + ")", c).width(d)
                            });
                            a(b).bind("jqGridOnSortCol.setFrozenColumns", function (c, d, e) {
                                c = a("tr.ui-jqgrid-labels:last th:eq(" + b.p.lastsort + ")", b.grid.fhDiv);
                                d = a("tr.ui-jqgrid-labels:last th:eq(" + e + ")", b.grid.fhDiv);
                                a("span.ui-grid-ico-sort", c).addClass("ui-state-disabled");
                                a(c).attr("aria-selected", "false");
                                a("span.ui-icon-" + b.p.sortorder, d).removeClass("ui-state-disabled");
                                a(d).attr("aria-selected", "true");
                                !b.p.viewsortcols[0] && b.p.lastsort !== e && (a("span.s-ico", c).hide(),
                                    a("span.s-ico", d).show())
                            });
                            a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fbDiv);
                            a(b.grid.bDiv).scroll(function () {
                                a(b.grid.fbDiv).scrollTop(a(this).scrollTop())
                            });
                            !0 === b.p.hoverrows && a("#" + a.jgrid.jqID(b.p.id)).unbind("mouseover").unbind("mouseout");
                            a(b).bind("jqGridAfterGridComplete.setFrozenColumns", function () {
                                a("#" + a.jgrid.jqID(b.p.id) + "_frozen").remove();
                                a(b.grid.fbDiv).height(a(b.grid.bDiv).height() - 16);
                                var c = a("#" + a.jgrid.jqID(b.p.id)).clone(!0);
                                a("tr", c).each(function () {
                                    a("td:gt(" + j + ")",
                                        this).remove()
                                });
                                a(c).width(1).attr("id", b.p.id + "_frozen");
                                a(b.grid.fbDiv).append(c);
                                !0 === b.p.hoverrows && (a("tr.jqgrow", c).hover(function () {
                                    a(this).addClass("ui-state-hover");
                                    a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id)).addClass("ui-state-hover")
                                }, function () {
                                    a(this).removeClass("ui-state-hover");
                                    a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id)).removeClass("ui-state-hover")
                                }), a("tr.jqgrow", "#" + a.jgrid.jqID(b.p.id)).hover(function () {
                                    a(this).addClass("ui-state-hover");
                                    a("#" + a.jgrid.jqID(this.id),
                                        "#" + a.jgrid.jqID(b.p.id) + "_frozen").addClass("ui-state-hover")
                                }, function () {
                                    a(this).removeClass("ui-state-hover");
                                    a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id) + "_frozen").removeClass("ui-state-hover")
                                }));
                                c = null
                            });
                            b.p.frozenColumns = !0
                        }
                    }
                }
            })
        }, destroyFrozenColumns: function () {
            return this.each(function () {
                if (this.grid && !0 === this.p.frozenColumns) {
                    a(this.grid.fhDiv).remove();
                    a(this.grid.fbDiv).remove();
                    this.grid.fhDiv = null;
                    this.grid.fbDiv = null;
                    a(this).unbind(".setFrozenColumns");
                    if (!0 === this.p.hoverrows) {
                        var b;
                        a("#" + a.jgrid.jqID(this.p.id)).bind("mouseover",function (c) {
                            b = a(c.target).closest("tr.jqgrow");
                            "ui-subgrid" !== a(b).attr("class") && a(b).addClass("ui-state-hover")
                        }).bind("mouseout", function (c) {
                                b = a(c.target).closest("tr.jqgrow");
                                a(b).removeClass("ui-state-hover")
                            })
                    }
                    this.p.frozenColumns = !1
                }
            })
        }})
})(jQuery);
(function (a) {
    a.extend(a.jgrid, {showModal: function (a) {
        a.w.show()
    }, closeModal: function (a) {
        a.w.hide().attr("aria-hidden", "true");
        a.o && a.o.remove()
    }, hideModal: function (d, b) {
        b = a.extend({jqm: !0, gb: ""}, b || {});
        if (b.onClose) {
            var c = b.gb && "string" === typeof b.gb && "#gbox_" === b.gb.substr(0, 6) ? b.onClose.call(a("#" + b.gb.substr(6))[0], d) : b.onClose(d);
            if ("boolean" === typeof c && !c)return
        }
        if (a.fn.jqm && !0 === b.jqm)a(d).attr("aria-hidden", "true").jqmHide(); else {
            if ("" !== b.gb)try {
                a(".jqgrid-overlay:first", b.gb).hide()
            } catch (g) {
            }
            a(d).hide().attr("aria-hidden",
                "true")
        }
    }, findPos: function (a) {
        var b = 0, c = 0;
        if (a.offsetParent) {
            do b += a.offsetLeft, c += a.offsetTop; while (a = a.offsetParent)
        }
        return[b, c]
    }, createModal: function (d, b, c, g, e, h, f) {
        var c = a.extend(!0, {}, a.jgrid.jqModal || {}, c), i = document.createElement("div"), j, n = this, f = a.extend({}, f || {});
        j = "rtl" === a(c.gbox).attr("dir") ? !0 : !1;
        i.className = "ui-widget ui-widget-content ui-corner-all ui-jqdialog";
        i.id = d.themodal;
        var k = document.createElement("div");
        k.className = "ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix";
        k.id = d.modalhead;
        a(k).append("<span class='ui-jqdialog-title'>" + c.caption + "</span>");
        var l = a("<a href='javascript:void(0)' class='ui-jqdialog-titlebar-close ui-corner-all'></a>").hover(function () {
            l.addClass("ui-state-hover")
        },function () {
            l.removeClass("ui-state-hover")
        }).append("<span class='ui-icon ui-icon-closethick'></span>");
        a(k).append(l);
        j ? (i.dir = "rtl", a(".ui-jqdialog-title", k).css("float", "right"), a(".ui-jqdialog-titlebar-close", k).css("left", "0.3em")) : (i.dir = "ltr", a(".ui-jqdialog-title", k).css("float",
            "left"), a(".ui-jqdialog-titlebar-close", k).css("right", "0.3em"));
        var m = document.createElement("div");
        a(m).addClass("ui-jqdialog-content ui-widget-content").attr("id", d.modalcontent);
        a(m).append(b);
        i.appendChild(m);
        a(i).prepend(k);
        !0 === h ? a("body").append(i) : "string" === typeof h ? a(h).append(i) : a(i).insertBefore(g);
        a(i).css(f);
        void 0 === c.jqModal && (c.jqModal = !0);
        b = {};
        if (a.fn.jqm && !0 === c.jqModal)0 === c.left && 0 === c.top && c.overlay && (f = [], f = a.jgrid.findPos(e), c.left = f[0] + 4, c.top = f[1] + 4), b.top = c.top + "px", b.left =
            c.left; else if (0 !== c.left || 0 !== c.top)b.left = c.left, b.top = c.top + "px";
        a("a.ui-jqdialog-titlebar-close", k).click(function () {
            var b = a("#" + a.jgrid.jqID(d.themodal)).data("onClose") || c.onClose, e = a("#" + a.jgrid.jqID(d.themodal)).data("gbox") || c.gbox;
            n.hideModal("#" + a.jgrid.jqID(d.themodal), {gb: e, jqm: c.jqModal, onClose: b});
            return false
        });
        if (0 === c.width || !c.width)c.width = 300;
        if (0 === c.height || !c.height)c.height = 200;
        c.zIndex || (g = a(g).parents("*[role=dialog]").filter(":first").css("z-index"), c.zIndex = g ? parseInt(g,
            10) + 2 : 950);
        g = 0;
        j && b.left && !h && (g = a(c.gbox).width() - (!isNaN(c.width) ? parseInt(c.width, 10) : 0) - 8, b.left = parseInt(b.left, 10) + parseInt(g, 10));
        b.left && (b.left += "px");
        a(i).css(a.extend({width: isNaN(c.width) ? "auto" : c.width + "px", height: isNaN(c.height) ? "auto" : c.height + "px", zIndex: c.zIndex, overflow: "hidden"}, b)).attr({tabIndex: "-1", role: "dialog", "aria-labelledby": d.modalhead, "aria-hidden": "true"});
        void 0 === c.drag && (c.drag = !0);
        void 0 === c.resize && (c.resize = !0);
        if (c.drag)if (a(k).css("cursor", "move"), a.fn.jqDrag)a(i).jqDrag(k);
        else try {
                a(i).draggable({handle: a("#" + a.jgrid.jqID(k.id))})
            } catch (o) {
            }
        if (c.resize)if (a.fn.jqResize)a(i).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se'></div>"), a("#" + a.jgrid.jqID(d.themodal)).jqResize(".jqResize", d.scrollelm ? "#" + a.jgrid.jqID(d.scrollelm) : !1); else try {
            a(i).resizable({handles: "se, sw", alsoResize: d.scrollelm ? "#" + a.jgrid.jqID(d.scrollelm) : !1})
        } catch (p) {
        }
        !0 === c.closeOnEscape && a(i).keydown(function (b) {
            if (b.which == 27) {
                b = a("#" + a.jgrid.jqID(d.themodal)).data("onClose") ||
                    c.onClose;
                n.hideModal("#" + a.jgrid.jqID(d.themodal), {gb: c.gbox, jqm: c.jqModal, onClose: b})
            }
        })
    }, viewModal: function (d, b) {
        b = a.extend({toTop: !0, overlay: 10, modal: !1, overlayClass: "ui-widget-overlay", onShow: a.jgrid.showModal, onHide: a.jgrid.closeModal, gbox: "", jqm: !0, jqM: !0}, b || {});
        if (a.fn.jqm && !0 === b.jqm)b.jqM ? a(d).attr("aria-hidden", "false").jqm(b).jqmShow() : a(d).attr("aria-hidden", "false").jqmShow(); else {
            "" !== b.gbox && (a(".jqgrid-overlay:first", b.gbox).show(), a(d).data("gbox", b.gbox));
            a(d).show().attr("aria-hidden",
                "false");
            try {
                a(":input:visible", d)[0].focus()
            } catch (c) {
            }
        }
    }, info_dialog: function (d, b, c, g) {
        var e = {width: 290, height: "auto", dataheight: "auto", drag: !0, resize: !1, left: 250, top: 170, zIndex: 1E3, jqModal: !0, modal: !1, closeOnEscape: !0, align: "center", buttonalign: "center", buttons: []};
        a.extend(!0, e, a.jgrid.jqModal || {}, {caption: "<b>" + d + "</b>"}, g || {});
        var h = e.jqModal, f = this;
        a.fn.jqm && !h && (h = !1);
        d = "";
        if (0 < e.buttons.length)for (g = 0; g < e.buttons.length; g++)void 0 === e.buttons[g].id && (e.buttons[g].id = "info_button_" + g), d +=
            "<a href='javascript:void(0)' id='" + e.buttons[g].id + "' class='fm-button ui-state-default ui-corner-all'>" + e.buttons[g].text + "</a>";
        g = isNaN(e.dataheight) ? e.dataheight : e.dataheight + "px";
        b = "<div id='info_id'>" + ("<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:" + g + ";" + ("text-align:" + e.align + ";") + "'>" + b + "</div>");
        b += c ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + e.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a href='javascript:void(0)' id='closedialog' class='fm-button ui-state-default ui-corner-all'>" +
            c + "</a>" + d + "</div>" : "" !== d ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + e.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>" + d + "</div>" : "";
        b += "</div>";
        try {
            "false" === a("#info_dialog").attr("aria-hidden") && a.jgrid.hideModal("#info_dialog", {jqm: h}), a("#info_dialog").remove()
        } catch (i) {
        }
        a.jgrid.createModal({themodal: "info_dialog", modalhead: "info_head", modalcontent: "info_content", scrollelm: "infocnt"}, b, e, "", "", !0);
        d && a.each(e.buttons,
            function (d) {
                a("#" + a.jgrid.jqID(this.id), "#info_id").bind("click", function () {
                    e.buttons[d].onClick.call(a("#info_dialog"));
                    return!1
                })
            });
        a("#closedialog", "#info_id").click(function () {
            f.hideModal("#info_dialog", {jqm: h, onClose: a("#info_dialog").data("onClose") || e.onClose, gb: a("#info_dialog").data("gbox") || e.gbox});
            return!1
        });
        a(".fm-button", "#info_dialog").hover(function () {
            a(this).addClass("ui-state-hover")
        }, function () {
            a(this).removeClass("ui-state-hover")
        });
        a.isFunction(e.beforeOpen) && e.beforeOpen();
        a.jgrid.viewModal("#info_dialog",
            {onHide: function (a) {
                a.w.hide().remove();
                a.o && a.o.remove()
            }, modal: e.modal, jqm: h});
        a.isFunction(e.afterOpen) && e.afterOpen();
        try {
            a("#info_dialog").focus()
        } catch (j) {
        }
    }, bindEv: function (d, b) {
        a.isFunction(b.dataInit) && b.dataInit.call(this, d);
        b.dataEvents && a.each(b.dataEvents, function () {
            void 0 !== this.data ? a(d).bind(this.type, this.data, this.fn) : a(d).bind(this.type, this.fn)
        })
    }, createEl: function (d, b, c, g, e) {
        function h(d, b, c) {
            var e = "dataInit,dataEvents,dataUrl,buildSelect,sopt,searchhidden,defaultValue,attr,custom_element,custom_value".split(",");
            void 0 !== c && a.isArray(c) && a.merge(e, c);
            a.each(b, function (b, c) {
                -1 === a.inArray(b, e) && a(d).attr(b, c)
            });
            b.hasOwnProperty("id") || a(d).attr("id", a.jgrid.randId())
        }

        var f = "", i = this;
        switch (d) {
            case "textarea":
                f = document.createElement("textarea");
                g ? b.cols || a(f).css({width: "98%"}) : b.cols || (b.cols = 20);
                b.rows || (b.rows = 2);
                if ("&nbsp;" === c || "&#160;" === c || 1 === c.length && 160 === c.charCodeAt(0))c = "";
                f.value = c;
                h(f, b);
                a(f).attr({role: "textbox", multiline: "true"});
                break;
            case "checkbox":
                f = document.createElement("input");
                f.type =
                    "checkbox";
                b.value ? (d = b.value.split(":"), c === d[0] && (f.checked = !0, f.defaultChecked = !0), f.value = d[0], a(f).attr("offval", d[1])) : (d = c.toLowerCase(), 0 > d.search(/(false|f|0|no|n|off|undefined)/i) && "" !== d ? (f.checked = !0, f.defaultChecked = !0, f.value = c) : f.value = "on", a(f).attr("offval", "off"));
                h(f, b, ["value"]);
                a(f).attr("role", "checkbox");
                break;
            case "select":
                f = document.createElement("select");
                f.setAttribute("role", "select");
                g = [];
                !0 === b.multiple ? (d = !0, f.multiple = "multiple", a(f).attr("aria-multiselectable", "true")) :
                    d = !1;
                if (void 0 !== b.dataUrl)d = b.name ? ("" + b.id).substring(0, ("" + b.id).length - ("" + b.name).length - 1) : "" + b.id, g = b.postData || e.postData, i.p && i.p.idPrefix ? d = a.jgrid.stripPref(i.p.idPrefix, d) : g = void 0, a.ajax(a.extend({url: b.dataUrl, type: "GET", dataType: "html", data: a.isFunction(g) ? g.call(i, d, c, "" + b.name) : g, context: {elem: f, options: b, vl: c}, success: function (d) {
                    var b = [], c = this.elem, e = this.vl, f = a.extend({}, this.options), g = f.multiple === true, d = a.isFunction(f.buildSelect) ? f.buildSelect.call(i, d) : d;
                    typeof d === "string" &&
                    (d = a(a.trim(d)).html());
                    if (d) {
                        a(c).append(d);
                        h(c, f);
                        if (f.size === void 0)f.size = g ? 3 : 1;
                        if (g) {
                            b = e.split(",");
                            b = a.map(b, function (d) {
                                return a.trim(d)
                            })
                        } else b[0] = a.trim(e);
                        setTimeout(function () {
                            a("option", c).each(function (d) {
                                if (d === 0 && c.multiple)this.selected = false;
                                a(this).attr("role", "option");
                                if (a.inArray(a.trim(a(this).text()), b) > -1 || a.inArray(a.trim(a(this).val()), b) > -1)this.selected = "selected"
                            })
                        }, 0)
                    }
                }}, e || {})); else if (b.value) {
                    var j;
                    void 0 === b.size && (b.size = d ? 3 : 1);
                    d && (g = c.split(","), g = a.map(g, function (d) {
                        return a.trim(d)
                    }));
                    "function" === typeof b.value && (b.value = b.value());
                    var n, k, l = void 0 === b.separator ? ":" : b.separator, e = void 0 === b.delimiter ? ";" : b.delimiter;
                    if ("string" === typeof b.value) {
                        n = b.value.split(e);
                        for (j = 0; j < n.length; j++) {
                            k = n[j].split(l);
                            2 < k.length && (k[1] = a.map(k,function (a, d) {
                                if (d > 0)return a
                            }).join(l));
                            e = document.createElement("option");
                            e.setAttribute("role", "option");
                            e.value = k[0];
                            e.innerHTML = k[1];
                            f.appendChild(e);
                            if (!d && (a.trim(k[0]) === a.trim(c) || a.trim(k[1]) === a.trim(c)))e.selected = "selected";
                            if (d && (-1 < a.inArray(a.trim(k[1]),
                                g) || -1 < a.inArray(a.trim(k[0]), g)))e.selected = "selected"
                        }
                    } else if ("object" === typeof b.value)for (j in l = b.value, l)if (l.hasOwnProperty(j)) {
                        e = document.createElement("option");
                        e.setAttribute("role", "option");
                        e.value = j;
                        e.innerHTML = l[j];
                        f.appendChild(e);
                        if (!d && (a.trim(j) === a.trim(c) || a.trim(l[j]) === a.trim(c)))e.selected = "selected";
                        if (d && (-1 < a.inArray(a.trim(l[j]), g) || -1 < a.inArray(a.trim(j), g)))e.selected = "selected"
                    }
                    h(f, b, ["value"])
                }
                break;
            case "text":
            case "password":
            case "button":
                j = "button" === d ? "button" :
                    "textbox";
                f = document.createElement("input");
                f.type = d;
                f.value = c;
                h(f, b);
                "button" !== d && (g ? b.size || a(f).css({width: "98%"}) : b.size || (b.size = 20));
                a(f).attr("role", j);
                break;
            case "image":
            case "file":
                f = document.createElement("input");
                f.type = d;
                h(f, b);
                break;
            case "custom":
                f = document.createElement("span");
                try {
                    if (a.isFunction(b.custom_element))if (l = b.custom_element.call(i, c, b))l = a(l).addClass("customelement").attr({id: b.id, name: b.name}), a(f).empty().append(l); else throw"e2"; else throw"e1";
                } catch (m) {
                    "e1" === m && a.jgrid.info_dialog(a.jgrid.errors.errcap,
                        "function 'custom_element' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose), "e2" === m ? a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose) : a.jgrid.info_dialog(a.jgrid.errors.errcap, "string" === typeof m ? m : m.message, a.jgrid.edit.bClose)
                }
        }
        return f
    }, checkDate: function (a, b) {
        var c = {}, g, a = a.toLowerCase();
        g = -1 !== a.indexOf("/") ? "/" : -1 !== a.indexOf("-") ? "-" : -1 !== a.indexOf(".") ? "." : "/";
        a = a.split(g);
        b = b.split(g);
        if (3 !== b.length)return!1;
        g = -1;
        var e,
            h = -1, f = -1, i;
        for (i = 0; i < a.length; i++)e = isNaN(b[i]) ? 0 : parseInt(b[i], 10), c[a[i]] = e, e = a[i], -1 !== e.indexOf("y") && (g = i), -1 !== e.indexOf("m") && (f = i), -1 !== e.indexOf("d") && (h = i);
        e = "y" === a[g] || "yyyy" === a[g] ? 4 : "yy" === a[g] ? 2 : -1;
        i = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var j;
        if (-1 === g)return!1;
        j = c[a[g]].toString();
        2 === e && 1 === j.length && (e = 1);
        if (j.length !== e || 0 === c[a[g]] && "00" !== b[g] || -1 === f)return!1;
        j = c[a[f]].toString();
        if (1 > j.length || 1 > c[a[f]] || 12 < c[a[f]] || -1 === h)return!1;
        j = c[a[h]].toString();
        return 1 > j.length ||
            1 > c[a[h]] || 31 < c[a[h]] || 2 === c[a[f]] && c[a[h]] > (0 === c[a[g]] % 4 && (0 !== c[a[g]] % 100 || 0 === c[a[g]] % 400) ? 29 : 28) || c[a[h]] > i[c[a[f]]] ? !1 : !0
    }, isEmpty: function (a) {
        return a.match(/^\s+$/) || "" === a ? !0 : !1
    }, checkTime: function (d) {
        var b = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/;
        if (!a.jgrid.isEmpty(d))if (d = d.match(b)) {
            if (d[3]) {
                if (1 > d[1] || 12 < d[1])return!1
            } else if (23 < d[1])return!1;
            if (59 < d[2])return!1
        } else return!1;
        return!0
    }, checkValues: function (d, b, c, g) {
        var e, h, f;
        f = this.p.colModel;
        if (void 0 === c)if ("string" === typeof b) {
            c = 0;
            for (g =
                     f.length; c < g; c++)if (f[c].name === b) {
                e = f[c].editrules;
                b = c;
                null != f[c].formoptions && (h = f[c].formoptions.label);
                break
            }
        } else 0 <= b && (e = f[b].editrules); else e = c, h = void 0 === g ? "_" : g;
        if (e) {
            h || (h = null != this.p.colNames ? this.p.colNames[b] : f[b].label);
            if (!0 === e.required && a.jgrid.isEmpty(d))return[!1, h + ": " + a.jgrid.edit.msg.required, ""];
            c = !1 === e.required ? !1 : !0;
            if (!0 === e.number && !(!1 === c && a.jgrid.isEmpty(d)) && isNaN(d))return[!1, h + ": " + a.jgrid.edit.msg.number, ""];
            if (void 0 !== e.minValue && !isNaN(e.minValue) && parseFloat(d) <
                parseFloat(e.minValue))return[!1, h + ": " + a.jgrid.edit.msg.minValue + " " + e.minValue, ""];
            if (void 0 !== e.maxValue && !isNaN(e.maxValue) && parseFloat(d) > parseFloat(e.maxValue))return[!1, h + ": " + a.jgrid.edit.msg.maxValue + " " + e.maxValue, ""];
            if (!0 === e.email && !(!1 === c && a.jgrid.isEmpty(d)) && (g = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i,
                !g.test(d)))return[!1, h + ": " + a.jgrid.edit.msg.email, ""];
            if (!0 === e.integer && !(!1 === c && a.jgrid.isEmpty(d)) && (isNaN(d) || 0 !== d % 1 || -1 !== d.indexOf(".")))return[!1, h + ": " + a.jgrid.edit.msg.integer, ""];
            if (!0 === e.date && !(!1 === c && a.jgrid.isEmpty(d)) && (f[b].formatoptions && f[b].formatoptions.newformat ? (f = f[b].formatoptions.newformat, a.jgrid.formatter.date.masks.hasOwnProperty(f) && (f = a.jgrid.formatter.date.masks[f])) : f = f[b].datefmt || "Y-m-d", !a.jgrid.checkDate(f, d)))return[!1, h + ": " + a.jgrid.edit.msg.date + " - " +
                f, ""];
            if (!0 === e.time && !(!1 === c && a.jgrid.isEmpty(d)) && !a.jgrid.checkTime(d))return[!1, h + ": " + a.jgrid.edit.msg.date + " - hh:mm (am/pm)", ""];
            if (!0 === e.url && !(!1 === c && a.jgrid.isEmpty(d)) && (g = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i, !g.test(d)))return[!1, h + ": " + a.jgrid.edit.msg.url, ""];
            if (!0 === e.custom && !(!1 === c && a.jgrid.isEmpty(d)))return a.isFunction(e.custom_func) ? (d = e.custom_func.call(this, d, h, b), a.isArray(d) ? d : [!1, a.jgrid.edit.msg.customarray,
                ""]) : [!1, a.jgrid.edit.msg.customfcheck, ""]
        }
        return[!0, "", ""]
    }})
})(jQuery);
(function (a) {
    var b = {};
    a.jgrid.extend({searchGrid: function (b) {
        b = a.extend(!0, {recreateFilter: !1, drag: !0, sField: "searchField", sValue: "searchString", sOper: "searchOper", sFilter: "filters", loadDefaults: !0, beforeShowSearch: null, afterShowSearch: null, onInitializeSearch: null, afterRedraw: null, afterChange: null, closeAfterSearch: !1, closeAfterReset: !1, closeOnEscape: !1, searchOnEnter: !1, multipleSearch: !1, multipleGroup: !1, top: 0, left: 0, jqModal: !0, modal: !1, resize: !0, width: 450, height: "auto", dataheight: "auto", showQuery: !1,
            errorcheck: !0, sopt: null, stringResult: void 0, onClose: null, onSearch: null, onReset: null, toTop: !0, overlay: 30, columns: [], tmplNames: null, tmplFilters: null, tmplLabel: " Template: ", showOnLoad: !1, layer: null, operands: {eq: "=", ne: "<>", lt: "<", le: "<=", gt: ">", ge: ">=", bw: "LIKE", bn: "NOT LIKE", "in": "IN", ni: "NOT IN", ew: "LIKE", en: "NOT LIKE", cn: "LIKE", nc: "NOT LIKE", nu: "IS NULL", nn: "ISNOT NULL"}}, a.jgrid.search, b || {});
        return this.each(function () {
            function c(c) {
                t = a(e).triggerHandler("jqGridFilterBeforeShow", [c]);
                void 0 ===
                    t && (t = !0);
                t && a.isFunction(b.beforeShowSearch) && (t = b.beforeShowSearch.call(e, c));
                t && (a.jgrid.viewModal("#" + a.jgrid.jqID(u.themodal), {gbox: "#gbox_" + a.jgrid.jqID(i), jqm: b.jqModal, modal: b.modal, overlay: b.overlay, toTop: b.toTop}), a(e).triggerHandler("jqGridFilterAfterShow", [c]), a.isFunction(b.afterShowSearch) && b.afterShowSearch.call(e, c))
            }

            var e = this;
            if (e.grid) {
                var i = "fbox_" + e.p.id, t = !0, u = {themodal: "searchmod" + i, modalhead: "searchhd" + i, modalcontent: "searchcnt" + i, scrollelm: i}, s = e.p.postData[b.sFilter];
                "string" === typeof s && (s = a.jgrid.parse(s));
                !0 === b.recreateFilter && a("#" + a.jgrid.jqID(u.themodal)).remove();
                if (void 0 !== a("#" + a.jgrid.jqID(u.themodal))[0])c(a("#fbox_" + a.jgrid.jqID(+e.p.id))); else {
                    var m = a("<div><div id='" + i + "' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_" + a.jgrid.jqID(e.p.id)), h = "left", g = "";
                    "rtl" === e.p.direction && (h = "right", g = " style='text-align:left'", m.attr("dir", "rtl"));
                    var n = a.extend([], e.p.colModel), x = "<a href='javascript:void(0)' id='" + i + "_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>" +
                        b.Find + "</a>", d = "<a href='javascript:void(0)' id='" + i + "_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>" + b.Reset + "</a>", q = "", f = "", o, k = !1, p = -1;
                    b.showQuery && (q = "<a href='javascript:void(0)' id='" + i + "_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>");
                    b.columns.length ? (n = b.columns, p = 0, o = n[0].index || n[0].name) : a.each(n, function (a, b) {
                        if (!b.label)b.label = e.p.colNames[a];
                        if (!k) {
                            var c = b.search === void 0 ? true : b.search, d = b.hidden === true;
                            if (b.searchoptions && b.searchoptions.searchhidden === true && c || c && !d) {
                                k = true;
                                o = b.index || b.name;
                                p = a
                            }
                        }
                    });
                    if (!s && o || !1 === b.multipleSearch) {
                        var y = "eq";
                        0 <= p && n[p].searchoptions && n[p].searchoptions.sopt ? y = n[p].searchoptions.sopt[0] : b.sopt && b.sopt.length && (y = b.sopt[0]);
                        s = {groupOp: "AND", rules: [
                            {field: o, op: y, data: ""}
                        ]}
                    }
                    k = !1;
                    b.tmplNames && b.tmplNames.length && (k = !0, f = b.tmplLabel, f += "<select class='ui-template'>",
                        f += "<option value='default'>Default</option>", a.each(b.tmplNames, function (a, b) {
                        f = f + ("<option value='" + a + "'>" + b + "</option>")
                    }), f += "</select>");
                    h = "<table class='EditTable' style='border:0px none;margin-top:5px' id='" + i + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:" + h + "'>" + d + f + "</td><td class='EditButton' " + g + ">" + q + x + "</td></tr></tbody></table>";
                    i = a.jgrid.jqID(i);
                    a("#" + i).jqFilter({columns: n, filter: b.loadDefaults ?
                        s : null, showQuery: b.showQuery, errorcheck: b.errorcheck, sopt: b.sopt, groupButton: b.multipleGroup, ruleButtons: b.multipleSearch, afterRedraw: b.afterRedraw, ops: b.odata, operands: b.operands, ajaxSelectOptions: e.p.ajaxSelectOptions, groupOps: b.groupOps, onChange: function () {
                        this.p.showQuery && a(".query", this).html(this.toUserFriendlyString());
                        a.isFunction(b.afterChange) && b.afterChange.call(e, a("#" + i), b)
                    }, direction: e.p.direction, id: e.p.id});
                    m.append(h);
                    k && b.tmplFilters && b.tmplFilters.length && a(".ui-template", m).bind("change",
                        function () {
                            var c = a(this).val();
                            c === "default" ? a("#" + i).jqFilter("addFilter", s) : a("#" + i).jqFilter("addFilter", b.tmplFilters[parseInt(c, 10)]);
                            return false
                        });
                    !0 === b.multipleGroup && (b.multipleSearch = !0);
                    a(e).triggerHandler("jqGridFilterInitialize", [a("#" + i)]);
                    a.isFunction(b.onInitializeSearch) && b.onInitializeSearch.call(e, a("#" + i));
                    b.gbox = "#gbox_" + i;
                    b.layer ? a.jgrid.createModal(u, m, b, "#gview_" + a.jgrid.jqID(e.p.id), a("#gbox_" + a.jgrid.jqID(e.p.id))[0], "#" + a.jgrid.jqID(b.layer), {position: "relative"}) : a.jgrid.createModal(u,
                        m, b, "#gview_" + a.jgrid.jqID(e.p.id), a("#gbox_" + a.jgrid.jqID(e.p.id))[0]);
                    (b.searchOnEnter || b.closeOnEscape) && a("#" + a.jgrid.jqID(u.themodal)).keydown(function (c) {
                        var d = a(c.target);
                        if (b.searchOnEnter && c.which === 13 && !d.hasClass("add-group") && !d.hasClass("add-rule") && !d.hasClass("delete-group") && !d.hasClass("delete-rule") && (!d.hasClass("fm-button") || !d.is("[id$=_query]"))) {
                            a("#" + i + "_search").focus().click();
                            return false
                        }
                        if (b.closeOnEscape && c.which === 27) {
                            a("#" + a.jgrid.jqID(u.modalhead)).find(".ui-jqdialog-titlebar-close").focus().click();
                            return false
                        }
                    });
                    q && a("#" + i + "_query").bind("click", function () {
                        a(".queryresult", m).toggle();
                        return false
                    });
                    void 0 === b.stringResult && (b.stringResult = b.multipleSearch);
                    a("#" + i + "_search").bind("click", function () {
                        var c = a("#" + i), d = {}, f, l = c.jqFilter("filterData");
                        if (b.errorcheck) {
                            c[0].hideError();
                            b.showQuery || c.jqFilter("toSQLString");
                            if (c[0].p.error) {
                                c[0].showError();
                                return false
                            }
                        }
                        if (b.stringResult) {
                            try {
                                f = xmlJsonClass.toJson(l, "", "", false)
                            } catch (g) {
                                try {
                                    f = JSON.stringify(l)
                                } catch (h) {
                                }
                            }
                            if (typeof f === "string") {
                                d[b.sFilter] =
                                    f;
                                a.each([b.sField, b.sValue, b.sOper], function () {
                                    d[this] = ""
                                })
                            }
                        } else if (b.multipleSearch) {
                            d[b.sFilter] = l;
                            a.each([b.sField, b.sValue, b.sOper], function () {
                                d[this] = ""
                            })
                        } else {
                            d[b.sField] = l.rules[0].field;
                            d[b.sValue] = l.rules[0].data;
                            d[b.sOper] = l.rules[0].op;
                            d[b.sFilter] = ""
                        }
                        e.p.search = true;
                        a.extend(e.p.postData, d);
                        a(e).triggerHandler("jqGridFilterSearch");
                        a.isFunction(b.onSearch) && b.onSearch.call(e);
                        a(e).trigger("reloadGrid", [
                            {page: 1}
                        ]);
                        b.closeAfterSearch && a.jgrid.hideModal("#" + a.jgrid.jqID(u.themodal), {gb: "#gbox_" +
                            a.jgrid.jqID(e.p.id), jqm: b.jqModal, onClose: b.onClose});
                        return false
                    });
                    a("#" + i + "_reset").bind("click", function () {
                        var c = {}, d = a("#" + i);
                        e.p.search = false;
                        b.multipleSearch === false ? c[b.sField] = c[b.sValue] = c[b.sOper] = "" : c[b.sFilter] = "";
                        d[0].resetFilter();
                        k && a(".ui-template", m).val("default");
                        a.extend(e.p.postData, c);
                        a(e).triggerHandler("jqGridFilterReset");
                        a.isFunction(b.onReset) && b.onReset.call(e);
                        a(e).trigger("reloadGrid", [
                            {page: 1}
                        ]);
                        return false
                    });
                    c(a("#" + i));
                    a(".fm-button:not(.ui-state-disabled)", m).hover(function () {
                            a(this).addClass("ui-state-hover")
                        },
                        function () {
                            a(this).removeClass("ui-state-hover")
                        })
                }
            }
        })
    }, editGridRow: function (r, c) {
        c = a.extend(!0, {top: 0, left: 0, width: 300, datawidth: "auto", height: "auto", dataheight: "auto", modal: !1, overlay: 30, drag: !0, resize: !0, url: null, mtype: "POST", clearAfterAdd: !0, closeAfterEdit: !1, reloadAfterSubmit: !0, onInitializeForm: null, beforeInitData: null, beforeShowForm: null, afterShowForm: null, beforeSubmit: null, afterSubmit: null, onclickSubmit: null, afterComplete: null, onclickPgButtons: null, afterclickPgButtons: null, editData: {}, recreateForm: !1,
            jqModal: !0, closeOnEscape: !1, addedrow: "first", topinfo: "", bottominfo: "", saveicon: [], closeicon: [], savekey: [!1, 13], navkeys: [!1, 38, 40], checkOnSubmit: !1, checkOnUpdate: !1, _savedData: {}, processing: !1, onClose: null, ajaxEditOptions: {}, serializeEditData: null, viewPagerButtons: !0, overlayClass: "ui-widget-overlay"}, a.jgrid.edit, c || {});
        b[a(this)[0].p.id] = c;
        return this.each(function () {
            function e() {
                a(k + " > tbody > tr > td > .FormElement").each(function () {
                    var c = a(".customelement", this);
                    if (c.length) {
                        var b = a(c[0]).attr("name");
                        a.each(d.p.colModel, function () {
                            if (this.name === b && this.editoptions && a.isFunction(this.editoptions.custom_value)) {
                                try {
                                    if (j[b] = this.editoptions.custom_value.call(d, a("#" + a.jgrid.jqID(b), k), "get"), void 0 === j[b])throw"e1";
                                } catch (c) {
                                    "e1" === c ? a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose) : a.jgrid.info_dialog(a.jgrid.errors.errcap, c.message, a.jgrid.edit.bClose)
                                }
                                return!0
                            }
                        })
                    } else {
                        switch (a(this).get(0).type) {
                            case "checkbox":
                                a(this).is(":checked") ?
                                    j[this.name] = a(this).val() : (c = a(this).attr("offval"), j[this.name] = c);
                                break;
                            case "select-one":
                                j[this.name] = a("option:selected", this).val();
                                break;
                            case "select-multiple":
                                j[this.name] = a(this).val();
                                j[this.name] = j[this.name] ? j[this.name].join(",") : "";
                                a("option:selected", this).each(function (c, b) {
                                    a(b).text()
                                });
                                break;
                            case "password":
                            case "text":
                            case "textarea":
                            case "button":
                                j[this.name] = a(this).val()
                        }
                        d.p.autoencode && (j[this.name] = a.jgrid.htmlEncode(j[this.name]))
                    }
                });
                return!0
            }

            function i(c, e, l, g) {
                var h, j, k,
                    p = 0, i, m, o, n = [], q = !1, z = "", r;
                for (r = 1; r <= g; r++)z += "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>";
                "_empty" !== c && (q = a(e).jqGrid("getInd", c));
                a(e.p.colModel).each(function (r) {
                    h = this.name;
                    m = (j = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1) ? "style='display:none'" : "";
                    if ("cb" !== h && "subgrid" !== h && !0 === this.editable && "rn" !== h) {
                        if (!1 === q)i = ""; else if (h === e.p.ExpandColumn && !0 === e.p.treeGrid)i = a("td[role='gridcell']:eq(" + r + ")", e.rows[q]).text(); else {
                            try {
                                i = a.unformat.call(e,
                                    a("td[role='gridcell']:eq(" + r + ")", e.rows[q]), {rowId: c, colModel: this}, r)
                            } catch (t) {
                                i = this.edittype && "textarea" === this.edittype ? a("td[role='gridcell']:eq(" + r + ")", e.rows[q]).text() : a("td[role='gridcell']:eq(" + r + ")", e.rows[q]).html()
                            }
                            if (!i || "&nbsp;" === i || "&#160;" === i || 1 === i.length && 160 === i.charCodeAt(0))i = ""
                        }
                        var v = a.extend({}, this.editoptions || {}, {id: h, name: h}), s = a.extend({}, {elmprefix: "", elmsuffix: "", rowabove: !1, rowcontent: ""}, this.formoptions || {}), w = parseInt(s.rowpos, 10) || p + 1, u = parseInt(2 * (parseInt(s.colpos,
                            10) || 1), 10);
                        "_empty" === c && v.defaultValue && (i = a.isFunction(v.defaultValue) ? v.defaultValue.call(d) : v.defaultValue);
                        this.edittype || (this.edittype = "text");
                        d.p.autoencode && (i = a.jgrid.htmlDecode(i));
                        o = a.jgrid.createEl.call(d, this.edittype, v, i, !1, a.extend({}, a.jgrid.ajaxOptions, e.p.ajaxSelectOptions || {}));
                        if (b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[h] = i;
                        a(o).addClass("FormElement");
                        -1 < a.inArray(this.edittype, ["text", "textarea", "password", "select"]) && a(o).addClass("ui-widget-content ui-corner-all");
                        k = a(l).find("tr[rowpos=" + w + "]");
                        if (s.rowabove) {
                            var y = a("<tr><td class='contentinfo' colspan='" + 2 * g + "'>" + s.rowcontent + "</td></tr>");
                            a(l).append(y);
                            y[0].rp = w
                        }
                        0 === k.length && (k = a("<tr " + m + " rowpos='" + w + "'></tr>").addClass("FormData").attr("id", "tr_" + h), a(k).append(z), a(l).append(k), k[0].rp = w);
                        a("td:eq(" + (u - 2) + ")", k[0]).html(void 0 === s.label ? e.p.colNames[r] : s.label);
                        a("td:eq(" + (u - 1) + ")", k[0]).append(s.elmprefix).append(o).append(s.elmsuffix);
                        a.isFunction(v.custom_value) && "_empty" !== c && v.custom_value.call(d,
                            a("#" + h, "#" + f), "set", i);
                        a.jgrid.bindEv.call(d, o, v);
                        n[p] = r;
                        p++
                    }
                });
                if (0 < p && (r = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (2 * g - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='" + e.p.id + "_id' value='" + c + "'/></td></tr>"), r[0].rp = p + 999, a(l).append(r), b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate))b[d.p.id]._savedData[e.p.id + "_id"] = c;
                return n
            }

            function t(c, e, f) {
                var l, h = 0, g, j, i, p, r;
                if (b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate)b[d.p.id]._savedData =
                {}, b[d.p.id]._savedData[e.p.id + "_id"] = c;
                var m = e.p.colModel;
                if ("_empty" === c)a(m).each(function () {
                    l = this.name;
                    i = a.extend({}, this.editoptions || {});
                    if ((j = a("#" + a.jgrid.jqID(l), "#" + f)) && j.length && null !== j[0])if (p = "", i.defaultValue ? (p = a.isFunction(i.defaultValue) ? i.defaultValue.call(d) : i.defaultValue, "checkbox" === j[0].type ? (r = p.toLowerCase(), 0 > r.search(/(false|f|0|no|n|off|undefined)/i) && "" !== r ? (j[0].checked = !0, j[0].defaultChecked = !0, j[0].value = p) : (j[0].checked = !1, j[0].defaultChecked = !1)) : j.val(p)) : "checkbox" ===
                        j[0].type ? (j[0].checked = !1, j[0].defaultChecked = !1, p = a(j).attr("offval")) : j[0].type && "select" === j[0].type.substr(0, 6) ? j[0].selectedIndex = 0 : j.val(p), !0 === b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[l] = p
                }), a("#id_g", "#" + f).val(c); else {
                    var o = a(e).jqGrid("getInd", c, !0);
                    o && (a('td[role="gridcell"]', o).each(function (j) {
                        l = m[j].name;
                        if ("cb" !== l && "subgrid" !== l && "rn" !== l && !0 === m[j].editable) {
                            if (l === e.p.ExpandColumn && !0 === e.p.treeGrid)g = a(this).text(); else try {
                                g = a.unformat.call(e, a(this),
                                    {rowId: c, colModel: m[j]}, j)
                            } catch (i) {
                                g = "textarea" === m[j].edittype ? a(this).text() : a(this).html()
                            }
                            d.p.autoencode && (g = a.jgrid.htmlDecode(g));
                            if (!0 === b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[l] = g;
                            l = a.jgrid.jqID(l);
                            switch (m[j].edittype) {
                                case "password":
                                case "text":
                                case "button":
                                case "image":
                                case "textarea":
                                    if ("&nbsp;" === g || "&#160;" === g || 1 === g.length && 160 === g.charCodeAt(0))g = "";
                                    a("#" + l, "#" + f).val(g);
                                    break;
                                case "select":
                                    var k = g.split(","), k = a.map(k, function (c) {
                                        return a.trim(c)
                                    });
                                    a("#" + l + " option", "#" + f).each(function () {
                                        this.selected = !m[j].editoptions.multiple && (a.trim(g) === a.trim(a(this).text()) || k[0] === a.trim(a(this).text()) || k[0] === a.trim(a(this).val())) ? !0 : m[j].editoptions.multiple ? -1 < a.inArray(a.trim(a(this).text()), k) || -1 < a.inArray(a.trim(a(this).val()), k) ? !0 : !1 : !1
                                    });
                                    break;
                                case "checkbox":
                                    g = "" + g;
                                    if (m[j].editoptions && m[j].editoptions.value)if (m[j].editoptions.value.split(":")[0] === g)a("#" + l, "#" + f)[d.p.useProp ? "prop" : "attr"]({checked: !0, defaultChecked: !0}); else a("#" +
                                        l, "#" + f)[d.p.useProp ? "prop" : "attr"]({checked: !1, defaultChecked: !1}); else g = g.toLowerCase(), 0 > g.search(/(false|f|0|no|n|off|undefined)/i) && "" !== g ? (a("#" + l, "#" + f)[d.p.useProp ? "prop" : "attr"]("checked", !0), a("#" + l, "#" + f)[d.p.useProp ? "prop" : "attr"]("defaultChecked", !0)) : (a("#" + l, "#" + f)[d.p.useProp ? "prop" : "attr"]("checked", !1), a("#" + l, "#" + f)[d.p.useProp ? "prop" : "attr"]("defaultChecked", !1));
                                    break;
                                case "custom":
                                    try {
                                        if (m[j].editoptions && a.isFunction(m[j].editoptions.custom_value))m[j].editoptions.custom_value.call(d,
                                            a("#" + l, "#" + f), "set", g); else throw"e1";
                                    } catch (p) {
                                        "e1" === p ? a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose) : a.jgrid.info_dialog(a.jgrid.errors.errcap, p.message, a.jgrid.edit.bClose)
                                    }
                            }
                            h++
                        }
                    }), 0 < h && a("#id_g", k).val(c))
                }
            }

            function u() {
                a.each(d.p.colModel, function (a, c) {
                    c.editoptions && !0 === c.editoptions.NullIfEmpty && j.hasOwnProperty(c.name) && "" === j[c.name] && (j[c.name] = "null")
                })
            }

            function s() {
                var e, l = [!0, "", ""], g = {}, h = d.p.prmNames, i, m, r, o, n,
                    z = a(d).triggerHandler("jqGridAddEditBeforeCheckValues", [a("#" + f), v]);
                z && "object" === typeof z && (j = z);
                a.isFunction(b[d.p.id].beforeCheckValues) && (z = b[d.p.id].beforeCheckValues.call(d, j, a("#" + f), v)) && "object" === typeof z && (j = z);
                for (r in j)if (j.hasOwnProperty(r) && (l = a.jgrid.checkValues.call(d, j[r], r), !1 === l[0]))break;
                u();
                l[0] && (g = a(d).triggerHandler("jqGridAddEditClickSubmit", [b[d.p.id], j, v]), void 0 === g && a.isFunction(b[d.p.id].onclickSubmit) && (g = b[d.p.id].onclickSubmit.call(d, b[d.p.id], j, v) || {}), l = a(d).triggerHandler("jqGridAddEditBeforeSubmit",
                    [j, a("#" + f), v]), void 0 === l && (l = [!0, "", ""]), l[0] && a.isFunction(b[d.p.id].beforeSubmit) && (l = b[d.p.id].beforeSubmit.call(d, j, a("#" + f), v)));
                if (l[0] && !b[d.p.id].processing) {
                    b[d.p.id].processing = !0;
                    a("#sData", k + "_2").addClass("ui-state-active");
                    m = h.oper;
                    i = h.id;
                    j[m] = "_empty" === a.trim(j[d.p.id + "_id"]) ? h.addoper : h.editoper;
                    j[m] !== h.addoper ? j[i] = j[d.p.id + "_id"] : void 0 === j[i] && (j[i] = j[d.p.id + "_id"]);
                    delete j[d.p.id + "_id"];
                    j = a.extend(j, b[d.p.id].editData, g);
                    if (!0 === d.p.treeGrid)for (n in j[m] === h.addoper && (o =
                        a(d).jqGrid("getGridParam", "selrow"), j["adjacency" === d.p.treeGridModel ? d.p.treeReader.parent_id_field : "parent_id"] = o), d.p.treeReader)d.p.treeReader.hasOwnProperty(n) && (g = d.p.treeReader[n], j.hasOwnProperty(g) && !(j[m] === h.addoper && "parent_id_field" === n) && delete j[g]);
                    j[i] = a.jgrid.stripPref(d.p.idPrefix, j[i]);
                    n = a.extend({url: b[d.p.id].url || a(d).jqGrid("getGridParam", "editurl"), type: b[d.p.id].mtype, data: a.isFunction(b[d.p.id].serializeEditData) ? b[d.p.id].serializeEditData.call(d, j) : j, complete: function (g, r) {
                        var n;
                        j[i] = d.p.idPrefix + j[i];
                        if (g.status >= 300 && g.status !== 304) {
                            l[0] = false;
                            l[1] = a(d).triggerHandler("jqGridAddEditErrorTextFormat", [g, v]);
                            l[1] = a.isFunction(b[d.p.id].errorTextFormat) ? b[d.p.id].errorTextFormat.call(d, g, v) : r + " Status: '" + g.statusText + "'. Error code: " + g.status
                        } else {
                            l = a(d).triggerHandler("jqGridAddEditAfterSubmit", [g, j, v]);
                            l === void 0 && (l = [true, "", ""]);
                            l[0] && a.isFunction(b[d.p.id].afterSubmit) && (l = b[d.p.id].afterSubmit.call(d, g, j, v))
                        }
                        if (l[0] === false) {
                            a("#FormError>td", k).html(l[1]);
                            a("#FormError", k).show()
                        } else {
                            d.p.autoencode && a.each(j, function (c, b) {
                                j[c] = a.jgrid.htmlDecode(b)
                            });
                            if (j[m] === h.addoper) {
                                l[2] || (l[2] = a.jgrid.randId());
                                j[i] = l[2];
                                b[d.p.id].reloadAfterSubmit ? a(d).trigger("reloadGrid") : d.p.treeGrid === true ? a(d).jqGrid("addChildNode", l[2], o, j) : a(d).jqGrid("addRowData", l[2], j, c.addedrow);
                                if (b[d.p.id].closeAfterAdd) {
                                    d.p.treeGrid !== true && a(d).jqGrid("setSelection", l[2]);
                                    a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose})
                                } else b[d.p.id].clearAfterAdd &&
                                t("_empty", d, f)
                            } else {
                                if (b[d.p.id].reloadAfterSubmit) {
                                    a(d).trigger("reloadGrid");
                                    b[d.p.id].closeAfterEdit || setTimeout(function () {
                                        a(d).jqGrid("setSelection", j[i])
                                    }, 1E3)
                                } else d.p.treeGrid === true ? a(d).jqGrid("setTreeRow", j[i], j) : a(d).jqGrid("setRowData", j[i], j);
                                b[d.p.id].closeAfterEdit && a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose})
                            }
                            if (a.isFunction(b[d.p.id].afterComplete)) {
                                e = g;
                                setTimeout(function () {
                                    a(d).triggerHandler("jqGridAddEditAfterComplete",
                                        [e, j, a("#" + f), v]);
                                    b[d.p.id].afterComplete.call(d, e, j, a("#" + f), v);
                                    e = null
                                }, 500)
                            }
                            if (b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate) {
                                a("#" + f).data("disabled", false);
                                if (b[d.p.id]._savedData[d.p.id + "_id"] !== "_empty")for (n in b[d.p.id]._savedData)b[d.p.id]._savedData.hasOwnProperty(n) && j[n] && (b[d.p.id]._savedData[n] = j[n])
                            }
                        }
                        b[d.p.id].processing = false;
                        a("#sData", k + "_2").removeClass("ui-state-active");
                        try {
                            a(":input:visible", "#" + f)[0].focus()
                        } catch (z) {
                        }
                    }}, a.jgrid.ajaxOptions, b[d.p.id].ajaxEditOptions);
                    !n.url && !b[d.p.id].useDataProxy && (a.isFunction(d.p.dataProxy) ? b[d.p.id].useDataProxy = !0 : (l[0] = !1, l[1] += " " + a.jgrid.errors.nourl));
                    l[0] && (b[d.p.id].useDataProxy ? (g = d.p.dataProxy.call(d, n, "set_" + d.p.id), void 0 === g && (g = [!0, ""]), !1 === g[0] ? (l[0] = !1, l[1] = g[1] || "Error deleting the selected row!") : (n.data.oper === h.addoper && b[d.p.id].closeAfterAdd && a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose}), n.data.oper === h.editoper && b[d.p.id].closeAfterEdit &&
                        a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose}))) : a.ajax(n))
                }
                !1 === l[0] && (a("#FormError>td", k).html(l[1]), a("#FormError", k).show())
            }

            function m(a, c) {
                var b = !1, d;
                for (d in a)if (a.hasOwnProperty(d) && a[d] != c[d]) {
                    b = !0;
                    break
                }
                return b
            }

            function h() {
                var c = !0;
                a("#FormError", k).hide();
                if (b[d.p.id].checkOnUpdate && (j = {}, e(), K = m(j, b[d.p.id]._savedData)))a("#" + f).data("disabled", !0), a(".confirm", "#" + p.themodal).show(), c = !1;
                return c
            }

            function g() {
                var c;
                if ("_empty" !== r && void 0 !== d.p.savedRow && 0 < d.p.savedRow.length && a.isFunction(a.fn.jqGrid.restoreRow))for (c = 0; c < d.p.savedRow.length; c++)if (d.p.savedRow[c].id == r) {
                    a(d).jqGrid("restoreRow", r);
                    break
                }
            }

            function n(c, b) {
                var d = b[1].length - 1;
                0 === c ? a("#pData", k + "_2").addClass("ui-state-disabled") : void 0 !== b[1][c - 1] && a("#" + a.jgrid.jqID(b[1][c - 1])).hasClass("ui-state-disabled") ? a("#pData", k + "_2").addClass("ui-state-disabled") : a("#pData", k + "_2").removeClass("ui-state-disabled");
                c === d ? a("#nData", k + "_2").addClass("ui-state-disabled") :
                    void 0 !== b[1][c + 1] && a("#" + a.jgrid.jqID(b[1][c + 1])).hasClass("ui-state-disabled") ? a("#nData", k + "_2").addClass("ui-state-disabled") : a("#nData", k + "_2").removeClass("ui-state-disabled")
            }

            function x() {
                var c = a(d).jqGrid("getDataIDs"), b = a("#id_g", k).val();
                return[a.inArray(b, c), c]
            }

            var d = this;
            if (d.grid && r) {
                var q = d.p.id, f = "FrmGrid_" + q, o = "TblGrid_" + q, k = "#" + a.jgrid.jqID(o), p = {themodal: "editmod" + q, modalhead: "edithd" + q, modalcontent: "editcnt" + q, scrollelm: f}, y = a.isFunction(b[d.p.id].beforeShowForm) ? b[d.p.id].beforeShowForm :
                    !1, A = a.isFunction(b[d.p.id].afterShowForm) ? b[d.p.id].afterShowForm : !1, w = a.isFunction(b[d.p.id].beforeInitData) ? b[d.p.id].beforeInitData : !1, B = a.isFunction(b[d.p.id].onInitializeForm) ? b[d.p.id].onInitializeForm : !1, l = !0, z = 1, F = 0, j, K, v, f = a.jgrid.jqID(f);
                "new" === r ? (r = "_empty", v = "add", c.caption = b[d.p.id].addCaption) : (c.caption = b[d.p.id].editCaption, v = "edit");
                !0 === c.recreateForm && void 0 !== a("#" + a.jgrid.jqID(p.themodal))[0] && a("#" + a.jgrid.jqID(p.themodal)).remove();
                var G = !0;
                c.checkOnUpdate && c.jqModal && !c.modal &&
                (G = !1);
                if (void 0 !== a("#" + a.jgrid.jqID(p.themodal))[0]) {
                    l = a(d).triggerHandler("jqGridAddEditBeforeInitData", [a("#" + a.jgrid.jqID(f)), v]);
                    void 0 === l && (l = !0);
                    l && w && (l = w.call(d, a("#" + f), v));
                    if (!1 === l)return;
                    g();
                    a(".ui-jqdialog-title", "#" + a.jgrid.jqID(p.modalhead)).html(c.caption);
                    a("#FormError", k).hide();
                    b[d.p.id].topinfo ? (a(".topinfo", k).html(b[d.p.id].topinfo), a(".tinfo", k).show()) : a(".tinfo", k).hide();
                    b[d.p.id].bottominfo ? (a(".bottominfo", k + "_2").html(b[d.p.id].bottominfo), a(".binfo", k + "_2").show()) :
                        a(".binfo", k + "_2").hide();
                    t(r, d, f);
                    "_empty" === r || !b[d.p.id].viewPagerButtons ? a("#pData, #nData", k + "_2").hide() : a("#pData, #nData", k + "_2").show();
                    !0 === b[d.p.id].processing && (b[d.p.id].processing = !1, a("#sData", k + "_2").removeClass("ui-state-active"));
                    !0 === a("#" + f).data("disabled") && (a(".confirm", "#" + a.jgrid.jqID(p.themodal)).hide(), a("#" + f).data("disabled", !1));
                    a(d).triggerHandler("jqGridAddEditBeforeShowForm", [a("#" + f), v]);
                    y && y.call(d, a("#" + f), v);
                    a("#" + a.jgrid.jqID(p.themodal)).data("onClose", b[d.p.id].onClose);
                    a.jgrid.viewModal("#" + a.jgrid.jqID(p.themodal), {gbox: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, jqM: !1, overlay: c.overlay, modal: c.modal, overlayClass: c.overlayClass});
                    G || a("." + a.jgrid.jqID(c.overlayClass)).click(function () {
                        if (!h())return false;
                        a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose});
                        return false
                    });
                    a(d).triggerHandler("jqGridAddEditAfterShowForm", [a("#" + f), v]);
                    A && A.call(d, a("#" + f), v)
                } else {
                    var E = isNaN(c.dataheight) ? c.dataheight :
                        c.dataheight + "px", l = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", E = a("<form name='FormPost' id='" + f + "' class='FormGrid' onSubmit='return false;' style='width:" + l + ";overflow:auto;position:relative;height:" + E + ";'></form>").data("disabled", !1), C = a("<table id='" + o + "' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), l = a(d).triggerHandler("jqGridAddEditBeforeInitData", [a("#" + f), v]);
                    void 0 === l && (l = !0);
                    l && w && (l = w.call(d, a("#" + f, v)));
                    if (!1 === l)return;
                    g();
                    a(d.p.colModel).each(function () {
                        var a =
                            this.formoptions;
                        z = Math.max(z, a ? a.colpos || 0 : 0);
                        F = Math.max(F, a ? a.rowpos || 0 : 0)
                    });
                    a(E).append(C);
                    w = a("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='" + 2 * z + "'></td></tr>");
                    w[0].rp = 0;
                    a(C).append(w);
                    w = a("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='" + 2 * z + "'>" + b[d.p.id].topinfo + "</td></tr>");
                    w[0].rp = 0;
                    a(C).append(w);
                    var l = (w = "rtl" === d.p.direction ? !0 : !1) ? "nData" : "pData", D = w ? "pData" : "nData";
                    i(r, d, C, z);
                    var l = "<a href='javascript:void(0)' id='" + l + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",
                        D = "<a href='javascript:void(0)' id='" + D + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>", H = "<a href='javascript:void(0)' id='sData' class='fm-button ui-state-default ui-corner-all'>" + c.bSubmit + "</a>", I = "<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>" + c.bCancel + "</a>", o = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='" + o + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>" +
                            (w ? D + l : l + D) + "</td><td class='EditButton'>" + H + I + "</td></tr>" + ("<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>" + b[d.p.id].bottominfo + "</td></tr>"), o = o + "</tbody></table>";
                    if (0 < F) {
                        var J = [];
                        a.each(a(C)[0].rows, function (a, c) {
                            J[a] = c
                        });
                        J.sort(function (a, c) {
                            return a.rp > c.rp ? 1 : a.rp < c.rp ? -1 : 0
                        });
                        a.each(J, function (c, b) {
                            a("tbody", C).append(b)
                        })
                    }
                    c.gbox = "#gbox_" + a.jgrid.jqID(q);
                    var L = !1;
                    !0 === c.closeOnEscape && (c.closeOnEscape = !1, L = !0);
                    o = a("<div></div>").append(E).append(o);
                    a.jgrid.createModal(p,
                        o, c, "#gview_" + a.jgrid.jqID(d.p.id), a("#gbox_" + a.jgrid.jqID(d.p.id))[0]);
                    w && (a("#pData, #nData", k + "_2").css("float", "right"), a(".EditButton", k + "_2").css("text-align", "left"));
                    b[d.p.id].topinfo && a(".tinfo", k).show();
                    b[d.p.id].bottominfo && a(".binfo", k + "_2").show();
                    o = o = null;
                    a("#" + a.jgrid.jqID(p.themodal)).keydown(function (e) {
                        var l = e.target;
                        if (a("#" + f).data("disabled") === true)return false;
                        if (b[d.p.id].savekey[0] === true && e.which === b[d.p.id].savekey[1] && l.tagName !== "TEXTAREA") {
                            a("#sData", k + "_2").trigger("click");
                            return false
                        }
                        if (e.which === 27) {
                            if (!h())return false;
                            L && a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: c.gbox, jqm: c.jqModal, onClose: b[d.p.id].onClose});
                            return false
                        }
                        if (b[d.p.id].navkeys[0] === true) {
                            if (a("#id_g", k).val() === "_empty")return true;
                            if (e.which === b[d.p.id].navkeys[1]) {
                                a("#pData", k + "_2").trigger("click");
                                return false
                            }
                            if (e.which === b[d.p.id].navkeys[2]) {
                                a("#nData", k + "_2").trigger("click");
                                return false
                            }
                        }
                    });
                    c.checkOnUpdate && (a("a.ui-jqdialog-titlebar-close span", "#" + a.jgrid.jqID(p.themodal)).removeClass("jqmClose"),
                        a("a.ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(p.themodal)).unbind("click").click(function () {
                            if (!h())return false;
                            a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose});
                            return false
                        }));
                    c.saveicon = a.extend([!0, "left", "ui-icon-disk"], c.saveicon);
                    c.closeicon = a.extend([!0, "left", "ui-icon-close"], c.closeicon);
                    !0 === c.saveicon[0] && a("#sData", k + "_2").addClass("right" === c.saveicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " +
                        c.saveicon[2] + "'></span>");
                    !0 === c.closeicon[0] && a("#cData", k + "_2").addClass("right" === c.closeicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.closeicon[2] + "'></span>");
                    if (b[d.p.id].checkOnSubmit || b[d.p.id].checkOnUpdate)H = "<a href='javascript:void(0)' id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bYes + "</a>", D = "<a href='javascript:void(0)' id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bNo +
                        "</a>", I = "<a href='javascript:void(0)' id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bExit + "</a>", o = c.zIndex || 999, o++, a("<div class='" + c.overlayClass + " jqgrid-overlay confirm' style='z-index:" + o + ";display:none;'>&#160;</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:" + (o + 1) + "'>" + c.saveData + "<br/><br/>" + H + D + I + "</div>").insertAfter("#" + f), a("#sNew", "#" + a.jgrid.jqID(p.themodal)).click(function () {
                        s();
                        a("#" + f).data("disabled", false);
                        a(".confirm",
                            "#" + a.jgrid.jqID(p.themodal)).hide();
                        return false
                    }), a("#nNew", "#" + a.jgrid.jqID(p.themodal)).click(function () {
                        a(".confirm", "#" + a.jgrid.jqID(p.themodal)).hide();
                        a("#" + f).data("disabled", false);
                        setTimeout(function () {
                            a(":input:visible", "#" + f)[0].focus()
                        }, 0);
                        return false
                    }), a("#cNew", "#" + a.jgrid.jqID(p.themodal)).click(function () {
                        a(".confirm", "#" + a.jgrid.jqID(p.themodal)).hide();
                        a("#" + f).data("disabled", false);
                        a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose});
                        return false
                    });
                    a(d).triggerHandler("jqGridAddEditInitializeForm", [a("#" + f), v]);
                    B && B.call(d, a("#" + f), v);
                    "_empty" === r || !b[d.p.id].viewPagerButtons ? a("#pData,#nData", k + "_2").hide() : a("#pData,#nData", k + "_2").show();
                    a(d).triggerHandler("jqGridAddEditBeforeShowForm", [a("#" + f), v]);
                    y && y.call(d, a("#" + f), v);
                    a("#" + a.jgrid.jqID(p.themodal)).data("onClose", b[d.p.id].onClose);
                    a.jgrid.viewModal("#" + a.jgrid.jqID(p.themodal), {gbox: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, overlay: c.overlay, modal: c.modal, overlayClass: c.overlayClass});
                    G || a("." + a.jgrid.jqID(c.overlayClass)).click(function () {
                        if (!h())return false;
                        a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose});
                        return false
                    });
                    a(d).triggerHandler("jqGridAddEditAfterShowForm", [a("#" + f), v]);
                    A && A.call(d, a("#" + f), v);
                    a(".fm-button", "#" + a.jgrid.jqID(p.themodal)).hover(function () {
                        a(this).addClass("ui-state-hover")
                    }, function () {
                        a(this).removeClass("ui-state-hover")
                    });
                    a("#sData", k + "_2").click(function () {
                        j = {};
                        a("#FormError",
                            k).hide();
                        e();
                        if (j[d.p.id + "_id"] === "_empty")s(); else if (c.checkOnSubmit === true)if (K = m(j, b[d.p.id]._savedData)) {
                            a("#" + f).data("disabled", true);
                            a(".confirm", "#" + a.jgrid.jqID(p.themodal)).show()
                        } else s(); else s();
                        return false
                    });
                    a("#cData", k + "_2").click(function () {
                        if (!h())return false;
                        a.jgrid.hideModal("#" + a.jgrid.jqID(p.themodal), {gb: "#gbox_" + a.jgrid.jqID(q), jqm: c.jqModal, onClose: b[d.p.id].onClose});
                        return false
                    });
                    a("#nData", k + "_2").click(function () {
                        if (!h())return false;
                        a("#FormError", k).hide();
                        var b =
                            x();
                        b[0] = parseInt(b[0], 10);
                        if (b[0] !== -1 && b[1][b[0] + 1]) {
                            a(d).triggerHandler("jqGridAddEditClickPgButtons", ["next", a("#" + f), b[1][b[0]]]);
                            var e;
                            if (a.isFunction(c.onclickPgButtons)) {
                                e = c.onclickPgButtons.call(d, "next", a("#" + f), b[1][b[0]]);
                                if (e !== void 0 && e === false)return false
                            }
                            if (a("#" + a.jgrid.jqID(b[1][b[0] + 1])).hasClass("ui-state-disabled"))return false;
                            t(b[1][b[0] + 1], d, f);
                            a(d).jqGrid("setSelection", b[1][b[0] + 1]);
                            a(d).triggerHandler("jqGridAddEditAfterClickPgButtons", ["next", a("#" + f), b[1][b[0]]]);
                            a.isFunction(c.afterclickPgButtons) &&
                            c.afterclickPgButtons.call(d, "next", a("#" + f), b[1][b[0] + 1]);
                            n(b[0] + 1, b)
                        }
                        return false
                    });
                    a("#pData", k + "_2").click(function () {
                        if (!h())return false;
                        a("#FormError", k).hide();
                        var b = x();
                        if (b[0] !== -1 && b[1][b[0] - 1]) {
                            a(d).triggerHandler("jqGridAddEditClickPgButtons", ["prev", a("#" + f), b[1][b[0]]]);
                            var e;
                            if (a.isFunction(c.onclickPgButtons)) {
                                e = c.onclickPgButtons.call(d, "prev", a("#" + f), b[1][b[0]]);
                                if (e !== void 0 && e === false)return false
                            }
                            if (a("#" + a.jgrid.jqID(b[1][b[0] - 1])).hasClass("ui-state-disabled"))return false;
                            t(b[1][b[0] - 1], d, f);
                            a(d).jqGrid("setSelection", b[1][b[0] - 1]);
                            a(d).triggerHandler("jqGridAddEditAfterClickPgButtons", ["prev", a("#" + f), b[1][b[0]]]);
                            a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(d, "prev", a("#" + f), b[1][b[0] - 1]);
                            n(b[0] - 1, b)
                        }
                        return false
                    })
                }
                y = x();
                n(y[0], y)
            }
        })
    }, viewGridRow: function (r, c) {
        c = a.extend(!0, {top: 0, left: 0, width: 0, datawidth: "auto", height: "auto", dataheight: "auto", modal: !1, overlay: 30, drag: !0, resize: !0, jqModal: !0, closeOnEscape: !1, labelswidth: "30%", closeicon: [], navkeys: [!1,
            38, 40], onClose: null, beforeShowForm: null, beforeInitData: null, viewPagerButtons: !0, recreateForm: !1}, a.jgrid.view, c || {});
        b[a(this)[0].p.id] = c;
        return this.each(function () {
            function e() {
                (!0 === b[m.p.id].closeOnEscape || !0 === b[m.p.id].navkeys[0]) && setTimeout(function () {
                    a(".ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(q.modalhead)).focus()
                }, 0)
            }

            function i(b, d, e, g) {
                var f, h, i, k = 0, p, m, n = [], r = !1, o, q = "<td class='CaptionTD form-view-label ui-widget-content' width='" + c.labelswidth + "'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>",
                    s = "", t = ["integer", "number", "currency"], w = 0, u = 0, y, x, A;
                for (o = 1; o <= g; o++)s += 1 === o ? q : "<td class='CaptionTD form-view-label ui-widget-content'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>";
                a(d.p.colModel).each(function () {
                    h = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1;
                    !h && "right" === this.align && (this.formatter && -1 !== a.inArray(this.formatter, t) ? w = Math.max(w, parseInt(this.width, 10)) : u = Math.max(u, parseInt(this.width, 10)))
                });
                y = 0 !== w ? w : 0 !== u ? u : 0;
                r = a(d).jqGrid("getInd",
                    b);
                a(d.p.colModel).each(function (b) {
                    f = this.name;
                    x = !1;
                    m = (h = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1) ? "style='display:none'" : "";
                    A = "boolean" !== typeof this.viewable ? !0 : this.viewable;
                    if ("cb" !== f && "subgrid" !== f && "rn" !== f && A) {
                        p = !1 === r ? "" : f === d.p.ExpandColumn && !0 === d.p.treeGrid ? a("td:eq(" + b + ")", d.rows[r]).text() : a("td:eq(" + b + ")", d.rows[r]).html();
                        x = "right" === this.align && 0 !== y ? !0 : !1;
                        var c = a.extend({}, {rowabove: !1, rowcontent: ""}, this.formoptions || {}), l = parseInt(c.rowpos, 10) ||
                            k + 1, o = parseInt(2 * (parseInt(c.colpos, 10) || 1), 10);
                        if (c.rowabove) {
                            var q = a("<tr><td class='contentinfo' colspan='" + 2 * g + "'>" + c.rowcontent + "</td></tr>");
                            a(e).append(q);
                            q[0].rp = l
                        }
                        i = a(e).find("tr[rowpos=" + l + "]");
                        0 === i.length && (i = a("<tr " + m + " rowpos='" + l + "'></tr>").addClass("FormData").attr("id", "trv_" + f), a(i).append(s), a(e).append(i), i[0].rp = l);
                        a("td:eq(" + (o - 2) + ")", i[0]).html("<b>" + (void 0 === c.label ? d.p.colNames[b] : c.label) + "</b>");
                        a("td:eq(" + (o - 1) + ")", i[0]).append("<span>" + p + "</span>").attr("id", "v_" + f);
                        x && a("td:eq(" + (o - 1) + ") span", i[0]).css({"text-align": "right", width: y + "px"});
                        n[k] = b;
                        k++
                    }
                });
                0 < k && (b = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (2 * g - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='" + b + "'/></td></tr>"), b[0].rp = k + 99, a(e).append(b));
                return n
            }

            function t(b, c) {
                var d, e, g = 0, f, h;
                if (h = a(c).jqGrid("getInd", b, !0))a("td", h).each(function (b) {
                    d = c.p.colModel[b].name;
                    e = c.p.colModel[b].editrules && !0 === c.p.colModel[b].editrules.edithidden ?
                        !1 : !0 === c.p.colModel[b].hidden ? !0 : !1;
                    "cb" !== d && "subgrid" !== d && "rn" !== d && (f = d === c.p.ExpandColumn && !0 === c.p.treeGrid ? a(this).text() : a(this).html(), d = a.jgrid.jqID("v_" + d), a("#" + d + " span", "#" + n).html(f), e && a("#" + d, "#" + n).parents("tr:first").hide(), g++)
                }), 0 < g && a("#id_g", "#" + n).val(b)
            }

            function u(b, c) {
                var d = c[1].length - 1;
                0 === b ? a("#pData", "#" + n + "_2").addClass("ui-state-disabled") : void 0 !== c[1][b - 1] && a("#" + a.jgrid.jqID(c[1][b - 1])).hasClass("ui-state-disabled") ? a("#pData", n + "_2").addClass("ui-state-disabled") :
                    a("#pData", "#" + n + "_2").removeClass("ui-state-disabled");
                b === d ? a("#nData", "#" + n + "_2").addClass("ui-state-disabled") : void 0 !== c[1][b + 1] && a("#" + a.jgrid.jqID(c[1][b + 1])).hasClass("ui-state-disabled") ? a("#nData", n + "_2").addClass("ui-state-disabled") : a("#nData", "#" + n + "_2").removeClass("ui-state-disabled")
            }

            function s() {
                var b = a(m).jqGrid("getDataIDs"), c = a("#id_g", "#" + n).val();
                return[a.inArray(c, b), b]
            }

            var m = this;
            if (m.grid && r) {
                var h = m.p.id, g = "ViewGrid_" + a.jgrid.jqID(h), n = "ViewTbl_" + a.jgrid.jqID(h), x = "ViewGrid_" +
                    h, d = "ViewTbl_" + h, q = {themodal: "viewmod" + h, modalhead: "viewhd" + h, modalcontent: "viewcnt" + h, scrollelm: g}, f = a.isFunction(b[m.p.id].beforeInitData) ? b[m.p.id].beforeInitData : !1, o = !0, k = 1, p = 0;
                !0 === c.recreateForm && void 0 !== a("#" + a.jgrid.jqID(q.themodal))[0] && a("#" + a.jgrid.jqID(q.themodal)).remove();
                if (void 0 !== a("#" + a.jgrid.jqID(q.themodal))[0]) {
                    f && (o = f.call(m, a("#" + g)), void 0 === o && (o = !0));
                    if (!1 === o)return;
                    a(".ui-jqdialog-title", "#" + a.jgrid.jqID(q.modalhead)).html(c.caption);
                    a("#FormError", "#" + n).hide();
                    t(r,
                        m);
                    a.isFunction(b[m.p.id].beforeShowForm) && b[m.p.id].beforeShowForm.call(m, a("#" + g));
                    a.jgrid.viewModal("#" + a.jgrid.jqID(q.themodal), {gbox: "#gbox_" + a.jgrid.jqID(h), jqm: c.jqModal, jqM: !1, overlay: c.overlay, modal: c.modal});
                    e()
                } else {
                    var y = isNaN(c.dataheight) ? c.dataheight : c.dataheight + "px", A = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", x = a("<form name='FormPost' id='" + x + "' class='FormGrid' style='width:" + A + ";overflow:auto;position:relative;height:" + y + ";'></form>"), w = a("<table id='" + d + "' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>");
                    f && (o = f.call(m, a("#" + g)), void 0 === o && (o = !0));
                    if (!1 === o)return;
                    a(m.p.colModel).each(function () {
                        var a = this.formoptions;
                        k = Math.max(k, a ? a.colpos || 0 : 0);
                        p = Math.max(p, a ? a.rowpos || 0 : 0)
                    });
                    a(x).append(w);
                    i(r, m, w, k);
                    d = "rtl" === m.p.direction ? !0 : !1;
                    f = "<a href='javascript:void(0)' id='" + (d ? "nData" : "pData") + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>";
                    o = "<a href='javascript:void(0)' id='" + (d ? "pData" : "nData") + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>";
                    y = "<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>" + c.bClose + "</a>";
                    if (0 < p) {
                        var B = [];
                        a.each(a(w)[0].rows, function (a, b) {
                            B[a] = b
                        });
                        B.sort(function (a, b) {
                            return a.rp > b.rp ? 1 : a.rp < b.rp ? -1 : 0
                        });
                        a.each(B, function (b, c) {
                            a("tbody", w).append(c)
                        })
                    }
                    c.gbox = "#gbox_" + a.jgrid.jqID(h);
                    x = a("<div></div>").append(x).append("<table border='0' class='EditTable' id='" + n + "_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='" + c.labelswidth + "'>" + (d ? o + f : f + o) + "</td><td class='EditButton'>" +
                        y + "</td></tr></tbody></table>");
                    a.jgrid.createModal(q, x, c, "#gview_" + a.jgrid.jqID(m.p.id), a("#gview_" + a.jgrid.jqID(m.p.id))[0]);
                    d && (a("#pData, #nData", "#" + n + "_2").css("float", "right"), a(".EditButton", "#" + n + "_2").css("text-align", "left"));
                    c.viewPagerButtons || a("#pData, #nData", "#" + n + "_2").hide();
                    x = null;
                    a("#" + q.themodal).keydown(function (d) {
                        if (d.which === 27) {
                            b[m.p.id].closeOnEscape && a.jgrid.hideModal("#" + a.jgrid.jqID(q.themodal), {gb: c.gbox, jqm: c.jqModal, onClose: c.onClose});
                            return false
                        }
                        if (c.navkeys[0] ===
                            true) {
                            if (d.which === c.navkeys[1]) {
                                a("#pData", "#" + n + "_2").trigger("click");
                                return false
                            }
                            if (d.which === c.navkeys[2]) {
                                a("#nData", "#" + n + "_2").trigger("click");
                                return false
                            }
                        }
                    });
                    c.closeicon = a.extend([!0, "left", "ui-icon-close"], c.closeicon);
                    !0 === c.closeicon[0] && a("#cData", "#" + n + "_2").addClass("right" === c.closeicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.closeicon[2] + "'></span>");
                    a.isFunction(c.beforeShowForm) && c.beforeShowForm.call(m, a("#" + g));
                    a.jgrid.viewModal("#" +
                        a.jgrid.jqID(q.themodal), {gbox: "#gbox_" + a.jgrid.jqID(h), jqm: c.jqModal, overlay: c.overlay, modal: c.modal});
                    a(".fm-button:not(.ui-state-disabled)", "#" + n + "_2").hover(function () {
                        a(this).addClass("ui-state-hover")
                    }, function () {
                        a(this).removeClass("ui-state-hover")
                    });
                    e();
                    a("#cData", "#" + n + "_2").click(function () {
                        a.jgrid.hideModal("#" + a.jgrid.jqID(q.themodal), {gb: "#gbox_" + a.jgrid.jqID(h), jqm: c.jqModal, onClose: c.onClose});
                        return false
                    });
                    a("#nData", "#" + n + "_2").click(function () {
                        a("#FormError", "#" + n).hide();
                        var b =
                            s();
                        b[0] = parseInt(b[0], 10);
                        if (b[0] !== -1 && b[1][b[0] + 1]) {
                            a.isFunction(c.onclickPgButtons) && c.onclickPgButtons.call(m, "next", a("#" + g), b[1][b[0]]);
                            t(b[1][b[0] + 1], m);
                            a(m).jqGrid("setSelection", b[1][b[0] + 1]);
                            a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(m, "next", a("#" + g), b[1][b[0] + 1]);
                            u(b[0] + 1, b)
                        }
                        e();
                        return false
                    });
                    a("#pData", "#" + n + "_2").click(function () {
                        a("#FormError", "#" + n).hide();
                        var b = s();
                        if (b[0] !== -1 && b[1][b[0] - 1]) {
                            a.isFunction(c.onclickPgButtons) && c.onclickPgButtons.call(m, "prev",
                                a("#" + g), b[1][b[0]]);
                            t(b[1][b[0] - 1], m);
                            a(m).jqGrid("setSelection", b[1][b[0] - 1]);
                            a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(m, "prev", a("#" + g), b[1][b[0] - 1]);
                            u(b[0] - 1, b)
                        }
                        e();
                        return false
                    })
                }
                x = s();
                u(x[0], x)
            }
        })
    }, delGridRow: function (r, c) {
        c = a.extend(!0, {top: 0, left: 0, width: 240, height: "auto", dataheight: "auto", modal: !1, overlay: 30, drag: !0, resize: !0, url: "", mtype: "POST", reloadAfterSubmit: !0, beforeShowForm: null, beforeInitData: null, afterShowForm: null, beforeSubmit: null, onclickSubmit: null, afterSubmit: null,
            jqModal: !0, closeOnEscape: !1, delData: {}, delicon: [], cancelicon: [], onClose: null, ajaxDelOptions: {}, processing: !1, serializeDelData: null, useDataProxy: !1}, a.jgrid.del, c || {});
        b[a(this)[0].p.id] = c;
        return this.each(function () {
            var e = this;
            if (e.grid && r) {
                var i = a.isFunction(b[e.p.id].beforeShowForm), t = a.isFunction(b[e.p.id].afterShowForm), u = a.isFunction(b[e.p.id].beforeInitData) ? b[e.p.id].beforeInitData : !1, s = e.p.id, m = {}, h = !0, g = "DelTbl_" + a.jgrid.jqID(s), n, x, d, q, f = "DelTbl_" + s, o = {themodal: "delmod" + s, modalhead: "delhd" +
                    s, modalcontent: "delcnt" + s, scrollelm: g};
                a.isArray(r) && (r = r.join());
                if (void 0 !== a("#" + a.jgrid.jqID(o.themodal))[0]) {
                    u && (h = u.call(e, a("#" + g)), void 0 === h && (h = !0));
                    if (!1 === h)return;
                    a("#DelData>td", "#" + g).text(r);
                    a("#DelError", "#" + g).hide();
                    !0 === b[e.p.id].processing && (b[e.p.id].processing = !1, a("#dData", "#" + g).removeClass("ui-state-active"));
                    i && b[e.p.id].beforeShowForm.call(e, a("#" + g));
                    a.jgrid.viewModal("#" + a.jgrid.jqID(o.themodal), {gbox: "#gbox_" + a.jgrid.jqID(s), jqm: b[e.p.id].jqModal, jqM: !1, overlay: b[e.p.id].overlay,
                        modal: b[e.p.id].modal})
                } else {
                    var k = isNaN(b[e.p.id].dataheight) ? b[e.p.id].dataheight : b[e.p.id].dataheight + "px", p = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", f = "<div id='" + f + "' class='formdata' style='width:" + p + ";overflow:auto;position:relative;height:" + k + ";'><table class='DelTable'><tbody><tr id='DelError' style='display:none'><td class='ui-state-error'></td></tr>" + ("<tr id='DelData' style='display:none'><td >" + r + "</td></tr>"), f = f + ('<tr><td class="delmsg" style="white-space:pre;">' + b[e.p.id].msg +
                        "</td></tr><tr><td >&#160;</td></tr>"), f = f + "</tbody></table></div>" + ("<table cellspacing='0' cellpadding='0' border='0' class='EditTable' id='" + g + "_2'><tbody><tr><td><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>" + ("<a href='javascript:void(0)' id='dData' class='fm-button ui-state-default ui-corner-all'>" + c.bSubmit + "</a>") + "&#160;" + ("<a href='javascript:void(0)' id='eData' class='fm-button ui-state-default ui-corner-all'>" + c.bCancel + "</a>") + "</td></tr></tbody></table>");
                    c.gbox = "#gbox_" + a.jgrid.jqID(s);
                    a.jgrid.createModal(o, f, c, "#gview_" + a.jgrid.jqID(e.p.id), a("#gview_" + a.jgrid.jqID(e.p.id))[0]);
                    u && (h = u.call(e, a("#" + g)), void 0 === h && (h = !0));
                    if (!1 === h)return;
                    a(".fm-button", "#" + g + "_2").hover(function () {
                        a(this).addClass("ui-state-hover")
                    }, function () {
                        a(this).removeClass("ui-state-hover")
                    });
                    c.delicon = a.extend([!0, "left", "ui-icon-scissors"], b[e.p.id].delicon);
                    c.cancelicon = a.extend([!0, "left", "ui-icon-cancel"], b[e.p.id].cancelicon);
                    !0 === c.delicon[0] && a("#dData", "#" + g + "_2").addClass("right" ===
                        c.delicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.delicon[2] + "'></span>");
                    !0 === c.cancelicon[0] && a("#eData", "#" + g + "_2").addClass("right" === c.cancelicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.cancelicon[2] + "'></span>");
                    a("#dData", "#" + g + "_2").click(function () {
                        var f = [true, ""], h, i = a("#DelData>td", "#" + g).text();
                        m = {};
                        a.isFunction(b[e.p.id].onclickSubmit) && (m = b[e.p.id].onclickSubmit.call(e, b[e.p.id], i) || {});
                        a.isFunction(b[e.p.id].beforeSubmit) &&
                        (f = b[e.p.id].beforeSubmit.call(e, i));
                        if (f[0] && !b[e.p.id].processing) {
                            b[e.p.id].processing = true;
                            d = e.p.prmNames;
                            n = a.extend({}, b[e.p.id].delData, m);
                            q = d.oper;
                            n[q] = d.deloper;
                            x = d.id;
                            i = ("" + i).split(",");
                            if (!i.length)return false;
                            for (h in i)i.hasOwnProperty(h) && (i[h] = a.jgrid.stripPref(e.p.idPrefix, i[h]));
                            n[x] = i.join();
                            a(this).addClass("ui-state-active");
                            h = a.extend({url: b[e.p.id].url || a(e).jqGrid("getGridParam", "editurl"), type: b[e.p.id].mtype, data: a.isFunction(b[e.p.id].serializeDelData) ? b[e.p.id].serializeDelData.call(e,
                                n) : n, complete: function (d, h) {
                                var k;
                                if (d.status >= 300 && d.status !== 304) {
                                    f[0] = false;
                                    f[1] = a.isFunction(b[e.p.id].errorTextFormat) ? b[e.p.id].errorTextFormat.call(e, d) : h + " Status: '" + d.statusText + "'. Error code: " + d.status
                                } else a.isFunction(b[e.p.id].afterSubmit) && (f = b[e.p.id].afterSubmit.call(e, d, n));
                                if (f[0] === false) {
                                    a("#DelError>td", "#" + g).html(f[1]);
                                    a("#DelError", "#" + g).show()
                                } else {
                                    if (b[e.p.id].reloadAfterSubmit && e.p.datatype !== "local")a(e).trigger("reloadGrid"); else {
                                        if (e.p.treeGrid === true)try {
                                            a(e).jqGrid("delTreeNode",
                                                e.p.idPrefix + i[0])
                                        } catch (p) {
                                        } else for (k = 0; k < i.length; k++)a(e).jqGrid("delRowData", e.p.idPrefix + i[k]);
                                        e.p.selrow = null;
                                        e.p.selarrrow = []
                                    }
                                    a.isFunction(b[e.p.id].afterComplete) && setTimeout(function () {
                                        b[e.p.id].afterComplete.call(e, d, i)
                                    }, 500)
                                }
                                b[e.p.id].processing = false;
                                a("#dData", "#" + g + "_2").removeClass("ui-state-active");
                                f[0] && a.jgrid.hideModal("#" + a.jgrid.jqID(o.themodal), {gb: "#gbox_" + a.jgrid.jqID(s), jqm: c.jqModal, onClose: b[e.p.id].onClose})
                            }}, a.jgrid.ajaxOptions, b[e.p.id].ajaxDelOptions);
                            if (!h.url && !b[e.p.id].useDataProxy)if (a.isFunction(e.p.dataProxy))b[e.p.id].useDataProxy = true; else {
                                f[0] = false;
                                f[1] = f[1] + (" " + a.jgrid.errors.nourl)
                            }
                            if (f[0])if (b[e.p.id].useDataProxy) {
                                h = e.p.dataProxy.call(e, h, "del_" + e.p.id);
                                h === void 0 && (h = [true, ""]);
                                if (h[0] === false) {
                                    f[0] = false;
                                    f[1] = h[1] || "Error deleting the selected row!"
                                } else a.jgrid.hideModal("#" + a.jgrid.jqID(o.themodal), {gb: "#gbox_" + a.jgrid.jqID(s), jqm: c.jqModal, onClose: b[e.p.id].onClose})
                            } else a.ajax(h)
                        }
                        if (f[0] === false) {
                            a("#DelError>td", "#" + g).html(f[1]);
                            a("#DelError", "#" + g).show()
                        }
                        return false
                    });
                    a("#eData", "#" + g + "_2").click(function () {
                        a.jgrid.hideModal("#" + a.jgrid.jqID(o.themodal), {gb: "#gbox_" + a.jgrid.jqID(s), jqm: b[e.p.id].jqModal, onClose: b[e.p.id].onClose});
                        return false
                    });
                    i && b[e.p.id].beforeShowForm.call(e, a("#" + g));
                    a.jgrid.viewModal("#" + a.jgrid.jqID(o.themodal), {gbox: "#gbox_" + a.jgrid.jqID(s), jqm: b[e.p.id].jqModal, overlay: b[e.p.id].overlay, modal: b[e.p.id].modal})
                }
                t && b[e.p.id].afterShowForm.call(e, a("#" + g));
                !0 === b[e.p.id].closeOnEscape && setTimeout(function () {
                    a(".ui-jqdialog-titlebar-close",
                        "#" + a.jgrid.jqID(o.modalhead)).focus()
                }, 0)
            }
        })
    }, navGrid: function (b, c, e, i, t, u, s) {
        c = a.extend({edit: !0, editicon: "ui-icon-pencil", add: !0, addicon: "ui-icon-plus", del: !0, delicon: "ui-icon-trash", search: !0, searchicon: "ui-icon-search", refresh: !0, refreshicon: "ui-icon-refresh", refreshstate: "firstpage", view: !1, viewicon: "ui-icon-document", position: "left", closeOnEscape: !0, beforeRefresh: null, afterRefresh: null, cloneToTop: !1, alertwidth: 200, alertheight: "auto", alerttop: null, alertleft: null, alertzIndex: null}, a.jgrid.nav,
            c || {});
        return this.each(function () {
            if (!this.nav) {
                var m = {themodal: "alertmod_" + this.p.id, modalhead: "alerthd_" + this.p.id, modalcontent: "alertcnt_" + this.p.id}, h = this, g;
                if (h.grid && "string" === typeof b) {
                    void 0 === a("#" + m.themodal)[0] && (!c.alerttop && !c.alertleft && (void 0 !== window.innerWidth ? (c.alertleft = window.innerWidth, c.alerttop = window.innerHeight) : void 0 !== document.documentElement && void 0 !== document.documentElement.clientWidth && 0 !== document.documentElement.clientWidth ? (c.alertleft = document.documentElement.clientWidth,
                        c.alerttop = document.documentElement.clientHeight) : (c.alertleft = 1024, c.alerttop = 768), c.alertleft = c.alertleft / 2 - parseInt(c.alertwidth, 10) / 2, c.alerttop = c.alerttop / 2 - 25), a.jgrid.createModal(m, "<div>" + c.alerttext + "</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>", {gbox: "#gbox_" + a.jgrid.jqID(h.p.id), jqModal: !0, drag: !0, resize: !0, caption: c.alertcap, top: c.alerttop, left: c.alertleft, width: c.alertwidth, height: c.alertheight, closeOnEscape: c.closeOnEscape, zIndex: c.alertzIndex}, "#gview_" +
                        a.jgrid.jqID(h.p.id), a("#gbox_" + a.jgrid.jqID(h.p.id))[0], !0));
                    var n = 1, x, d = function () {
                        a(this).hasClass("ui-state-disabled") || a(this).addClass("ui-state-hover")
                    }, q = function () {
                        a(this).removeClass("ui-state-hover")
                    };
                    c.cloneToTop && h.p.toppager && (n = 2);
                    for (x = 0; x < n; x++) {
                        var f = a("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr></tr></tbody></table>"), o, k;
                        0 === x ? (o = b, k = h.p.id, o === h.p.toppager && (k += "_top", n = 1)) : (o = h.p.toppager, k =
                            h.p.id + "_top");
                        "rtl" === h.p.direction && a(f).attr("dir", "rtl").css("float", "right");
                        c.add && (i = i || {}, g = a("<td class='ui-pg-button ui-corner-all'></td>"), a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.addicon + "'></span>" + c.addtext + "</div>"), a("tr", f).append(g), a(g, f).attr({title: c.addtitle || "", id: i.id || "add_" + k}).click(function () {
                            a(this).hasClass("ui-state-disabled") || (a.isFunction(c.addfunc) ? c.addfunc.call(h) : a(h).jqGrid("editGridRow", "new", i));
                            return false
                        }).hover(d, q), g = null);
                        c.edit &&
                        (g = a("<td class='ui-pg-button ui-corner-all'></td>"), e = e || {}, a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.editicon + "'></span>" + c.edittext + "</div>"), a("tr", f).append(g), a(g, f).attr({title: c.edittitle || "", id: e.id || "edit_" + k}).click(function () {
                            if (!a(this).hasClass("ui-state-disabled")) {
                                var b = h.p.selrow;
                                if (b)a.isFunction(c.editfunc) ? c.editfunc.call(h, b) : a(h).jqGrid("editGridRow", b, e); else {
                                    a.jgrid.viewModal("#" + m.themodal, {gbox: "#gbox_" + a.jgrid.jqID(h.p.id), jqm: true});
                                    a("#jqg_alrt").focus()
                                }
                            }
                            return false
                        }).hover(d,
                                q), g = null);
                        c.view && (g = a("<td class='ui-pg-button ui-corner-all'></td>"), s = s || {}, a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.viewicon + "'></span>" + c.viewtext + "</div>"), a("tr", f).append(g), a(g, f).attr({title: c.viewtitle || "", id: s.id || "view_" + k}).click(function () {
                            if (!a(this).hasClass("ui-state-disabled")) {
                                var b = h.p.selrow;
                                if (b)a.isFunction(c.viewfunc) ? c.viewfunc.call(h, b) : a(h).jqGrid("viewGridRow", b, s); else {
                                    a.jgrid.viewModal("#" + m.themodal, {gbox: "#gbox_" + a.jgrid.jqID(h.p.id), jqm: true});
                                    a("#jqg_alrt").focus()
                                }
                            }
                            return false
                        }).hover(d, q), g = null);
                        c.del && (g = a("<td class='ui-pg-button ui-corner-all'></td>"), t = t || {}, a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.delicon + "'></span>" + c.deltext + "</div>"), a("tr", f).append(g), a(g, f).attr({title: c.deltitle || "", id: t.id || "del_" + k}).click(function () {
                            if (!a(this).hasClass("ui-state-disabled")) {
                                var b;
                                if (h.p.multiselect) {
                                    b = h.p.selarrrow;
                                    b.length === 0 && (b = null)
                                } else b = h.p.selrow;
                                if (b)a.isFunction(c.delfunc) ? c.delfunc.call(h, b) : a(h).jqGrid("delGridRow",
                                    b, t); else {
                                    a.jgrid.viewModal("#" + m.themodal, {gbox: "#gbox_" + a.jgrid.jqID(h.p.id), jqm: true});
                                    a("#jqg_alrt").focus()
                                }
                            }
                            return false
                        }).hover(d, q), g = null);
                        (c.add || c.edit || c.del || c.view) && a("tr", f).append("<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>");
                        c.search && (g = a("<td class='ui-pg-button ui-corner-all'></td>"), u = u || {}, a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.searchicon + "'></span>" + c.searchtext + "</div>"), a("tr", f).append(g), a(g,
                            f).attr({title: c.searchtitle || "", id: u.id || "search_" + k}).click(function () {
                                a(this).hasClass("ui-state-disabled") || (a.isFunction(c.searchfunc) ? c.searchfunc.call(h, u) : a(h).jqGrid("searchGrid", u));
                                return false
                            }).hover(d, q), u.showOnLoad && !0 === u.showOnLoad && a(g, f).click(), g = null);
                        c.refresh && (g = a("<td class='ui-pg-button ui-corner-all'></td>"), a(g).append("<div class='ui-pg-div'><span class='ui-icon " + c.refreshicon + "'></span>" + c.refreshtext + "</div>"), a("tr", f).append(g), a(g, f).attr({title: c.refreshtitle ||
                            "", id: "refresh_" + k}).click(function () {
                                if (!a(this).hasClass("ui-state-disabled")) {
                                    a.isFunction(c.beforeRefresh) && c.beforeRefresh.call(h);
                                    h.p.search = false;
                                    try {
                                        var b = h.p.id;
                                        h.p.postData.filters = "";
                                        try {
                                            a("#fbox_" + a.jgrid.jqID(b)).jqFilter("resetFilter")
                                        } catch (d) {
                                        }
                                        a.isFunction(h.clearToolbar) && h.clearToolbar.call(h, false)
                                    } catch (e) {
                                    }
                                    switch (c.refreshstate) {
                                        case "firstpage":
                                            a(h).trigger("reloadGrid", [
                                                {page: 1}
                                            ]);
                                            break;
                                        case "current":
                                            a(h).trigger("reloadGrid", [
                                                {current: true}
                                            ])
                                    }
                                    a.isFunction(c.afterRefresh) &&
                                    c.afterRefresh.call(h)
                                }
                                return false
                            }).hover(d, q), g = null);
                        g = a(".ui-jqgrid").css("font-size") || "11px";
                        a("body").append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + g + ";visibility:hidden;' ></div>");
                        g = a(f).clone().appendTo("#testpg2").width();
                        a("#testpg2").remove();
                        a(o + "_" + c.position, o).append(f);
                        h.p._nvtd && (g > h.p._nvtd[0] && (a(o + "_" + c.position, o).width(g), h.p._nvtd[0] = g), h.p._nvtd[1] = g);
                        f = g = g = null;
                        this.nav = !0
                    }
                }
            }
        })
    }, navButtonAdd: function (b, c) {
        c = a.extend({caption: "newButton",
            title: "", buttonicon: "ui-icon-newwin", onClickButton: null, position: "last", cursor: "pointer"}, c || {});
        return this.each(function () {
            if (this.grid) {
                "string" === typeof b && 0 !== b.indexOf("#") && (b = "#" + a.jgrid.jqID(b));
                var e = a(".navtable", b)[0], i = this;
                if (e && !(c.id && void 0 !== a("#" + a.jgrid.jqID(c.id), e)[0])) {
                    var t = a("<td></td>");
                    "NONE" === c.buttonicon.toString().toUpperCase() ? a(t).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'>" + c.caption + "</div>") : a(t).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'><span class='ui-icon " +
                        c.buttonicon + "'></span>" + c.caption + "</div>");
                    c.id && a(t).attr("id", c.id);
                    "first" === c.position ? 0 === e.rows[0].cells.length ? a("tr", e).append(t) : a("tr td:eq(0)", e).before(t) : a("tr", e).append(t);
                    a(t, e).attr("title", c.title || "").click(function (b) {
                        a(this).hasClass("ui-state-disabled") || a.isFunction(c.onClickButton) && c.onClickButton.call(i, b);
                        return!1
                    }).hover(function () {
                            a(this).hasClass("ui-state-disabled") || a(this).addClass("ui-state-hover")
                        }, function () {
                            a(this).removeClass("ui-state-hover")
                        })
                }
            }
        })
    }, navSeparatorAdd: function (b, c) {
        c = a.extend({sepclass: "ui-separator", sepcontent: "", position: "last"}, c || {});
        return this.each(function () {
            if (this.grid) {
                "string" === typeof b && 0 !== b.indexOf("#") && (b = "#" + a.jgrid.jqID(b));
                var e = a(".navtable", b)[0];
                if (e) {
                    var i = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='" + c.sepclass + "'></span>" + c.sepcontent + "</td>";
                    "first" === c.position ? 0 === e.rows[0].cells.length ? a("tr", e).append(i) : a("tr td:eq(0)", e).before(i) : a("tr", e).append(i)
                }
            }
        })
    }, GridToForm: function (b, c) {
        return this.each(function () {
            var e =
                this, i;
            if (e.grid) {
                var t = a(e).jqGrid("getRowData", b);
                if (t)for (i in t)t.hasOwnProperty(i) && (a("[name=" + a.jgrid.jqID(i) + "]", c).is("input:radio") || a("[name=" + a.jgrid.jqID(i) + "]", c).is("input:checkbox") ? a("[name=" + a.jgrid.jqID(i) + "]", c).each(function () {
                    if (a(this).val() == t[i])a(this)[e.p.useProp ? "prop" : "attr"]("checked", !0); else a(this)[e.p.useProp ? "prop" : "attr"]("checked", !1)
                }) : a("[name=" + a.jgrid.jqID(i) + "]", c).val(t[i]))
            }
        })
    }, FormToGrid: function (b, c, e, i) {
        return this.each(function () {
            if (this.grid) {
                e || (e =
                    "set");
                i || (i = "first");
                var t = a(c).serializeArray(), u = {};
                a.each(t, function (a, b) {
                    u[b.name] = b.value
                });
                "add" === e ? a(this).jqGrid("addRowData", b, u, i) : "set" === e && a(this).jqGrid("setRowData", b, u)
            }
        })
    }})
})(jQuery);
(function (a) {
    a.fn.jqFilter = function (d) {
        if ("string" === typeof d) {
            var l = a.fn.jqFilter[d];
            if (!l)throw"jqFilter - No such method: " + d;
            var v = a.makeArray(arguments).slice(1);
            return l.apply(this, v)
        }
        var n = a.extend(!0, {filter: null, columns: [], onChange: null, afterRedraw: null, checkValues: null, error: !1, errmsg: "", errorcheck: !0, showQuery: !0, sopt: null, ops: [], operands: null, numopts: "eq,ne,lt,le,gt,ge,nu,nn,in,ni".split(","), stropts: "eq,ne,bw,bn,ew,en,cn,nc,nu,nn,in,ni".split(","), strarr: ["text", "string", "blob"], groupOps: [
            {op: "AND",
                text: "AND"},
            {op: "OR", text: "OR"}
        ], groupButton: !0, ruleButtons: !0, direction: "ltr"}, a.jgrid.filter, d || {});
        return this.each(function () {
            if (!this.filter) {
                this.p = n;
                if (null === this.p.filter || void 0 === this.p.filter)this.p.filter = {groupOp: this.p.groupOps[0].op, rules: [], groups: []};
                var d, l = this.p.columns.length, f, t = /msie/i.test(navigator.userAgent) && !window.opera;
                this.p.initFilter = a.extend(!0, {}, this.p.filter);
                if (l) {
                    for (d = 0; d < l; d++)if (f = this.p.columns[d], f.stype ? f.inputtype = f.stype : f.inputtype || (f.inputtype = "text"),
                        f.sorttype ? f.searchtype = f.sorttype : f.searchtype || (f.searchtype = "string"), void 0 === f.hidden && (f.hidden = !1), f.label || (f.label = f.name), f.index && (f.name = f.index), f.hasOwnProperty("searchoptions") || (f.searchoptions = {}), !f.hasOwnProperty("searchrules"))f.searchrules = {};
                    this.p.showQuery && a(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='" + this.p.direction + "'><tbody><tr><td class='query'></td></tr></tbody></table>");
                    var u = function () {
                        return a("#" +
                            a.jgrid.jqID(n.id))[0] || null
                    }, r = function (g, j) {
                        var b = [!0, ""], c = u();
                        if (a.isFunction(j.searchrules))b = j.searchrules.call(c, g, j); else if (a.jgrid && a.jgrid.checkValues)try {
                            b = a.jgrid.checkValues.call(c, g, -1, j.searchrules, j.label)
                        } catch (k) {
                        }
                        b && b.length && !1 === b[0] && (n.error = !b[0], n.errmsg = b[1])
                    };
                    this.onchange = function () {
                        this.p.error = !1;
                        this.p.errmsg = "";
                        return a.isFunction(this.p.onChange) ? this.p.onChange.call(this, this.p) : !1
                    };
                    this.reDraw = function () {
                        a("table.group:first", this).remove();
                        var g = this.createTableForGroup(n.filter,
                            null);
                        a(this).append(g);
                        a.isFunction(this.p.afterRedraw) && this.p.afterRedraw.call(this, this.p)
                    };
                    this.createTableForGroup = function (g, j) {
                        var b = this, c, k = a("<table class='group ui-widget ui-widget-content' style='border:0px none;'><tbody></tbody></table>"), e = "left";
                        "rtl" === this.p.direction && (e = "right", k.attr("dir", "rtl"));
                        null === j && k.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='" + e + "'></th></tr>");
                        var h = a("<tr></tr>");
                        k.append(h);
                        e = a("<th colspan='5' align='" +
                            e + "'></th>");
                        h.append(e);
                        if (!0 === this.p.ruleButtons) {
                            var d = a("<select class='opsel'></select>");
                            e.append(d);
                            var h = "", i;
                            for (c = 0; c < n.groupOps.length; c++)i = g.groupOp === b.p.groupOps[c].op ? " selected='selected'" : "", h += "<option value='" + b.p.groupOps[c].op + "'" + i + ">" + b.p.groupOps[c].text + "</option>";
                            d.append(h).bind("change", function () {
                                g.groupOp = a(d).val();
                                b.onchange()
                            })
                        }
                        h = "<span></span>";
                        this.p.groupButton && (h = a("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>"), h.bind("click",
                            function () {
                                if (g.groups === void 0)g.groups = [];
                                g.groups.push({groupOp: n.groupOps[0].op, rules: [], groups: []});
                                b.reDraw();
                                b.onchange();
                                return false
                            }));
                        e.append(h);
                        if (!0 === this.p.ruleButtons) {
                            var h = a("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"), f;
                            h.bind("click", function () {
                                if (g.rules === void 0)g.rules = [];
                                for (c = 0; c < b.p.columns.length; c++) {
                                    var e = b.p.columns[c].search === void 0 ? true : b.p.columns[c].search, j = b.p.columns[c].hidden === true;
                                    if (b.p.columns[c].searchoptions.searchhidden ===
                                        true && e || e && !j) {
                                        f = b.p.columns[c];
                                        break
                                    }
                                }
                                e = f.searchoptions.sopt ? f.searchoptions.sopt : b.p.sopt ? b.p.sopt : a.inArray(f.searchtype, b.p.strarr) !== -1 ? b.p.stropts : b.p.numopts;
                                g.rules.push({field: f.name, op: e[0], data: ""});
                                b.reDraw();
                                return false
                            });
                            e.append(h)
                        }
                        null !== j && (h = a("<input type='button' value='-' title='Delete group' class='delete-group'/>"), e.append(h), h.bind("click", function () {
                            for (c = 0; c < j.groups.length; c++)if (j.groups[c] === g) {
                                j.groups.splice(c, 1);
                                break
                            }
                            b.reDraw();
                            b.onchange();
                            return false
                        }));
                        if (void 0 !==
                            g.groups)for (c = 0; c < g.groups.length; c++)e = a("<tr></tr>"), k.append(e), h = a("<td class='first'></td>"), e.append(h), h = a("<td colspan='4'></td>"), h.append(this.createTableForGroup(g.groups[c], g)), e.append(h);
                        void 0 === g.groupOp && (g.groupOp = b.p.groupOps[0].op);
                        if (void 0 !== g.rules)for (c = 0; c < g.rules.length; c++)k.append(this.createTableRowForRule(g.rules[c], g));
                        return k
                    };
                    this.createTableRowForRule = function (g, j) {
                        var b = this, c = u(), k = a("<tr></tr>"), e, h, f, i, d = "", p;
                        k.append("<td class='first'></td>");
                        var m = a("<td class='columns'></td>");
                        k.append(m);
                        var l = a("<select></select>"), o, q = [];
                        m.append(l);
                        l.bind("change", function () {
                            g.field = a(l).val();
                            f = a(this).parents("tr:first");
                            for (e = 0; e < b.p.columns.length; e++)if (b.p.columns[e].name === g.field) {
                                i = b.p.columns[e];
                                break
                            }
                            if (i) {
                                i.searchoptions.id = a.jgrid.randId();
                                t && "text" === i.inputtype && !i.searchoptions.size && (i.searchoptions.size = 10);
                                var d = a.jgrid.createEl.call(c, i.inputtype, i.searchoptions, "", !0, b.p.ajaxSelectOptions, !0);
                                a(d).addClass("input-elm");
                                h = i.searchoptions.sopt ? i.searchoptions.sopt :
                                    b.p.sopt ? b.p.sopt : -1 !== a.inArray(i.searchtype, b.p.strarr) ? b.p.stropts : b.p.numopts;
                                var j = "", k = 0;
                                q = [];
                                a.each(b.p.ops, function () {
                                    q.push(this.oper)
                                });
                                for (e = 0; e < h.length; e++)o = a.inArray(h[e], q), -1 !== o && (0 === k && (g.op = b.p.ops[o].oper), j += "<option value='" + b.p.ops[o].oper + "'>" + b.p.ops[o].text + "</option>", k++);
                                a(".selectopts", f).empty().append(j);
                                a(".selectopts", f)[0].selectedIndex = 0;
                                a.jgrid.msie && 9 > a.jgrid.msiever() && (j = parseInt(a("select.selectopts", f)[0].offsetWidth, 10) + 1, a(".selectopts", f).width(j), a(".selectopts",
                                    f).css("width", "auto"));
                                a(".data", f).empty().append(d);
                                a.jgrid.bindEv.call(c, d, i.searchoptions);
                                a(".input-elm", f).bind("change", function (e) {
                                    var d = a(this).hasClass("ui-autocomplete-input") ? 200 : 0;
                                    setTimeout(function () {
                                        var d = e.target;
                                        g.data = d.nodeName.toUpperCase() === "SPAN" && i.searchoptions && a.isFunction(i.searchoptions.custom_value) ? i.searchoptions.custom_value.call(c, a(d).children(".customelement:first"), "get") : d.value;
                                        b.onchange()
                                    }, d)
                                });
                                setTimeout(function () {
                                    g.data = a(d).val();
                                    b.onchange()
                                }, 0)
                            }
                        });
                        for (e = m = 0; e < b.p.columns.length; e++) {
                            p = void 0 === b.p.columns[e].search ? !0 : b.p.columns[e].search;
                            var r = !0 === b.p.columns[e].hidden;
                            if (!0 === b.p.columns[e].searchoptions.searchhidden && p || p && !r)p = "", g.field === b.p.columns[e].name && (p = " selected='selected'", m = e), d += "<option value='" + b.p.columns[e].name + "'" + p + ">" + b.p.columns[e].label + "</option>"
                        }
                        l.append(d);
                        d = a("<td class='operators'></td>");
                        k.append(d);
                        i = n.columns[m];
                        i.searchoptions.id = a.jgrid.randId();
                        t && "text" === i.inputtype && !i.searchoptions.size && (i.searchoptions.size =
                            10);
                        m = a.jgrid.createEl.call(c, i.inputtype, i.searchoptions, g.data, !0, b.p.ajaxSelectOptions, !0);
                        if ("nu" === g.op || "nn" === g.op)a(m).attr("readonly", "true"), a(m).attr("disabled", "true");
                        var s = a("<select class='selectopts'></select>");
                        d.append(s);
                        s.bind("change", function () {
                            g.op = a(s).val();
                            f = a(this).parents("tr:first");
                            var c = a(".input-elm", f)[0];
                            if (g.op === "nu" || g.op === "nn") {
                                g.data = "";
                                c.value = "";
                                c.setAttribute("readonly", "true");
                                c.setAttribute("disabled", "true")
                            } else {
                                c.removeAttribute("readonly");
                                c.removeAttribute("disabled")
                            }
                            b.onchange()
                        });
                        h = i.searchoptions.sopt ? i.searchoptions.sopt : b.p.sopt ? b.p.sopt : -1 !== a.inArray(i.searchtype, b.p.strarr) ? b.p.stropts : b.p.numopts;
                        d = "";
                        a.each(b.p.ops, function () {
                            q.push(this.oper)
                        });
                        for (e = 0; e < h.length; e++)o = a.inArray(h[e], q), -1 !== o && (p = g.op === b.p.ops[o].oper ? " selected='selected'" : "", d += "<option value='" + b.p.ops[o].oper + "'" + p + ">" + b.p.ops[o].text + "</option>");
                        s.append(d);
                        d = a("<td class='data'></td>");
                        k.append(d);
                        d.append(m);
                        a.jgrid.bindEv.call(c, m, i.searchoptions);
                        a(m).addClass("input-elm").bind("change",
                            function () {
                                g.data = i.inputtype === "custom" ? i.searchoptions.custom_value.call(c, a(this).children(".customelement:first"), "get") : a(this).val();
                                b.onchange()
                            });
                        d = a("<td></td>");
                        k.append(d);
                        !0 === this.p.ruleButtons && (m = a("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>"), d.append(m), m.bind("click", function () {
                            for (e = 0; e < j.rules.length; e++)if (j.rules[e] === g) {
                                j.rules.splice(e, 1);
                                break
                            }
                            b.reDraw();
                            b.onchange();
                            return false
                        }));
                        return k
                    };
                    this.getStringForGroup = function (a) {
                        var d = "(",
                            b;
                        if (void 0 !== a.groups)for (b = 0; b < a.groups.length; b++) {
                            1 < d.length && (d += " " + a.groupOp + " ");
                            try {
                                d += this.getStringForGroup(a.groups[b])
                            } catch (c) {
                                alert(c)
                            }
                        }
                        if (void 0 !== a.rules)try {
                            for (b = 0; b < a.rules.length; b++)1 < d.length && (d += " " + a.groupOp + " "), d += this.getStringForRule(a.rules[b])
                        } catch (f) {
                            alert(f)
                        }
                        d += ")";
                        return"()" === d ? "" : d
                    };
                    this.getStringForRule = function (d) {
                        var f = "", b = "", c, k;
                        for (c = 0; c < this.p.ops.length; c++)if (this.p.ops[c].oper === d.op) {
                            f = this.p.operands.hasOwnProperty(d.op) ? this.p.operands[d.op] : "";
                            b =
                                this.p.ops[c].oper;
                            break
                        }
                        for (c = 0; c < this.p.columns.length; c++)if (this.p.columns[c].name === d.field) {
                            k = this.p.columns[c];
                            break
                        }
                        if (void 0 === k)return"";
                        c = d.data;
                        if ("bw" === b || "bn" === b)c += "%";
                        if ("ew" === b || "en" === b)c = "%" + c;
                        if ("cn" === b || "nc" === b)c = "%" + c + "%";
                        if ("in" === b || "ni" === b)c = " (" + c + ")";
                        n.errorcheck && r(d.data, k);
                        return-1 !== a.inArray(k.searchtype, ["int", "integer", "float", "number", "currency"]) || "nn" === b || "nu" === b ? d.field + " " + f + " " + c : d.field + " " + f + ' "' + c + '"'
                    };
                    this.resetFilter = function () {
                        this.p.filter = a.extend(!0,
                            {}, this.p.initFilter);
                        this.reDraw();
                        this.onchange()
                    };
                    this.hideError = function () {
                        a("th.ui-state-error", this).html("");
                        a("tr.error", this).hide()
                    };
                    this.showError = function () {
                        a("th.ui-state-error", this).html(this.p.errmsg);
                        a("tr.error", this).show()
                    };
                    this.toUserFriendlyString = function () {
                        return this.getStringForGroup(n.filter)
                    };
                    this.toString = function () {
                        function a(b) {
                            var c = "(", f;
                            if (void 0 !== b.groups)for (f = 0; f < b.groups.length; f++)1 < c.length && (c = "OR" === b.groupOp ? c + " || " : c + " && "), c += a(b.groups[f]);
                            if (void 0 !==
                                b.rules)for (f = 0; f < b.rules.length; f++) {
                                1 < c.length && (c = "OR" === b.groupOp ? c + " || " : c + " && ");
                                var e = b.rules[f];
                                if (d.p.errorcheck) {
                                    for (var h = void 0, l = void 0, h = 0; h < d.p.columns.length; h++)if (d.p.columns[h].name === e.field) {
                                        l = d.p.columns[h];
                                        break
                                    }
                                    l && r(e.data, l)
                                }
                                c += e.op + "(item." + e.field + ",'" + e.data + "')"
                            }
                            c += ")";
                            return"()" === c ? "" : c
                        }

                        var d = this;
                        return a(this.p.filter)
                    };
                    this.reDraw();
                    if (this.p.showQuery)this.onchange();
                    this.filter = !0
                }
            }
        })
    };
    a.extend(a.fn.jqFilter, {toSQLString: function () {
        var a = "";
        this.each(function () {
            a =
                this.toUserFriendlyString()
        });
        return a
    }, filterData: function () {
        var a;
        this.each(function () {
            a = this.p.filter
        });
        return a
    }, getParameter: function (a) {
        return void 0 !== a && this.p.hasOwnProperty(a) ? this.p[a] : this.p
    }, resetFilter: function () {
        return this.each(function () {
            this.resetFilter()
        })
    }, addFilter: function (d) {
        "string" === typeof d && (d = a.jgrid.parse(d));
        this.each(function () {
            this.p.filter = d;
            this.reDraw();
            this.onchange()
        })
    }})
})(jQuery);
(function (a) {
    a.jgrid.inlineEdit = a.jgrid.inlineEdit || {};
    a.jgrid.extend({editRow: function (c, b, e, o, l, g, n, h, f) {
        var j = {}, d = a.makeArray(arguments).slice(1);
        if ("object" === a.type(d[0]))j = d[0]; else if (void 0 !== b && (j.keys = b), a.isFunction(e) && (j.oneditfunc = e), a.isFunction(o) && (j.successfunc = o), void 0 !== l && (j.url = l), void 0 !== g && (j.extraparam = g), a.isFunction(n) && (j.aftersavefunc = n), a.isFunction(h) && (j.errorfunc = h), a.isFunction(f))j.afterrestorefunc = f;
        j = a.extend(!0, {keys: !1, oneditfunc: null, successfunc: null, url: null,
            extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: !0, mtype: "POST"}, a.jgrid.inlineEdit, j);
        return this.each(function () {
            var d = this, b, f, e = 0, h = null, l = {}, g, k;
            if (d.grid && (g = a(d).jqGrid("getInd", c, !0), !1 !== g && "0" === (a(g).attr("editable") || "0") && !a(g).hasClass("not-editable-row")))k = d.p.colModel, a('td[role="gridcell"]', g).each(function (g) {
                b = k[g].name;
                var j = !0 === d.p.treeGrid && b === d.p.ExpandColumn;
                if (j)f = a("span:first", this).html(); else try {
                    f = a.unformat.call(d, this, {rowId: c,
                        colModel: k[g]}, g)
                } catch (o) {
                    f = k[g].edittype && "textarea" === k[g].edittype ? a(this).text() : a(this).html()
                }
                if ("cb" !== b && "subgrid" !== b && "rn" !== b && (d.p.autoencode && (f = a.jgrid.htmlDecode(f)), l[b] = f, !0 === k[g].editable)) {
                    null === h && (h = g);
                    j ? a("span:first", this).html("") : a(this).html("");
                    var x = a.extend({}, k[g].editoptions || {}, {id: c + "_" + b, name: b});
                    k[g].edittype || (k[g].edittype = "text");
                    if ("&nbsp;" === f || "&#160;" === f || 1 === f.length && 160 === f.charCodeAt(0))f = "";
                    var v = a.jgrid.createEl.call(d, k[g].edittype, x, f, !0, a.extend({},
                        a.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {}));
                    a(v).addClass("editable");
                    j ? a("span:first", this).append(v) : a(this).append(v);
                    a.jgrid.bindEv.call(d, v, x);
                    "select" === k[g].edittype && void 0 !== k[g].editoptions && !0 === k[g].editoptions.multiple && void 0 === k[g].editoptions.dataUrl && a.jgrid.msie && a(v).width(a(v).width());
                    e++
                }
            }), 0 < e && (l.id = c, d.p.savedRow.push(l), a(g).attr("editable", "1"), a("td:eq(" + h + ") input", g).focus(), !0 === j.keys && a(g).bind("keydown", function (f) {
                if (27 === f.keyCode) {
                    a(d).jqGrid("restoreRow",
                        c, j.afterrestorefunc);
                    if (d.p._inlinenav)try {
                        a(d).jqGrid("showAddEditButtons")
                    } catch (b) {
                    }
                    return!1
                }
                if (13 === f.keyCode) {
                    if ("TEXTAREA" === f.target.tagName)return!0;
                    if (a(d).jqGrid("saveRow", c, j) && d.p._inlinenav)try {
                        a(d).jqGrid("showAddEditButtons")
                    } catch (g) {
                    }
                    return!1
                }
            }), a(d).triggerHandler("jqGridInlineEditRow", [c, j]), a.isFunction(j.oneditfunc) && j.oneditfunc.call(d, c))
        })
    }, saveRow: function (c, b, e, o, l, g, n) {
        var h = a.makeArray(arguments).slice(1), f = {};
        if ("object" === a.type(h[0]))f = h[0]; else if (a.isFunction(b) &&
            (f.successfunc = b), void 0 !== e && (f.url = e), void 0 !== o && (f.extraparam = o), a.isFunction(l) && (f.aftersavefunc = l), a.isFunction(g) && (f.errorfunc = g), a.isFunction(n))f.afterrestorefunc = n;
        var f = a.extend(!0, {successfunc: null, url: null, extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: !0, mtype: "POST"}, a.jgrid.inlineEdit, f), j = !1, d = this[0], m, i = {}, w = {}, r = {}, t, s, q;
        if (!d.grid)return j;
        q = a(d).jqGrid("getInd", c, !0);
        if (!1 === q)return j;
        h = a(q).attr("editable");
        f.url = f.url || d.p.editurl;
        if ("1" === h) {
            var k;
            a('td[role="gridcell"]', q).each(function (c) {
                k = d.p.colModel[c];
                m = k.name;
                if ("cb" !== m && "subgrid" !== m && !0 === k.editable && "rn" !== m && !a(this).hasClass("not-editable-cell")) {
                    switch (k.edittype) {
                        case "checkbox":
                            var b = ["Yes", "No"];
                            k.editoptions && (b = k.editoptions.value.split(":"));
                            i[m] = a("input", this).is(":checked") ? b[0] : b[1];
                            break;
                        case "text":
                        case "password":
                        case "textarea":
                        case "button":
                            i[m] = a("input, textarea", this).val();
                            break;
                        case "select":
                            if (k.editoptions.multiple) {
                                var b = a("select", this),
                                    g = [];
                                i[m] = a(b).val();
                                i[m] = i[m] ? i[m].join(",") : "";
                                a("select option:selected", this).each(function (d, c) {
                                    g[d] = a(c).text()
                                });
                                w[m] = g.join(",")
                            } else i[m] = a("select option:selected", this).val(), w[m] = a("select option:selected", this).text();
                            k.formatter && "select" === k.formatter && (w = {});
                            break;
                        case "custom":
                            try {
                                if (k.editoptions && a.isFunction(k.editoptions.custom_value)) {
                                    if (i[m] = k.editoptions.custom_value.call(d, a(".customelement", this), "get"), void 0 === i[m])throw"e2";
                                } else throw"e1";
                            } catch (e) {
                                "e1" === e && a.jgrid.info_dialog(a.jgrid.errors.errcap,
                                    "function 'custom_value' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose), "e2" === e ? a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose) : a.jgrid.info_dialog(a.jgrid.errors.errcap, e.message, a.jgrid.edit.bClose)
                            }
                    }
                    s = a.jgrid.checkValues.call(d, i[m], c);
                    if (!1 === s[0])return s[1] = i[m] + " " + s[1], !1;
                    d.p.autoencode && (i[m] = a.jgrid.htmlEncode(i[m]));
                    "clientArray" !== f.url && k.editoptions && !0 === k.editoptions.NullIfEmpty && "" === i[m] && (r[m] = "null")
                }
            });
            if (!1 ===
                s[0]) {
                try {
                    var u = d.rows.namedItem(c), p = a.jgrid.findPos(u);
                    a.jgrid.info_dialog(a.jgrid.errors.errcap, s[1], a.jgrid.edit.bClose, {left: p[0], top: p[1] + a(u).outerHeight()})
                } catch (y) {
                    alert(s[1])
                }
                return j
            }
            h = d.p.prmNames;
            u = c;
            p = !1 === d.p.keyIndex ? h.id : d.p.colModel[d.p.keyIndex + (!0 === d.p.rownumbers ? 1 : 0) + (!0 === d.p.multiselect ? 1 : 0) + (!0 === d.p.subGrid ? 1 : 0)].name;
            if (i) {
                i[h.oper] = h.editoper;
                if (void 0 === i[p] || "" === i[p])i[p] = c; else if (q.id !== d.p.idPrefix + i[p] && (h = a.jgrid.stripPref(d.p.idPrefix, c), void 0 !== d.p._index[h] &&
                    (d.p._index[i[p]] = d.p._index[h], delete d.p._index[h]), c = d.p.idPrefix + i[p], a(q).attr("id", c), d.p.selrow === u && (d.p.selrow = c), a.isArray(d.p.selarrrow) && (h = a.inArray(u, d.p.selarrrow), 0 <= h && (d.p.selarrrow[h] = c)), d.p.multiselect))h = "jqg_" + d.p.id + "_" + c, a("input.cbox", q).attr("id", h).attr("name", h);
                void 0 === d.p.inlineData && (d.p.inlineData = {});
                i = a.extend({}, i, d.p.inlineData, f.extraparam)
            }
            if ("clientArray" === f.url) {
                i = a.extend({}, i, w);
                d.p.autoencode && a.each(i, function (d, c) {
                    i[d] = a.jgrid.htmlDecode(c)
                });
                h = a(d).jqGrid("setRowData",
                    c, i);
                a(q).attr("editable", "0");
                for (p = 0; p < d.p.savedRow.length; p++)if ("" + d.p.savedRow[p].id === "" + u) {
                    t = p;
                    break
                }
                0 <= t && d.p.savedRow.splice(t, 1);
                a(d).triggerHandler("jqGridInlineAfterSaveRow", [c, h, i, f]);
                a.isFunction(f.aftersavefunc) && f.aftersavefunc.call(d, c, h, f);
                j = !0;
                a(q).removeClass("jqgrid-new-row").unbind("keydown")
            } else a("#lui_" + a.jgrid.jqID(d.p.id)).show(), r = a.extend({}, i, r), r[p] = a.jgrid.stripPref(d.p.idPrefix, r[p]), a.ajax(a.extend({url: f.url, data: a.isFunction(d.p.serializeRowData) ? d.p.serializeRowData.call(d,
                r) : r, type: f.mtype, async: !1, complete: function (b, g) {
                a("#lui_" + a.jgrid.jqID(d.p.id)).hide();
                if ("success" === g) {
                    var e = !0, h;
                    h = a(d).triggerHandler("jqGridInlineSuccessSaveRow", [b, c, f]);
                    a.isArray(h) || (h = [!0, i]);
                    h[0] && a.isFunction(f.successfunc) && (h = f.successfunc.call(d, b));
                    a.isArray(h) ? (e = h[0], i = h[1] || i) : e = h;
                    if (!0 === e) {
                        d.p.autoencode && a.each(i, function (d, c) {
                            i[d] = a.jgrid.htmlDecode(c)
                        });
                        i = a.extend({}, i, w);
                        a(d).jqGrid("setRowData", c, i);
                        a(q).attr("editable", "0");
                        for (e = 0; e < d.p.savedRow.length; e++)if ("" + d.p.savedRow[e].id ===
                            "" + c) {
                            t = e;
                            break
                        }
                        0 <= t && d.p.savedRow.splice(t, 1);
                        a(d).triggerHandler("jqGridInlineAfterSaveRow", [c, b, i, f]);
                        a.isFunction(f.aftersavefunc) && f.aftersavefunc.call(d, c, b);
                        j = !0;
                        a(q).removeClass("jqgrid-new-row").unbind("keydown")
                    } else a(d).triggerHandler("jqGridInlineErrorSaveRow", [c, b, g, null, f]), a.isFunction(f.errorfunc) && f.errorfunc.call(d, c, b, g, null), !0 === f.restoreAfterError && a(d).jqGrid("restoreRow", c, f.afterrestorefunc)
                }
            }, error: function (b, e, g) {
                a("#lui_" + a.jgrid.jqID(d.p.id)).hide();
                a(d).triggerHandler("jqGridInlineErrorSaveRow",
                    [c, b, e, g, f]);
                if (a.isFunction(f.errorfunc))f.errorfunc.call(d, c, b, e, g); else {
                    b = b.responseText || b.statusText;
                    try {
                        a.jgrid.info_dialog(a.jgrid.errors.errcap, '<div class="ui-state-error">' + b + "</div>", a.jgrid.edit.bClose, {buttonalign: "right"})
                    } catch (h) {
                        alert(b)
                    }
                }
                !0 === f.restoreAfterError && a(d).jqGrid("restoreRow", c, f.afterrestorefunc)
            }}, a.jgrid.ajaxOptions, d.p.ajaxRowOptions || {}))
        }
        return j
    }, restoreRow: function (c, b) {
        var e = a.makeArray(arguments).slice(1), o = {};
        "object" === a.type(e[0]) ? o = e[0] : a.isFunction(b) &&
            (o.afterrestorefunc = b);
        o = a.extend(!0, {}, a.jgrid.inlineEdit, o);
        return this.each(function () {
            var b = this, e, n, h = {}, f;
            if (b.grid) {
                n = a(b).jqGrid("getInd", c, true);
                if (n !== false) {
                    for (f = 0; f < b.p.savedRow.length; f++)if ("" + b.p.savedRow[f].id === "" + c) {
                        e = f;
                        break
                    }
                    if (e >= 0) {
                        if (a.isFunction(a.fn.datepicker))try {
                            a("input.hasDatepicker", "#" + a.jgrid.jqID(n.id)).datepicker("hide")
                        } catch (j) {
                        }
                        a.each(b.p.colModel, function () {
                            this.editable === true && b.p.savedRow[e].hasOwnProperty(this.name) && (h[this.name] = b.p.savedRow[e][this.name])
                        });
                        a(b).jqGrid("setRowData", c, h);
                        a(n).attr("editable", "0").unbind("keydown");
                        b.p.savedRow.splice(e, 1);
                        a("#" + a.jgrid.jqID(c), "#" + a.jgrid.jqID(b.p.id)).hasClass("jqgrid-new-row") && setTimeout(function () {
                            a(b).jqGrid("delRowData", c);
                            a(b).jqGrid("showAddEditButtons")
                        }, 0)
                    }
                    a(b).triggerHandler("jqGridInlineAfterRestoreRow", [c]);
                    a.isFunction(o.afterrestorefunc) && o.afterrestorefunc.call(b, c)
                }
            }
        })
    }, addRow: function (c) {
        c = a.extend(!0, {rowID: null, initdata: {}, position: "first", useDefValues: !0, useFormatter: !1, addRowParams: {extraparam: {}}},
            c || {});
        return this.each(function () {
            if (this.grid) {
                var b = this;
                c.rowID = a.isFunction(c.rowID) ? c.rowID.call(b, c) : null != c.rowID ? c.rowID : a.jgrid.randId();
                !0 === c.useDefValues && a(b.p.colModel).each(function () {
                    if (this.editoptions && this.editoptions.defaultValue) {
                        var e = this.editoptions.defaultValue, e = a.isFunction(e) ? e.call(b) : e;
                        c.initdata[this.name] = e
                    }
                });
                a(b).jqGrid("addRowData", c.rowID, c.initdata, c.position);
                c.rowID = b.p.idPrefix + c.rowID;
                a("#" + a.jgrid.jqID(c.rowID), "#" + a.jgrid.jqID(b.p.id)).addClass("jqgrid-new-row");
                if (c.useFormatter)a("#" + a.jgrid.jqID(c.rowID) + " .ui-inline-edit", "#" + a.jgrid.jqID(b.p.id)).click(); else {
                    var e = b.p.prmNames;
                    c.addRowParams.extraparam[e.oper] = e.addoper;
                    a(b).jqGrid("editRow", c.rowID, c.addRowParams);
                    a(b).jqGrid("setSelection", c.rowID)
                }
            }
        })
    }, inlineNav: function (c, b) {
        b = a.extend(!0, {edit: !0, editicon: "ui-icon-pencil", add: !0, addicon: "ui-icon-plus", save: !0, saveicon: "ui-icon-disk", cancel: !0, cancelicon: "ui-icon-cancel", addParams: {addRowParams: {extraparam: {}}}, editParams: {}, restoreAfterSelect: !0},
            a.jgrid.nav, b || {});
        return this.each(function () {
            if (this.grid) {
                var e = this, o, l = a.jgrid.jqID(e.p.id);
                e.p._inlinenav = !0;
                if (!0 === b.addParams.useFormatter) {
                    var g = e.p.colModel, n;
                    for (n = 0; n < g.length; n++)if (g[n].formatter && "actions" === g[n].formatter) {
                        g[n].formatoptions && (g = a.extend({keys: !1, onEdit: null, onSuccess: null, afterSave: null, onError: null, afterRestore: null, extraparam: {}, url: null}, g[n].formatoptions), b.addParams.addRowParams = {keys: g.keys, oneditfunc: g.onEdit, successfunc: g.onSuccess, url: g.url, extraparam: g.extraparam,
                            aftersavefunc: g.afterSave, errorfunc: g.onError, afterrestorefunc: g.afterRestore});
                        break
                    }
                }
                b.add && a(e).jqGrid("navButtonAdd", c, {caption: b.addtext, title: b.addtitle, buttonicon: b.addicon, id: e.p.id + "_iladd", onClickButton: function () {
                    a(e).jqGrid("addRow", b.addParams);
                    b.addParams.useFormatter || (a("#" + l + "_ilsave").removeClass("ui-state-disabled"), a("#" + l + "_ilcancel").removeClass("ui-state-disabled"), a("#" + l + "_iladd").addClass("ui-state-disabled"), a("#" + l + "_iledit").addClass("ui-state-disabled"))
                }});
                b.edit && a(e).jqGrid("navButtonAdd",
                    c, {caption: b.edittext, title: b.edittitle, buttonicon: b.editicon, id: e.p.id + "_iledit", onClickButton: function () {
                        var c = a(e).jqGrid("getGridParam", "selrow");
                        c ? (a(e).jqGrid("editRow", c, b.editParams), a("#" + l + "_ilsave").removeClass("ui-state-disabled"), a("#" + l + "_ilcancel").removeClass("ui-state-disabled"), a("#" + l + "_iladd").addClass("ui-state-disabled"), a("#" + l + "_iledit").addClass("ui-state-disabled")) : (a.jgrid.viewModal("#alertmod", {gbox: "#gbox_" + l, jqm: !0}), a("#jqg_alrt").focus())
                    }});
                b.save && (a(e).jqGrid("navButtonAdd",
                    c, {caption: b.savetext || "", title: b.savetitle || "Save row", buttonicon: b.saveicon, id: e.p.id + "_ilsave", onClickButton: function () {
                        var c = e.p.savedRow[0].id;
                        if (c) {
                            var f = e.p.prmNames, g = f.oper, d = {};
                            a("#" + a.jgrid.jqID(c), "#" + l).hasClass("jqgrid-new-row") ? (b.addParams.addRowParams.extraparam[g] = f.addoper, d = b.addParams.addRowParams) : (b.editParams.extraparam || (b.editParams.extraparam = {}), b.editParams.extraparam[g] = f.editoper, d = b.editParams);
                            a(e).jqGrid("saveRow", c, d) && a(e).jqGrid("showAddEditButtons")
                        } else a.jgrid.viewModal("#alertmod",
                            {gbox: "#gbox_" + l, jqm: !0}), a("#jqg_alrt").focus()
                    }}), a("#" + l + "_ilsave").addClass("ui-state-disabled"));
                b.cancel && (a(e).jqGrid("navButtonAdd", c, {caption: b.canceltext || "", title: b.canceltitle || "Cancel row editing", buttonicon: b.cancelicon, id: e.p.id + "_ilcancel", onClickButton: function () {
                    var c = e.p.savedRow[0].id, f = {};
                    if (c) {
                        f = a("#" + a.jgrid.jqID(c), "#" + l).hasClass("jqgrid-new-row") ? b.addParams.addRowParams : b.editParams;
                        a(e).jqGrid("restoreRow", c, f);
                        a(e).jqGrid("showAddEditButtons")
                    } else {
                        a.jgrid.viewModal("#alertmod",
                            {gbox: "#gbox_" + l, jqm: true});
                        a("#jqg_alrt").focus()
                    }
                }}), a("#" + l + "_ilcancel").addClass("ui-state-disabled"));
                !0 === b.restoreAfterSelect && (o = a.isFunction(e.p.beforeSelectRow) ? e.p.beforeSelectRow : !1, e.p.beforeSelectRow = function (c, f) {
                    var g = true;
                    if (e.p.savedRow.length > 0 && e.p._inlinenav === true && c !== e.p.selrow && e.p.selrow !== null) {
                        e.p.selrow === b.addParams.rowID ? a(e).jqGrid("delRowData", e.p.selrow) : a(e).jqGrid("restoreRow", e.p.selrow, b.editParams);
                        a(e).jqGrid("showAddEditButtons")
                    }
                    o && (g = o.call(e, c, f));
                    return g
                })
            }
        })
    },
        showAddEditButtons: function () {
            return this.each(function () {
                if (this.grid) {
                    var c = a.jgrid.jqID(this.p.id);
                    a("#" + c + "_ilsave").addClass("ui-state-disabled");
                    a("#" + c + "_ilcancel").addClass("ui-state-disabled");
                    a("#" + c + "_iladd").removeClass("ui-state-disabled");
                    a("#" + c + "_iledit").removeClass("ui-state-disabled")
                }
            })
        }})
})(jQuery);
(function (b) {
    b.jgrid.extend({editCell: function (d, f, a) {
        return this.each(function () {
            var c = this, g, e, h, i;
            if (c.grid && !0 === c.p.cellEdit) {
                f = parseInt(f, 10);
                c.p.selrow = c.rows[d].id;
                c.p.knv || b(c).jqGrid("GridNav");
                if (0 < c.p.savedRow.length) {
                    if (!0 === a && d == c.p.iRow && f == c.p.iCol)return;
                    b(c).jqGrid("saveCell", c.p.savedRow[0].id, c.p.savedRow[0].ic)
                } else window.setTimeout(function () {
                    b("#" + b.jgrid.jqID(c.p.knv)).attr("tabindex", "-1").focus()
                }, 0);
                i = c.p.colModel[f];
                g = i.name;
                if (!("subgrid" === g || "cb" === g || "rn" === g)) {
                    h =
                        b("td:eq(" + f + ")", c.rows[d]);
                    if (!0 === i.editable && !0 === a && !h.hasClass("not-editable-cell")) {
                        0 <= parseInt(c.p.iCol, 10) && 0 <= parseInt(c.p.iRow, 10) && (b("td:eq(" + c.p.iCol + ")", c.rows[c.p.iRow]).removeClass("edit-cell ui-state-highlight"), b(c.rows[c.p.iRow]).removeClass("selected-row ui-state-hover"));
                        b(h).addClass("edit-cell ui-state-highlight");
                        b(c.rows[d]).addClass("selected-row ui-state-hover");
                        try {
                            e = b.unformat.call(c, h, {rowId: c.rows[d].id, colModel: i}, f)
                        } catch (k) {
                            e = i.edittype && "textarea" === i.edittype ? b(h).text() :
                                b(h).html()
                        }
                        c.p.autoencode && (e = b.jgrid.htmlDecode(e));
                        i.edittype || (i.edittype = "text");
                        c.p.savedRow.push({id: d, ic: f, name: g, v: e});
                        if ("&nbsp;" === e || "&#160;" === e || 1 === e.length && 160 === e.charCodeAt(0))e = "";
                        if (b.isFunction(c.p.formatCell)) {
                            var j = c.p.formatCell.call(c, c.rows[d].id, g, e, d, f);
                            void 0 !== j && (e = j)
                        }
                        var j = b.extend({}, i.editoptions || {}, {id: d + "_" + g, name: g}), n = b.jgrid.createEl.call(c, i.edittype, j, e, !0, b.extend({}, b.jgrid.ajaxOptions, c.p.ajaxSelectOptions || {}));
                        b(c).triggerHandler("jqGridBeforeEditCell",
                            [c.rows[d].id, g, e, d, f]);
                        b.isFunction(c.p.beforeEditCell) && c.p.beforeEditCell.call(c, c.rows[d].id, g, e, d, f);
                        b(h).html("").append(n).attr("tabindex", "0");
                        b.jgrid.bindEv.call(c, n, j);
                        window.setTimeout(function () {
                            b(n).focus()
                        }, 0);
                        b("input, select, textarea", h).bind("keydown", function (a) {
                            a.keyCode === 27 && (b("input.hasDatepicker", h).length > 0 ? b(".ui-datepicker").is(":hidden") ? b(c).jqGrid("restoreCell", d, f) : b("input.hasDatepicker", h).datepicker("hide") : b(c).jqGrid("restoreCell", d, f));
                            if (a.keyCode === 13) {
                                b(c).jqGrid("saveCell",
                                    d, f);
                                return false
                            }
                            if (a.keyCode === 9) {
                                if (c.grid.hDiv.loading)return false;
                                a.shiftKey ? b(c).jqGrid("prevCell", d, f) : b(c).jqGrid("nextCell", d, f)
                            }
                            a.stopPropagation()
                        });
                        b(c).triggerHandler("jqGridAfterEditCell", [c.rows[d].id, g, e, d, f]);
                        b.isFunction(c.p.afterEditCell) && c.p.afterEditCell.call(c, c.rows[d].id, g, e, d, f)
                    } else 0 <= parseInt(c.p.iCol, 10) && 0 <= parseInt(c.p.iRow, 10) && (b("td:eq(" + c.p.iCol + ")", c.rows[c.p.iRow]).removeClass("edit-cell ui-state-highlight"), b(c.rows[c.p.iRow]).removeClass("selected-row ui-state-hover")),
                        h.addClass("edit-cell ui-state-highlight"), b(c.rows[d]).addClass("selected-row ui-state-hover"), e = h.html().replace(/\&#160\;/ig, ""), b(c).triggerHandler("jqGridSelectCell", [c.rows[d].id, g, e, d, f]), b.isFunction(c.p.onSelectCell) && c.p.onSelectCell.call(c, c.rows[d].id, g, e, d, f);
                    c.p.iCol = f;
                    c.p.iRow = d
                }
            }
        })
    }, saveCell: function (d, f) {
        return this.each(function () {
            var a = this, c;
            if (a.grid && !0 === a.p.cellEdit) {
                c = 1 <= a.p.savedRow.length ? 0 : null;
                if (null !== c) {
                    var g = b("td:eq(" + f + ")", a.rows[d]), e, h, i = a.p.colModel[f], k = i.name,
                        j = b.jgrid.jqID(k);
                    switch (i.edittype) {
                        case "select":
                            if (i.editoptions.multiple) {
                                var j = b("#" + d + "_" + j, a.rows[d]), n = [];
                                (e = b(j).val()) ? e.join(",") : e = "";
                                b("option:selected", j).each(function (a, c) {
                                    n[a] = b(c).text()
                                });
                                h = n.join(",")
                            } else e = b("#" + d + "_" + j + " option:selected", a.rows[d]).val(), h = b("#" + d + "_" + j + " option:selected", a.rows[d]).text();
                            i.formatter && (h = e);
                            break;
                        case "checkbox":
                            var l = ["Yes", "No"];
                            i.editoptions && (l = i.editoptions.value.split(":"));
                            h = e = b("#" + d + "_" + j, a.rows[d]).is(":checked") ? l[0] : l[1];
                            break;
                        case "password":
                        case "text":
                        case "textarea":
                        case "button":
                            h = e = b("#" + d + "_" + j, a.rows[d]).val();
                            break;
                        case "custom":
                            try {
                                if (i.editoptions && b.isFunction(i.editoptions.custom_value)) {
                                    e = i.editoptions.custom_value.call(a, b(".customelement", g), "get");
                                    if (void 0 === e)throw"e2";
                                    h = e
                                } else throw"e1";
                            } catch (o) {
                                "e1" === o && b.jgrid.info_dialog(b.jgrid.errors.errcap, "function 'custom_value' " + b.jgrid.edit.msg.nodefined, b.jgrid.edit.bClose), "e2" === o ? b.jgrid.info_dialog(b.jgrid.errors.errcap, "function 'custom_value' " + b.jgrid.edit.msg.novalue,
                                    b.jgrid.edit.bClose) : b.jgrid.info_dialog(b.jgrid.errors.errcap, o.message, b.jgrid.edit.bClose)
                            }
                    }
                    if (h !== a.p.savedRow[c].v) {
                        if (c = b(a).triggerHandler("jqGridBeforeSaveCell", [a.rows[d].id, k, e, d, f]))h = e = c;
                        if (b.isFunction(a.p.beforeSaveCell) && (c = a.p.beforeSaveCell.call(a, a.rows[d].id, k, e, d, f)))h = e = c;
                        var p = b.jgrid.checkValues.call(a, e, f);
                        if (!0 === p[0]) {
                            c = b(a).triggerHandler("jqGridBeforeSubmitCell", [a.rows[d].id, k, e, d, f]) || {};
                            b.isFunction(a.p.beforeSubmitCell) && ((c = a.p.beforeSubmitCell.call(a, a.rows[d].id,
                                k, e, d, f)) || (c = {}));
                            0 < b("input.hasDatepicker", g).length && b("input.hasDatepicker", g).datepicker("hide");
                            if ("remote" === a.p.cellsubmit)if (a.p.cellurl) {
                                var m = {};
                                a.p.autoencode && (e = b.jgrid.htmlEncode(e));
                                m[k] = e;
                                l = a.p.prmNames;
                                i = l.id;
                                j = l.oper;
                                m[i] = b.jgrid.stripPref(a.p.idPrefix, a.rows[d].id);
                                m[j] = l.editoper;
                                m = b.extend(c, m);
                                b("#lui_" + b.jgrid.jqID(a.p.id)).show();
                                a.grid.hDiv.loading = !0;
                                b.ajax(b.extend({url: a.p.cellurl, data: b.isFunction(a.p.serializeCellData) ? a.p.serializeCellData.call(a, m) : m, type: "POST", complete: function (c, i) {
                                    b("#lui_" + a.p.id).hide();
                                    a.grid.hDiv.loading = false;
                                    if (i === "success") {
                                        var j = b(a).triggerHandler("jqGridAfterSubmitCell", [a, c, m.id, k, e, d, f]) || [true, ""];
                                        j[0] === true && b.isFunction(a.p.afterSubmitCell) && (j = a.p.afterSubmitCell.call(a, c, m.id, k, e, d, f));
                                        if (j[0] === true) {
                                            b(g).empty();
                                            b(a).jqGrid("setCell", a.rows[d].id, f, h, false, false, true);
                                            b(g).addClass("dirty-cell");
                                            b(a.rows[d]).addClass("edited");
                                            b(a).triggerHandler("jqGridAfterSaveCell", [a.rows[d].id, k, e, d, f]);
                                            b.isFunction(a.p.afterSaveCell) && a.p.afterSaveCell.call(a,
                                                a.rows[d].id, k, e, d, f);
                                            a.p.savedRow.splice(0, 1)
                                        } else {
                                            b.jgrid.info_dialog(b.jgrid.errors.errcap, j[1], b.jgrid.edit.bClose);
                                            b(a).jqGrid("restoreCell", d, f)
                                        }
                                    }
                                }, error: function (c, e, h) {
                                    b("#lui_" + b.jgrid.jqID(a.p.id)).hide();
                                    a.grid.hDiv.loading = false;
                                    b(a).triggerHandler("jqGridErrorCell", [c, e, h]);
                                    b.isFunction(a.p.errorCell) ? a.p.errorCell.call(a, c, e, h) : b.jgrid.info_dialog(b.jgrid.errors.errcap, c.status + " : " + c.statusText + "<br/>" + e, b.jgrid.edit.bClose);
                                    b(a).jqGrid("restoreCell", d, f)
                                }}, b.jgrid.ajaxOptions, a.p.ajaxCellOptions ||
                                {}))
                            } else try {
                                b.jgrid.info_dialog(b.jgrid.errors.errcap, b.jgrid.errors.nourl, b.jgrid.edit.bClose), b(a).jqGrid("restoreCell", d, f)
                            } catch (q) {
                            }
                            "clientArray" === a.p.cellsubmit && (b(g).empty(), b(a).jqGrid("setCell", a.rows[d].id, f, h, !1, !1, !0), b(g).addClass("dirty-cell"), b(a.rows[d]).addClass("edited"), b(a).triggerHandler("jqGridAfterSaveCell", [a.rows[d].id, k, e, d, f]), b.isFunction(a.p.afterSaveCell) && a.p.afterSaveCell.call(a, a.rows[d].id, k, e, d, f), a.p.savedRow.splice(0, 1))
                        } else try {
                            window.setTimeout(function () {
                                b.jgrid.info_dialog(b.jgrid.errors.errcap,
                                    e + " " + p[1], b.jgrid.edit.bClose)
                            }, 100), b(a).jqGrid("restoreCell", d, f)
                        } catch (r) {
                        }
                    } else b(a).jqGrid("restoreCell", d, f)
                }
                window.setTimeout(function () {
                    b("#" + b.jgrid.jqID(a.p.knv)).attr("tabindex", "-1").focus()
                }, 0)
            }
        })
    }, restoreCell: function (d, f) {
        return this.each(function () {
            var a = this, c;
            if (a.grid && !0 === a.p.cellEdit) {
                c = 1 <= a.p.savedRow.length ? 0 : null;
                if (null !== c) {
                    var g = b("td:eq(" + f + ")", a.rows[d]);
                    if (b.isFunction(b.fn.datepicker))try {
                        b("input.hasDatepicker", g).datepicker("hide")
                    } catch (e) {
                    }
                    b(g).empty().attr("tabindex",
                        "-1");
                    b(a).jqGrid("setCell", a.rows[d].id, f, a.p.savedRow[c].v, !1, !1, !0);
                    b(a).triggerHandler("jqGridAfterRestoreCell", [a.rows[d].id, a.p.savedRow[c].v, d, f]);
                    b.isFunction(a.p.afterRestoreCell) && a.p.afterRestoreCell.call(a, a.rows[d].id, a.p.savedRow[c].v, d, f);
                    a.p.savedRow.splice(0, 1)
                }
                window.setTimeout(function () {
                    b("#" + a.p.knv).attr("tabindex", "-1").focus()
                }, 0)
            }
        })
    }, nextCell: function (d, f) {
        return this.each(function () {
            var a = !1, c;
            if (this.grid && !0 === this.p.cellEdit) {
                for (c = f + 1; c < this.p.colModel.length; c++)if (!0 ===
                    this.p.colModel[c].editable) {
                    a = c;
                    break
                }
                !1 !== a ? b(this).jqGrid("editCell", d, a, !0) : 0 < this.p.savedRow.length && b(this).jqGrid("saveCell", d, f)
            }
        })
    }, prevCell: function (d, f) {
        return this.each(function () {
            var a = !1, c;
            if (this.grid && !0 === this.p.cellEdit) {
                for (c = f - 1; 0 <= c; c--)if (!0 === this.p.colModel[c].editable) {
                    a = c;
                    break
                }
                !1 !== a ? b(this).jqGrid("editCell", d, a, !0) : 0 < this.p.savedRow.length && b(this).jqGrid("saveCell", d, f)
            }
        })
    }, GridNav: function () {
        return this.each(function () {
            function d(c, d, e) {
                if ("v" === e.substr(0, 1)) {
                    var f =
                        b(a.grid.bDiv)[0].clientHeight, g = b(a.grid.bDiv)[0].scrollTop, l = a.rows[c].offsetTop + a.rows[c].clientHeight, o = a.rows[c].offsetTop;
                    "vd" === e && l >= f && (b(a.grid.bDiv)[0].scrollTop = b(a.grid.bDiv)[0].scrollTop + a.rows[c].clientHeight);
                    "vu" === e && o < g && (b(a.grid.bDiv)[0].scrollTop = b(a.grid.bDiv)[0].scrollTop - a.rows[c].clientHeight)
                }
                "h" === e && (e = b(a.grid.bDiv)[0].clientWidth, f = b(a.grid.bDiv)[0].scrollLeft, g = a.rows[c].cells[d].offsetLeft, a.rows[c].cells[d].offsetLeft + a.rows[c].cells[d].clientWidth >= e + parseInt(f,
                    10) ? b(a.grid.bDiv)[0].scrollLeft = b(a.grid.bDiv)[0].scrollLeft + a.rows[c].cells[d].clientWidth : g < f && (b(a.grid.bDiv)[0].scrollLeft = b(a.grid.bDiv)[0].scrollLeft - a.rows[c].cells[d].clientWidth))
            }

            function f(b, c) {
                var d, e;
                if ("lft" === c) {
                    d = b + 1;
                    for (e = b; 0 <= e; e--)if (!0 !== a.p.colModel[e].hidden) {
                        d = e;
                        break
                    }
                }
                if ("rgt" === c) {
                    d = b - 1;
                    for (e = b; e < a.p.colModel.length; e++)if (!0 !== a.p.colModel[e].hidden) {
                        d = e;
                        break
                    }
                }
                return d
            }

            var a = this;
            if (a.grid && !0 === a.p.cellEdit) {
                a.p.knv = a.p.id + "_kn";
                var c = b("<div style='position:fixed;top:0px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='" +
                    a.p.knv + "'></div></div>"), g, e;
                b(c).insertBefore(a.grid.cDiv);
                b("#" + a.p.knv).focus().keydown(function (c) {
                    e = c.keyCode;
                    "rtl" === a.p.direction && (37 === e ? e = 39 : 39 === e && (e = 37));
                    switch (e) {
                        case 38:
                            0 < a.p.iRow - 1 && (d(a.p.iRow - 1, a.p.iCol, "vu"), b(a).jqGrid("editCell", a.p.iRow - 1, a.p.iCol, !1));
                            break;
                        case 40:
                            a.p.iRow + 1 <= a.rows.length - 1 && (d(a.p.iRow + 1, a.p.iCol, "vd"), b(a).jqGrid("editCell", a.p.iRow + 1, a.p.iCol, !1));
                            break;
                        case 37:
                            0 <= a.p.iCol - 1 && (g = f(a.p.iCol - 1, "lft"), d(a.p.iRow, g, "h"), b(a).jqGrid("editCell", a.p.iRow, g,
                                !1));
                            break;
                        case 39:
                            a.p.iCol + 1 <= a.p.colModel.length - 1 && (g = f(a.p.iCol + 1, "rgt"), d(a.p.iRow, g, "h"), b(a).jqGrid("editCell", a.p.iRow, g, !1));
                            break;
                        case 13:
                            0 <= parseInt(a.p.iCol, 10) && 0 <= parseInt(a.p.iRow, 10) && b(a).jqGrid("editCell", a.p.iRow, a.p.iCol, !0);
                            break;
                        default:
                            return!0
                    }
                    return!1
                })
            }
        })
    }, getChangedCells: function (d) {
        var f = [];
        d || (d = "all");
        this.each(function () {
            var a = this, c;
            a.grid && !0 === a.p.cellEdit && b(a.rows).each(function (g) {
                var e = {};
                b(this).hasClass("edited") && (b("td", this).each(function (f) {
                    c = a.p.colModel[f].name;
                    if ("cb" !== c && "subgrid" !== c)if ("dirty" === d) {
                        if (b(this).hasClass("dirty-cell"))try {
                            e[c] = b.unformat.call(a, this, {rowId: a.rows[g].id, colModel: a.p.colModel[f]}, f)
                        } catch (i) {
                            e[c] = b.jgrid.htmlDecode(b(this).html())
                        }
                    } else try {
                        e[c] = b.unformat.call(a, this, {rowId: a.rows[g].id, colModel: a.p.colModel[f]}, f)
                    } catch (k) {
                        e[c] = b.jgrid.htmlDecode(b(this).html())
                    }
                }), e.id = this.id, f.push(e))
            })
        });
        return f
    }})
})(jQuery);
(function (c) {
    c.fn.jqm = function (a) {
        var i = {overlay: 50, closeoverlay: !0, overlayClass: "jqmOverlay", closeClass: "jqmClose", trigger: ".jqModal", ajax: d, ajaxText: "", target: d, modal: d, toTop: d, onShow: d, onHide: d, onLoad: d};
        return this.each(function () {
            if (this._jqm)return j[this._jqm].c = c.extend({}, j[this._jqm].c, a);
            l++;
            this._jqm = l;
            j[l] = {c: c.extend(i, c.jqm.params, a), a: d, w: c(this).addClass("jqmID" + l), s: l};
            i.trigger && c(this).jqmAddTrigger(i.trigger)
        })
    };
    c.fn.jqmAddClose = function (a) {
        return o(this, a, "jqmHide")
    };
    c.fn.jqmAddTrigger =
        function (a) {
            return o(this, a, "jqmShow")
        };
    c.fn.jqmShow = function (a) {
        return this.each(function () {
            c.jqm.open(this._jqm, a)
        })
    };
    c.fn.jqmHide = function (a) {
        return this.each(function () {
            c.jqm.close(this._jqm, a)
        })
    };
    c.jqm = {hash: {}, open: function (a, i) {
        var b = j[a], e = b.c, h = "." + e.closeClass, f = parseInt(b.w.css("z-index")), f = 0 < f ? f : 3E3, g = c("<div></div>").css({height: "100%", width: "100%", position: "fixed", left: 0, top: 0, "z-index": f - 1, opacity: e.overlay / 100});
        if (b.a)return d;
        b.t = i;
        b.a = !0;
        b.w.css("z-index", f);
        e.modal ? (k[0] || setTimeout(function () {
                p("bind")
            },
            1), k.push(a)) : 0 < e.overlay ? e.closeoverlay && b.w.jqmAddClose(g) : g = d;
        b.o = g ? g.addClass(e.overlayClass).prependTo("body") : d;
        e.ajax ? (f = e.target || b.w, g = e.ajax, f = "string" == typeof f ? c(f, b.w) : c(f), g = "@" == g.substr(0, 1) ? c(i).attr(g.substring(1)) : g, f.html(e.ajaxText).load(g, function () {
            e.onLoad && e.onLoad.call(this, b);
            h && b.w.jqmAddClose(c(h, b.w));
            m(b)
        })) : h && b.w.jqmAddClose(c(h, b.w));
        e.toTop && b.o && b.w.before('<span id="jqmP' + b.w[0]._jqm + '"></span>').insertAfter(b.o);
        e.onShow ? e.onShow(b) : b.w.show();
        m(b);
        return d
    },
        close: function (a) {
            a = j[a];
            if (!a.a)return d;
            a.a = d;
            k[0] && (k.pop(), k[0] || p("unbind"));
            a.c.toTop && a.o && c("#jqmP" + a.w[0]._jqm).after(a.w).remove();
            if (a.c.onHide)a.c.onHide(a); else a.w.hide(), a.o && a.o.remove();
            return d
        }, params: {}};
    var l = 0, j = c.jqm.hash, k = [], d = !1, m = function (a) {
        try {
            c(":input:visible", a.w)[0].focus()
        } catch (d) {
        }
    }, p = function (a) {
        c(document)[a]("keypress", n)[a]("keydown", n)[a]("mousedown", n)
    }, n = function (a) {
        var d = j[k[k.length - 1]], b = !c(a.target).parents(".jqmID" + d.s)[0];
        b && (c(".jqmID" + d.s).each(function () {
            var d =
                c(this), h = d.offset();
            if (h.top <= a.pageY && a.pageY <= h.top + d.height() && h.left <= a.pageX && a.pageX <= h.left + d.width())return b = !1
        }), m(d));
        return!b
    }, o = function (a, i, b) {
        return a.each(function () {
            var a = this._jqm;
            c(i).each(function () {
                this[b] || (this[b] = [], c(this).click(function () {
                    for (var a in{jqmShow: 1, jqmHide: 1})for (var b in this[a])if (j[this[a][b]])j[this[a][b]].w[a](this);
                    return d
                }));
                this[b].push(a)
            })
        })
    }
})(jQuery);
(function (b) {
    b.fn.jqDrag = function (a) {
        return h(this, a, "d")
    };
    b.fn.jqResize = function (a, b) {
        return h(this, a, "r", b)
    };
    b.jqDnR = {dnr: {}, e: 0, drag: function (a) {
        "d" == d.k ? e.css({left: d.X + a.pageX - d.pX, top: d.Y + a.pageY - d.pY}) : (e.css({width: Math.max(a.pageX - d.pX + d.W, 0), height: Math.max(a.pageY - d.pY + d.H, 0)}), f && g.css({width: Math.max(a.pageX - f.pX + f.W, 0), height: Math.max(a.pageY - f.pY + f.H, 0)}));
        return!1
    }, stop: function () {
        b(document).unbind("mousemove", c.drag).unbind("mouseup", c.stop)
    }};
    var c = b.jqDnR, d = c.dnr, e = c.e, g, f, h = function (a, c, h, l) {
        return a.each(function () {
            c = c ? b(c, a) : a;
            c.bind("mousedown", {e: a, k: h}, function (a) {
                var c = a.data, i = {};
                e = c.e;
                g = l ? b(l) : !1;
                if ("relative" != e.css("position"))try {
                    e.position(i)
                } catch (h) {
                }
                d = {X: i.left || j("left") || 0, Y: i.top || j("top") || 0, W: j("width") || e[0].scrollWidth || 0, H: j("height") || e[0].scrollHeight || 0, pX: a.pageX, pY: a.pageY, k: c.k};
                f = g && "d" != c.k ? {X: i.left || k("left") || 0, Y: i.top || k("top") || 0, W: g[0].offsetWidth || k("width") || 0, H: g[0].offsetHeight || k("height") || 0, pX: a.pageX, pY: a.pageY, k: c.k} : !1;
                if (b("input.hasDatepicker",
                    e[0])[0])try {
                    b("input.hasDatepicker", e[0]).datepicker("hide")
                } catch (m) {
                }
                b(document).mousemove(b.jqDnR.drag).mouseup(b.jqDnR.stop);
                return!1
            })
        })
    }, j = function (a) {
        return parseInt(e.css(a), 10) || !1
    }, k = function (a) {
        return parseInt(g.css(a), 10) || !1
    }
})(jQuery);
(function (b) {
    b.jgrid.extend({setSubGrid: function () {
        return this.each(function () {
            var e, c;
            this.p.subGridOptions = b.extend({plusicon: "ui-icon-plus", minusicon: "ui-icon-minus", openicon: "ui-icon-carat-1-sw", expandOnLoad: !1, delayOnLoad: 50, selectOnExpand: !1, reloadOnExpand: !0}, this.p.subGridOptions || {});
            this.p.colNames.unshift("");
            this.p.colModel.unshift({name: "subgrid", width: b.jgrid.cell_width ? this.p.subGridWidth + this.p.cellLayout : this.p.subGridWidth, sortable: !1, resizable: !1, hidedlg: !0, search: !1, fixed: !0});
            e = this.p.subGridModel;
            if (e[0]) {
                e[0].align = b.extend([], e[0].align || []);
                for (c = 0; c < e[0].name.length; c++)e[0].align[c] = e[0].align[c] || "left"
            }
        })
    }, addSubGridCell: function (b, c) {
        var a = "", m, l;
        this.each(function () {
            a = this.formatCol(b, c);
            l = this.p.id;
            m = this.p.subGridOptions.plusicon
        });
        return'<td role="gridcell" aria-describedby="' + l + '_subgrid" class="ui-sgcollapsed sgcollapsed" ' + a + "><a href='javascript:void(0);'><span class='ui-icon " + m + "'></span></a></td>"
    }, addSubGrid: function (e, c) {
        return this.each(function () {
            var a =
                this;
            if (a.grid) {
                var m = function (c, e, h) {
                    e = b("<td align='" + a.p.subGridModel[0].align[h] + "'></td>").html(e);
                    b(c).append(e)
                }, l = function (c, e) {
                    var h, f, n, d = b("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), i = b("<tr></tr>");
                    for (f = 0; f < a.p.subGridModel[0].name.length; f++)h = b("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + a.p.direction + "'></th>"), b(h).html(a.p.subGridModel[0].name[f]), b(h).width(a.p.subGridModel[0].width[f]), b(i).append(h);
                    b(d).append(i);
                    c && (n = a.p.xmlReader.subgrid,
                        b(n.root + " " + n.row, c).each(function () {
                            i = b("<tr class='ui-widget-content ui-subtblcell'></tr>");
                            if (!0 === n.repeatitems)b(n.cell, this).each(function (a) {
                                m(i, b(this).text() || "&#160;", a)
                            }); else {
                                var c = a.p.subGridModel[0].mapping || a.p.subGridModel[0].name;
                                if (c)for (f = 0; f < c.length; f++)m(i, b(c[f], this).text() || "&#160;", f)
                            }
                            b(d).append(i)
                        }));
                    h = b("table:first", a.grid.bDiv).attr("id") + "_";
                    b("#" + b.jgrid.jqID(h + e)).append(d);
                    a.grid.hDiv.loading = !1;
                    b("#load_" + b.jgrid.jqID(a.p.id)).hide();
                    return!1
                }, p = function (c, e) {
                    var h,
                        f, d, g, i, k = b("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), j = b("<tr></tr>");
                    for (f = 0; f < a.p.subGridModel[0].name.length; f++)h = b("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + a.p.direction + "'></th>"), b(h).html(a.p.subGridModel[0].name[f]), b(h).width(a.p.subGridModel[0].width[f]), b(j).append(h);
                    b(k).append(j);
                    if (c && (g = a.p.jsonReader.subgrid, h = b.jgrid.getAccessor(c, g.root), void 0 !== h))for (f = 0; f < h.length; f++) {
                        d = h[f];
                        j = b("<tr class='ui-widget-content ui-subtblcell'></tr>");
                        if (!0 === g.repeatitems) {
                            g.cell && (d = d[g.cell]);
                            for (i = 0; i < d.length; i++)m(j, d[i] || "&#160;", i)
                        } else {
                            var l = a.p.subGridModel[0].mapping || a.p.subGridModel[0].name;
                            if (l.length)for (i = 0; i < l.length; i++)m(j, d[l[i]] || "&#160;", i)
                        }
                        b(k).append(j)
                    }
                    f = b("table:first", a.grid.bDiv).attr("id") + "_";
                    b("#" + b.jgrid.jqID(f + e)).append(k);
                    a.grid.hDiv.loading = !1;
                    b("#load_" + b.jgrid.jqID(a.p.id)).hide();
                    return!1
                }, t = function (c) {
                    var e, d, f, g;
                    e = b(c).attr("id");
                    d = {nd_: (new Date).getTime()};
                    d[a.p.prmNames.subgridid] = e;
                    if (!a.p.subGridModel[0])return!1;
                    if (a.p.subGridModel[0].params)for (g = 0; g < a.p.subGridModel[0].params.length; g++)for (f = 0; f < a.p.colModel.length; f++)a.p.colModel[f].name === a.p.subGridModel[0].params[g] && (d[a.p.colModel[f].name] = b("td:eq(" + f + ")", c).text().replace(/\&#160\;/ig, ""));
                    if (!a.grid.hDiv.loading)switch (a.grid.hDiv.loading = !0, b("#load_" + b.jgrid.jqID(a.p.id)).show(), a.p.subgridtype || (a.p.subgridtype = a.p.datatype), b.isFunction(a.p.subgridtype) ? a.p.subgridtype.call(a, d) : a.p.subgridtype = a.p.subgridtype.toLowerCase(), a.p.subgridtype) {
                        case "xml":
                        case "json":
                            b.ajax(b.extend({type: a.p.mtype,
                                url: a.p.subGridUrl, dataType: a.p.subgridtype, data: b.isFunction(a.p.serializeSubGridData) ? a.p.serializeSubGridData.call(a, d) : d, complete: function (c) {
                                    a.p.subgridtype === "xml" ? l(c.responseXML, e) : p(b.jgrid.parse(c.responseText), e)
                                }}, b.jgrid.ajaxOptions, a.p.ajaxSubgridOptions || {}))
                    }
                    return!1
                }, d, k, q, r = 0, g, j;
                b.each(a.p.colModel, function () {
                    (!0 === this.hidden || "rn" === this.name || "cb" === this.name) && r++
                });
                var s = a.rows.length, o = 1;
                void 0 !== c && 0 < c && (o = c, s = c + 1);
                for (; o < s;)b(a.rows[o]).hasClass("jqgrow") && b(a.rows[o].cells[e]).bind("click",
                    function () {
                        var c = b(this).parent("tr")[0];
                        j = c.nextSibling;
                        if (b(this).hasClass("sgcollapsed")) {
                            k = a.p.id;
                            d = c.id;
                            if (a.p.subGridOptions.reloadOnExpand === true || a.p.subGridOptions.reloadOnExpand === false && !b(j).hasClass("ui-subgrid")) {
                                q = e >= 1 ? "<td colspan='" + e + "'>&#160;</td>" : "";
                                g = b(a).triggerHandler("jqGridSubGridBeforeExpand", [k + "_" + d, d]);
                                (g = g === false || g === "stop" ? false : true) && b.isFunction(a.p.subGridBeforeExpand) && (g = a.p.subGridBeforeExpand.call(a, k + "_" + d, d));
                                if (g === false)return false;
                                b(c).after("<tr role='row' class='ui-subgrid'>" +
                                    q + "<td class='ui-widget-content subgrid-cell'><span class='ui-icon " + a.p.subGridOptions.openicon + "'></span></td><td colspan='" + parseInt(a.p.colNames.length - 1 - r, 10) + "' class='ui-widget-content subgrid-data'><div id=" + k + "_" + d + " class='tablediv'></div></td></tr>");
                                b(a).triggerHandler("jqGridSubGridRowExpanded", [k + "_" + d, d]);
                                b.isFunction(a.p.subGridRowExpanded) ? a.p.subGridRowExpanded.call(a, k + "_" + d, d) : t(c)
                            } else b(j).show();
                            b(this).html("<a href='javascript:void(0);'><span class='ui-icon " + a.p.subGridOptions.minusicon +
                                "'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");
                            a.p.subGridOptions.selectOnExpand && b(a).jqGrid("setSelection", d)
                        } else if (b(this).hasClass("sgexpanded")) {
                            g = b(a).triggerHandler("jqGridSubGridRowColapsed", [k + "_" + d, d]);
                            if ((g = g === false || g === "stop" ? false : true) && b.isFunction(a.p.subGridRowColapsed)) {
                                d = c.id;
                                g = a.p.subGridRowColapsed.call(a, k + "_" + d, d)
                            }
                            if (g === false)return false;
                            a.p.subGridOptions.reloadOnExpand === true ? b(j).remove(".ui-subgrid") : b(j).hasClass("ui-subgrid") && b(j).hide();
                            b(this).html("<a href='javascript:void(0);'><span class='ui-icon " +
                                a.p.subGridOptions.plusicon + "'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed")
                        }
                        return false
                    }), o++;
                !0 === a.p.subGridOptions.expandOnLoad && b(a.rows).filter(".jqgrow").each(function (a, c) {
                    b(c.cells[0]).click()
                });
                a.subGridXml = function (a, b) {
                    l(a, b)
                };
                a.subGridJson = function (a, b) {
                    p(a, b)
                }
            }
        })
    }, expandSubGridRow: function (e) {
        return this.each(function () {
            if ((this.grid || e) && !0 === this.p.subGrid) {
                var c = b(this).jqGrid("getInd", e, !0);
                c && (c = b("td.sgcollapsed", c)[0]) && b(c).trigger("click")
            }
        })
    }, collapseSubGridRow: function (e) {
        return this.each(function () {
            if ((this.grid ||
                e) && !0 === this.p.subGrid) {
                var c = b(this).jqGrid("getInd", e, !0);
                c && (c = b("td.sgexpanded", c)[0]) && b(c).trigger("click")
            }
        })
    }, toggleSubGridRow: function (e) {
        return this.each(function () {
            if ((this.grid || e) && !0 === this.p.subGrid) {
                var c = b(this).jqGrid("getInd", e, !0);
                if (c) {
                    var a = b("td.sgcollapsed", c)[0];
                    a ? b(a).trigger("click") : (a = b("td.sgexpanded", c)[0]) && b(a).trigger("click")
                }
            }
        })
    }})
})(jQuery);
(function (d) {
    d.extend(d.jgrid, {template: function (b) {
        var g = d.makeArray(arguments).slice(1), f, a = g.length;
        null == b && (b = "");
        return b.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function (e, b) {
            if (!isNaN(parseInt(b, 10)))return g[parseInt(b, 10)];
            for (f = 0; f < a; f++)if (d.isArray(g[f]))for (var c = g[f], k = c.length; k--;)if (b === c[k].nm)return c[k].v
        })
    }});
    d.jgrid.extend({groupingSetup: function () {
        return this.each(function () {
            var b, g, f = this.p.colModel, a = this.p.groupingView;
            if (null !== a && ("object" === typeof a ||
                d.isFunction(a)))if (a.groupField.length) {
                void 0 === a.visibiltyOnNextGrouping && (a.visibiltyOnNextGrouping = []);
                a.lastvalues = [];
                a.groups = [];
                a.counters = [];
                for (b = 0; b < a.groupField.length; b++)a.groupOrder[b] || (a.groupOrder[b] = "asc"), a.groupText[b] || (a.groupText[b] = "{0}"), "boolean" !== typeof a.groupColumnShow[b] && (a.groupColumnShow[b] = !0), "boolean" !== typeof a.groupSummary[b] && (a.groupSummary[b] = !1), !0 === a.groupColumnShow[b] ? (a.visibiltyOnNextGrouping[b] = !0, d(this).jqGrid("showCol", a.groupField[b])) : (a.visibiltyOnNextGrouping[b] =
                    d("#" + d.jgrid.jqID(this.p.id + "_" + a.groupField[b])).is(":visible"), d(this).jqGrid("hideCol", a.groupField[b]));
                a.summary = [];
                b = 0;
                for (g = f.length; b < g; b++)f[b].summaryType && a.summary.push({nm: f[b].name, st: f[b].summaryType, v: "", sr: f[b].summaryRound, srt: f[b].summaryRoundType || "round"})
            } else this.p.grouping = !1; else this.p.grouping = !1
        })
    }, groupingPrepare: function (b, g, f, a) {
        this.each(function () {
            var e = this.p.groupingView, h = this, c, k = e.groupField.length, l, j, m, q = 0;
            for (c = 0; c < k; c++)l = e.groupField[c], m = e.displayField[c],
                j = f[l], m = null == m ? null : f[m], null == m && (m = j), void 0 !== j && (0 === a ? (e.groups.push({idx: c, dataIndex: l, value: j, displayValue: m, startRow: a, cnt: 1, summary: []}), e.lastvalues[c] = j, e.counters[c] = {cnt: 1, pos: e.groups.length - 1, summary: d.extend(!0, [], e.summary)}) : "object" !== typeof j && (d.isArray(e.isInTheSameGroup) && d.isFunction(e.isInTheSameGroup[c]) ? !e.isInTheSameGroup[c].call(h, e.lastvalues[c], j, c, e) : e.lastvalues[c] !== j) ? (e.groups.push({idx: c, dataIndex: l, value: j, displayValue: m, startRow: a, cnt: 1, summary: []}), e.lastvalues[c] =
                j, q = 1, e.counters[c] = {cnt: 1, pos: e.groups.length - 1, summary: d.extend(!0, [], e.summary)}) : 1 === q ? (e.groups.push({idx: c, dataIndex: l, value: j, displayValue: m, startRow: a, cnt: 1, summary: []}), e.lastvalues[c] = j, e.counters[c] = {cnt: 1, pos: e.groups.length - 1, summary: d.extend(!0, [], e.summary)}) : (e.counters[c].cnt += 1, e.groups[e.counters[c].pos].cnt = e.counters[c].cnt), d.each(e.counters[c].summary, function () {
                this.v = d.isFunction(this.st) ? this.st.call(h, this.v, this.nm, f) : d(h).jqGrid("groupingCalculations.handler", this.st,
                    this.v, this.nm, this.sr, this.srt, f)
            }), e.groups[e.counters[c].pos].summary = e.counters[c].summary);
            g.push(b)
        });
        return g
    }, groupingToggle: function (b) {
        this.each(function () {
            var g = this.p.groupingView, f = b.split("_"), a = parseInt(f[f.length - 2], 10);
            f.splice(f.length - 2, 2);
            var f = f.join("_"), e = g.minusicon, h = g.plusicon, c = d("#" + d.jgrid.jqID(b)), c = c.length ? c[0].nextSibling : null, k = d("#" + d.jgrid.jqID(b) + " span.tree-wrap-" + this.p.direction), l = !1;
            if (k.hasClass(e)) {
                if (g.showSummaryOnHide) {
                    if (c)for (; c && !(d(c).hasClass("jqfoot") &&
                        parseInt(d(c).attr("jqfootlevel"), 10) <= a);)d(c).hide(), c = c.nextSibling
                } else if (c)for (; c;) {
                    g = c.className.indexOf(f);
                    if (-1 !== g && parseInt(c.className.substring(g + f.length + 1), 10) <= a)break;
                    d(c).hide();
                    c = c.nextSibling
                }
                k.removeClass(e).addClass(h);
                l = !0
            } else {
                if (c)for (; c;) {
                    g = c.className.indexOf(f);
                    if (-1 !== g && parseInt(c.className.substring(g + f.length + 1), 10) <= a)break;
                    d(c).show();
                    (g = d(c).find("span.tree-wrap-" + this.p.direction)) && d(g).hasClass(h) && d(g).removeClass(h).addClass(e);
                    c = c.nextSibling
                }
                k.removeClass(h).addClass(e)
            }
            d(this).triggerHandler("jqGridGroupingClickGroup",
                [b, l]);
            d.isFunction(this.p.onClickGroup) && this.p.onClickGroup.call(this, b, l)
        });
        return!1
    }, groupingRender: function (b, g) {
        return this.each(function () {
            function f(a, b, c) {
                var e = !1;
                if (0 === b)e = c[a]; else {
                    var d = c[a].idx;
                    if (0 === d)e = c[a]; else for (; 0 <= a; a--)if (c[a].idx === d - b) {
                        e = c[a];
                        break
                    }
                }
                return e
            }

            var a = this, e = a.p.groupingView, h = "", c = "", k, l, j = e.groupCollapse ? e.plusicon : e.minusicon, m, q = [], w = e.groupField.length, j = j + (" tree-wrap-" + a.p.direction);
            d.each(a.p.colModel, function (a, c) {
                var b;
                for (b = 0; b < w; b++)if (e.groupField[b] ===
                    c.name) {
                    q[b] = a;
                    break
                }
            });
            var t = 0, x = d.makeArray(e.groupSummary);
            x.reverse();
            d.each(e.groups, function (s, i) {
                t++;
                l = a.p.id + "ghead_" + i.idx;
                k = l + "_" + s;
                c = "<span style='cursor:pointer;' class='ui-icon " + j + "' onclick=\"jQuery('#" + d.jgrid.jqID(a.p.id) + "').jqGrid('groupingToggle','" + k + "');return false;\"></span>";
                try {
                    d.isArray(e.formatDisplayField) && d.isFunction(e.formatDisplayField[i.idx]) && (i.displayValue = e.formatDisplayField[i.idx].call(a, i.displayValue, i.value, a.p.colModel[q[i.idx]], i.idx, e)), m = a.formatter(k,
                        i.displayValue, q[i.idx], i.value)
                } catch (C) {
                    m = i.displayValue
                }
                h += '<tr id="' + k + '" role="row" class= "ui-widget-content jqgroup ui-row-' + a.p.direction + " " + l + '"><td style="padding-left:' + 12 * i.idx + 'px;" colspan="' + g + '">' + c + d.jgrid.template(e.groupText[i.idx], m, i.cnt, i.summary) + "</td></tr>";
                if (w - 1 === i.idx) {
                    var o = e.groups[s + 1], p, n, B = void 0 !== o ? e.groups[s + 1].startRow : b.length;
                    for (n = i.startRow; n < B; n++)h += b[n].join("");
                    var r;
                    if (void 0 !== o) {
                        for (r = 0; r < e.groupField.length && o.dataIndex !== e.groupField[r]; r++);
                        t = e.groupField.length -
                            r
                    }
                    for (o = 0; o < t; o++)if (x[o]) {
                        n = "";
                        e.groupCollapse && !e.showSummaryOnHide && (n = ' style="display:none;"');
                        h += "<tr" + n + ' jqfootlevel="' + (i.idx - o) + '" role="row" class="ui-widget-content jqfoot ui-row-' + a.p.direction + '">';
                        n = f(s, o, e.groups);
                        var u = a.p.colModel, v, y = n.cnt;
                        for (p = 0; p < g; p++) {
                            var z = "<td " + a.formatCol(p, 1, "") + ">&#160;</td>", A = "{0}";
                            d.each(n.summary, function () {
                                if (this.nm === u[p].name) {
                                    u[p].summaryTpl && (A = u[p].summaryTpl);
                                    "string" === typeof this.st && "avg" === this.st.toLowerCase() && this.v && 0 < y && (this.v /=
                                        y);
                                    try {
                                        v = a.formatter("", this.v, p, this)
                                    } catch (b) {
                                        v = this.v
                                    }
                                    z = "<td " + a.formatCol(p, 1, "") + ">" + d.jgrid.format(A, v) + "</td>";
                                    return!1
                                }
                            });
                            h += z
                        }
                        h += "</tr>"
                    }
                    t = r
                }
            });
            d("#" + d.jgrid.jqID(a.p.id) + " tbody:first").append(h);
            h = null
        })
    }, groupingGroupBy: function (b, g) {
        return this.each(function () {
            "string" === typeof b && (b = [b]);
            var f = this.p.groupingView;
            this.p.grouping = !0;
            void 0 === f.visibiltyOnNextGrouping && (f.visibiltyOnNextGrouping = []);
            var a;
            for (a = 0; a < f.groupField.length; a++)!f.groupColumnShow[a] && f.visibiltyOnNextGrouping[a] &&
            d(this).jqGrid("showCol", f.groupField[a]);
            for (a = 0; a < b.length; a++)f.visibiltyOnNextGrouping[a] = d("#" + d.jgrid.jqID(this.p.id) + "_" + d.jgrid.jqID(b[a])).is(":visible");
            this.p.groupingView = d.extend(this.p.groupingView, g || {});
            f.groupField = b;
            d(this).trigger("reloadGrid")
        })
    }, groupingRemove: function (b) {
        return this.each(function () {
            void 0 === b && (b = !0);
            this.p.grouping = !1;
            if (!0 === b) {
                var g = this.p.groupingView, f;
                for (f = 0; f < g.groupField.length; f++)!g.groupColumnShow[f] && g.visibiltyOnNextGrouping[f] && d(this).jqGrid("showCol",
                    g.groupField);
                d("tr.jqgroup, tr.jqfoot", "#" + d.jgrid.jqID(this.p.id) + " tbody:first").remove();
                d("tr.jqgrow:hidden", "#" + d.jgrid.jqID(this.p.id) + " tbody:first").show()
            } else d(this).trigger("reloadGrid")
        })
    }, groupingCalculations: {handler: function (b, d, f, a, e, h) {
        var c = {sum: function () {
            return parseFloat(d || 0) + parseFloat(h[f] || 0)
        }, min: function () {
            return"" === d ? parseFloat(h[f] || 0) : Math.min(parseFloat(d), parseFloat(h[f] || 0))
        }, max: function () {
            return"" === d ? parseFloat(h[f] || 0) : Math.max(parseFloat(d), parseFloat(h[f] ||
                0))
        }, count: function () {
            "" === d && (d = 0);
            return h.hasOwnProperty(f) ? d + 1 : 0
        }, avg: function () {
            return c.sum()
        }};
        if (!c[b])throw"jqGrid Grouping No such method: " + b;
        b = c[b]();
        null != a && ("fixed" === e ? b = b.toFixed(a) : (a = Math.pow(10, a), b = Math.round(b * a) / a));
        return b
    }}})
})(jQuery);
(function (d) {
    d.jgrid.extend({setTreeNode: function (b, c) {
        return this.each(function () {
            var a = this;
            if (a.grid && a.p.treeGrid)for (var h = a.p.expColInd, e = a.p.treeReader.expanded_field, i = a.p.treeReader.leaf_field, g = a.p.treeReader.level_field, f = a.p.treeReader.icon_field, l = a.p.treeReader.loaded, k, m, n, j; b < c;)j = d.jgrid.stripPref(a.p.idPrefix, a.rows[b].id), j = a.p.data[a.p._index[j]], "nested" === a.p.treeGridModel && !j[i] && (k = parseInt(j[a.p.treeReader.left_field], 10), m = parseInt(j[a.p.treeReader.right_field], 10), j[i] =
                m === k + 1 ? "true" : "false", a.rows[b].cells[a.p._treeleafpos].innerHTML = j[i]), k = parseInt(j[g], 10), 0 === a.p.tree_root_level ? (n = k + 1, m = k) : (n = k, m = k - 1), n = "<div class='tree-wrap tree-wrap-" + a.p.direction + "' style='width:" + 18 * n + "px;'>", n += "<div style='" + ("rtl" === a.p.direction ? "right:" : "left:") + 18 * m + "px;' class='ui-icon ", void 0 !== j[l] && (j[l] = "true" === j[l] || !0 === j[l] ? !0 : !1), "true" === j[i] || !0 === j[i] ? (n += (void 0 !== j[f] && "" !== j[f] ? j[f] : a.p.treeIcons.leaf) + " tree-leaf treeclick", j[i] = !0, m = "leaf") : (j[i] = !1, m = ""), j[e] =
                ("true" === j[e] || !0 === j[e] ? !0 : !1) && (j[l] || void 0 === j[l]), n = !1 === j[e] ? n + (!0 === j[i] ? "'" : a.p.treeIcons.plus + " tree-plus treeclick'") : n + (!0 === j[i] ? "'" : a.p.treeIcons.minus + " tree-minus treeclick'"), n += "></div></div>", d(a.rows[b].cells[h]).wrapInner("<span class='cell-wrapper" + m + "'></span>").prepend(n), k !== parseInt(a.p.tree_root_level, 10) && ((j = (j = d(a).jqGrid("getNodeParent", j)) && j.hasOwnProperty(e) ? j[e] : !0) || d(a.rows[b]).css("display", "none")), d(a.rows[b].cells[h]).find("div.treeclick").bind("click", function (b) {
                b =
                    d.jgrid.stripPref(a.p.idPrefix, d(b.target || b.srcElement, a.rows).closest("tr.jqgrow")[0].id);
                b = a.p._index[b];
                if (!a.p.data[b][i])if (a.p.data[b][e]) {
                    d(a).jqGrid("collapseRow", a.p.data[b]);
                    d(a).jqGrid("collapseNode", a.p.data[b])
                } else {
                    d(a).jqGrid("expandRow", a.p.data[b]);
                    d(a).jqGrid("expandNode", a.p.data[b])
                }
                return false
            }), !0 === a.p.ExpandColClick && d(a.rows[b].cells[h]).find("span.cell-wrapper").css("cursor", "pointer").bind("click", function (b) {
                var b = d.jgrid.stripPref(a.p.idPrefix, d(b.target || b.srcElement,
                    a.rows).closest("tr.jqgrow")[0].id), c = a.p._index[b];
                if (!a.p.data[c][i])if (a.p.data[c][e]) {
                    d(a).jqGrid("collapseRow", a.p.data[c]);
                    d(a).jqGrid("collapseNode", a.p.data[c])
                } else {
                    d(a).jqGrid("expandRow", a.p.data[c]);
                    d(a).jqGrid("expandNode", a.p.data[c])
                }
                d(a).jqGrid("setSelection", b);
                return false
            }), b++
        })
    }, setTreeGrid: function () {
        return this.each(function () {
            var b = this, c = 0, a = !1, h, e, i, g = [];
            if (b.p.treeGrid) {
                b.p.treedatatype || d.extend(b.p, {treedatatype: b.p.datatype});
                b.p.subGrid = !1;
                b.p.altRows = !1;
                b.p.pgbuttons = !1;
                b.p.pginput = !1;
                b.p.gridview = !0;
                null === b.p.rowTotal && (b.p.rowNum = 1E4);
                b.p.multiselect = !1;
                b.p.rowList = [];
                b.p.expColInd = 0;
                b.p.treeIcons = d.extend({plus: "ui-icon-triangle-1-" + ("rtl" === b.p.direction ? "w" : "e"), minus: "ui-icon-triangle-1-s", leaf: "ui-icon-radio-off"}, b.p.treeIcons || {});
                "nested" === b.p.treeGridModel ? b.p.treeReader = d.extend({level_field: "level", left_field: "lft", right_field: "rgt", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon"}, b.p.treeReader) : "adjacency" === b.p.treeGridModel &&
                    (b.p.treeReader = d.extend({level_field: "level", parent_id_field: "parent", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon"}, b.p.treeReader));
                for (e in b.p.colModel)if (b.p.colModel.hasOwnProperty(e))for (i in h = b.p.colModel[e].name, h === b.p.ExpandColumn && !a && (a = !0, b.p.expColInd = c), c++, b.p.treeReader)b.p.treeReader.hasOwnProperty(i) && b.p.treeReader[i] === h && g.push(h);
                d.each(b.p.treeReader, function (a, e) {
                    if (e && d.inArray(e, g) === -1) {
                        if (a === "leaf_field")b.p._treeleafpos = c;
                        c++;
                        b.p.colNames.push(e);
                        b.p.colModel.push({name: e, width: 1, hidden: true, sortable: false, resizable: false, hidedlg: true, editable: true, search: false})
                    }
                })
            }
        })
    }, expandRow: function (b) {
        this.each(function () {
            var c = this;
            if (c.grid && c.p.treeGrid) {
                var a = d(c).jqGrid("getNodeChildren", b), h = c.p.treeReader.expanded_field, e = c.rows;
                d(a).each(function () {
                    var a = c.p.idPrefix + d.jgrid.getAccessor(this, c.p.localReader.id);
                    d(e.namedItem(a)).css("display", "");
                    this[h] && d(c).jqGrid("expandRow", this)
                })
            }
        })
    }, collapseRow: function (b) {
        this.each(function () {
            var c =
                this;
            if (c.grid && c.p.treeGrid) {
                var a = d(c).jqGrid("getNodeChildren", b), h = c.p.treeReader.expanded_field, e = c.rows;
                d(a).each(function () {
                    var a = c.p.idPrefix + d.jgrid.getAccessor(this, c.p.localReader.id);
                    d(e.namedItem(a)).css("display", "none");
                    this[h] && d(c).jqGrid("collapseRow", this)
                })
            }
        })
    }, getRootNodes: function () {
        var b = [];
        this.each(function () {
            var c = this;
            if (c.grid && c.p.treeGrid)switch (c.p.treeGridModel) {
                case "nested":
                    var a = c.p.treeReader.level_field;
                    d(c.p.data).each(function () {
                        parseInt(this[a], 10) === parseInt(c.p.tree_root_level,
                            10) && b.push(this)
                    });
                    break;
                case "adjacency":
                    var h = c.p.treeReader.parent_id_field;
                    d(c.p.data).each(function () {
                        (null === this[h] || "null" === ("" + this[h]).toLowerCase()) && b.push(this)
                    })
            }
        });
        return b
    }, getNodeDepth: function (b) {
        var c = null;
        this.each(function () {
            if (this.grid && this.p.treeGrid)switch (this.p.treeGridModel) {
                case "nested":
                    c = parseInt(b[this.p.treeReader.level_field], 10) - parseInt(this.p.tree_root_level, 10);
                    break;
                case "adjacency":
                    c = d(this).jqGrid("getNodeAncestors", b).length
            }
        });
        return c
    }, getNodeParent: function (b) {
        var c =
            null;
        this.each(function () {
            var a = this;
            if (a.grid && a.p.treeGrid)switch (a.p.treeGridModel) {
                case "nested":
                    var h = a.p.treeReader.left_field, e = a.p.treeReader.right_field, i = a.p.treeReader.level_field, g = parseInt(b[h], 10), f = parseInt(b[e], 10), l = parseInt(b[i], 10);
                    d(this.p.data).each(function () {
                        if (parseInt(this[i], 10) === l - 1 && parseInt(this[h], 10) < g && parseInt(this[e], 10) > f)return c = this, !1
                    });
                    break;
                case "adjacency":
                    var k = a.p.treeReader.parent_id_field, m = a.p.localReader.id;
                    d(this.p.data).each(function () {
                        if (this[m] ===
                            d.jgrid.stripPref(a.p.idPrefix, b[k]))return c = this, !1
                    })
            }
        });
        return c
    }, getNodeChildren: function (b) {
        var c = [];
        this.each(function () {
            var a = this;
            if (a.grid && a.p.treeGrid)switch (a.p.treeGridModel) {
                case "nested":
                    var h = a.p.treeReader.left_field, e = a.p.treeReader.right_field, i = a.p.treeReader.level_field, g = parseInt(b[h], 10), f = parseInt(b[e], 10), l = parseInt(b[i], 10);
                    d(this.p.data).each(function () {
                        parseInt(this[i], 10) === l + 1 && parseInt(this[h], 10) > g && parseInt(this[e], 10) < f && c.push(this)
                    });
                    break;
                case "adjacency":
                    var k =
                        a.p.treeReader.parent_id_field, m = a.p.localReader.id;
                    d(this.p.data).each(function () {
                        this[k] == d.jgrid.stripPref(a.p.idPrefix, b[m]) && c.push(this)
                    })
            }
        });
        return c
    }, getFullTreeNode: function (b) {
        var c = [];
        this.each(function () {
            var a = this, h;
            if (a.grid && a.p.treeGrid)switch (a.p.treeGridModel) {
                case "nested":
                    var e = a.p.treeReader.left_field, i = a.p.treeReader.right_field, g = a.p.treeReader.level_field, f = parseInt(b[e], 10), l = parseInt(b[i], 10), k = parseInt(b[g], 10);
                    d(this.p.data).each(function () {
                        parseInt(this[g], 10) >= k && parseInt(this[e],
                            10) >= f && parseInt(this[e], 10) <= l && c.push(this)
                    });
                    break;
                case "adjacency":
                    if (b) {
                        c.push(b);
                        var m = a.p.treeReader.parent_id_field, n = a.p.localReader.id;
                        d(this.p.data).each(function (b) {
                            h = c.length;
                            for (b = 0; b < h; b++)if (d.jgrid.stripPref(a.p.idPrefix, c[b][n]) === this[m]) {
                                c.push(this);
                                break
                            }
                        })
                    }
            }
        });
        return c
    }, getNodeAncestors: function (b) {
        var c = [];
        this.each(function () {
            if (this.grid && this.p.treeGrid)for (var a = d(this).jqGrid("getNodeParent", b); a;)c.push(a), a = d(this).jqGrid("getNodeParent", a)
        });
        return c
    }, isVisibleNode: function (b) {
        var c =
            !0;
        this.each(function () {
            if (this.grid && this.p.treeGrid) {
                var a = d(this).jqGrid("getNodeAncestors", b), h = this.p.treeReader.expanded_field;
                d(a).each(function () {
                    c = c && this[h];
                    if (!c)return!1
                })
            }
        });
        return c
    }, isNodeLoaded: function (b) {
        var c;
        this.each(function () {
            if (this.grid && this.p.treeGrid) {
                var a = this.p.treeReader.leaf_field;
                c = void 0 !== b ? void 0 !== b.loaded ? b.loaded : b[a] || 0 < d(this).jqGrid("getNodeChildren", b).length ? !0 : !1 : !1
            }
        });
        return c
    }, expandNode: function (b) {
        return this.each(function () {
            if (this.grid && this.p.treeGrid) {
                var c =
                    this.p.treeReader.expanded_field, a = this.p.treeReader.parent_id_field, h = this.p.treeReader.loaded, e = this.p.treeReader.level_field, i = this.p.treeReader.left_field, g = this.p.treeReader.right_field;
                if (!b[c]) {
                    var f = d.jgrid.getAccessor(b, this.p.localReader.id), l = d("#" + this.p.idPrefix + d.jgrid.jqID(f), this.grid.bDiv)[0], k = this.p._index[f];
                    d(this).jqGrid("isNodeLoaded", this.p.data[k]) ? (b[c] = !0, d("div.treeclick", l).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus")) :
                        this.grid.hDiv.loading || (b[c] = !0, d("div.treeclick", l).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus"), this.p.treeANode = l.rowIndex, this.p.datatype = this.p.treedatatype, "nested" === this.p.treeGridModel ? d(this).jqGrid("setGridParam", {postData: {nodeid: f, n_left: b[i], n_right: b[g], n_level: b[e]}}) : d(this).jqGrid("setGridParam", {postData: {nodeid: f, parentid: b[a], n_level: b[e]}}), d(this).trigger("reloadGrid"), b[h] = !0, "nested" === this.p.treeGridModel ? d(this).jqGrid("setGridParam",
                            {postData: {nodeid: "", n_left: "", n_right: "", n_level: ""}}) : d(this).jqGrid("setGridParam", {postData: {nodeid: "", parentid: "", n_level: ""}}))
                }
            }
        })
    }, collapseNode: function (b) {
        return this.each(function () {
            if (this.grid && this.p.treeGrid) {
                var c = this.p.treeReader.expanded_field;
                b[c] && (b[c] = !1, c = d.jgrid.getAccessor(b, this.p.localReader.id), c = d("#" + this.p.idPrefix + d.jgrid.jqID(c), this.grid.bDiv)[0], d("div.treeclick", c).removeClass(this.p.treeIcons.minus + " tree-minus").addClass(this.p.treeIcons.plus + " tree-plus"))
            }
        })
    },
        SortTree: function (b, c, a, h) {
            return this.each(function () {
                if (this.grid && this.p.treeGrid) {
                    var e, i, g, f = [], l = this, k;
                    e = d(this).jqGrid("getRootNodes");
                    e = d.jgrid.from(e);
                    e.orderBy(b, c, a, h);
                    k = e.select();
                    e = 0;
                    for (i = k.length; e < i; e++)g = k[e], f.push(g), d(this).jqGrid("collectChildrenSortTree", f, g, b, c, a, h);
                    d.each(f, function (a) {
                        var b = d.jgrid.getAccessor(this, l.p.localReader.id);
                        d("#" + d.jgrid.jqID(l.p.id) + " tbody tr:eq(" + a + ")").after(d("tr#" + d.jgrid.jqID(b), l.grid.bDiv))
                    });
                    f = k = e = null
                }
            })
        }, collectChildrenSortTree: function (b, c, a, h, e, i) {
            return this.each(function () {
                if (this.grid && this.p.treeGrid) {
                    var g, f, l, k;
                    g = d(this).jqGrid("getNodeChildren", c);
                    g = d.jgrid.from(g);
                    g.orderBy(a, h, e, i);
                    k = g.select();
                    g = 0;
                    for (f = k.length; g < f; g++)l = k[g], b.push(l), d(this).jqGrid("collectChildrenSortTree", b, l, a, h, e, i)
                }
            })
        }, setTreeRow: function (b, c) {
            var a = !1;
            this.each(function () {
                this.grid && this.p.treeGrid && (a = d(this).jqGrid("setRowData", b, c))
            });
            return a
        }, delTreeNode: function (b) {
            return this.each(function () {
                var c = this.p.localReader.id, a, h = this.p.treeReader.left_field,
                    e = this.p.treeReader.right_field, i, g, f;
                if (this.grid && this.p.treeGrid && (a = this.p._index[b], void 0 !== a)) {
                    i = parseInt(this.p.data[a][e], 10);
                    g = i - parseInt(this.p.data[a][h], 10) + 1;
                    var l = d(this).jqGrid("getFullTreeNode", this.p.data[a]);
                    if (0 < l.length)for (a = 0; a < l.length; a++)d(this).jqGrid("delRowData", l[a][c]);
                    if ("nested" === this.p.treeGridModel) {
                        c = d.jgrid.from(this.p.data).greater(h, i, {stype: "integer"}).select();
                        if (c.length)for (f in c)c.hasOwnProperty(f) && (c[f][h] = parseInt(c[f][h], 10) - g);
                        c = d.jgrid.from(this.p.data).greater(e,
                            i, {stype: "integer"}).select();
                        if (c.length)for (f in c)c.hasOwnProperty(f) && (c[f][e] = parseInt(c[f][e], 10) - g)
                    }
                }
            })
        }, addChildNode: function (b, c, a, h) {
            var e = this[0];
            if (a) {
                var i = e.p.treeReader.expanded_field, g = e.p.treeReader.leaf_field, f = e.p.treeReader.level_field, l = e.p.treeReader.parent_id_field, k = e.p.treeReader.left_field, m = e.p.treeReader.right_field, n = e.p.treeReader.loaded, j, r, q, t, p;
                j = 0;
                var s = c, u;
                void 0 === h && (h = !1);
                if (void 0 === b || null === b) {
                    p = e.p.data.length - 1;
                    if (0 <= p)for (; 0 <= p;)j = Math.max(j, parseInt(e.p.data[p][e.p.localReader.id],
                        10)), p--;
                    b = j + 1
                }
                var v = d(e).jqGrid("getInd", c);
                u = !1;
                if (void 0 === c || null === c || "" === c)s = c = null, j = "last", t = e.p.tree_root_level, p = e.p.data.length + 1; else if (j = "after", r = e.p._index[c], q = e.p.data[r], c = q[e.p.localReader.id], t = parseInt(q[f], 10) + 1, p = d(e).jqGrid("getFullTreeNode", q), p.length ? (s = p = p[p.length - 1][e.p.localReader.id], p = d(e).jqGrid("getInd", s) + 1) : p = d(e).jqGrid("getInd", c) + 1, q[g])u = !0, q[i] = !0, d(e.rows[v]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass(e.p.treeIcons.leaf +
                    " tree-leaf").addClass(e.p.treeIcons.minus + " tree-minus"), e.p.data[r][g] = !1, q[n] = !0;
                r = p + 1;
                void 0 === a[i] && (a[i] = !1);
                void 0 === a[n] && (a[n] = !1);
                a[f] = t;
                void 0 === a[g] && (a[g] = !0);
                "adjacency" === e.p.treeGridModel && (a[l] = c);
                if ("nested" === e.p.treeGridModel) {
                    var o;
                    if (null !== c) {
                        g = parseInt(q[m], 10);
                        f = d.jgrid.from(e.p.data);
                        f = f.greaterOrEquals(m, g, {stype: "integer"});
                        f = f.select();
                        if (f.length)for (o in f)f.hasOwnProperty(o) && (f[o][k] = f[o][k] > g ? parseInt(f[o][k], 10) + 2 : f[o][k], f[o][m] = f[o][m] >= g ? parseInt(f[o][m], 10) +
                            2 : f[o][m]);
                        a[k] = g;
                        a[m] = g + 1
                    } else {
                        g = parseInt(d(e).jqGrid("getCol", m, !1, "max"), 10);
                        f = d.jgrid.from(e.p.data).greater(k, g, {stype: "integer"}).select();
                        if (f.length)for (o in f)f.hasOwnProperty(o) && (f[o][k] = parseInt(f[o][k], 10) + 2);
                        f = d.jgrid.from(e.p.data).greater(m, g, {stype: "integer"}).select();
                        if (f.length)for (o in f)f.hasOwnProperty(o) && (f[o][m] = parseInt(f[o][m], 10) + 2);
                        a[k] = g + 1;
                        a[m] = g + 2
                    }
                }
                if (null === c || d(e).jqGrid("isNodeLoaded", q) || u)d(e).jqGrid("addRowData", b, a, j, s), d(e).jqGrid("setTreeNode", p, r);
                q && !q[i] &&
                    h && d(e.rows[v]).find("div.treeclick").click()
            }
        }})
})(jQuery);
(function (c) {
    c.jgrid.extend({jqGridImport: function (a) {
        a = c.extend({imptype: "xml", impstring: "", impurl: "", mtype: "GET", impData: {}, xmlGrid: {config: "roots>grid", data: "roots>rows"}, jsonGrid: {config: "grid", data: "data"}, ajaxOptions: {}}, a || {});
        return this.each(function () {
            var d = this, f = function (a, b) {
                var e = c(b.xmlGrid.config, a)[0], h = c(b.xmlGrid.data, a)[0], f, g;
                if (xmlJsonClass.xml2json && c.jgrid.parse) {
                    e = xmlJsonClass.xml2json(e, " ");
                    e = c.jgrid.parse(e);
                    for (g in e)e.hasOwnProperty(g) && (f = e[g]);
                    h ? (h = e.grid.datatype,
                        e.grid.datatype = "xmlstring", e.grid.datastr = a, c(d).jqGrid(f).jqGrid("setGridParam", {datatype: h})) : c(d).jqGrid(f)
                } else alert("xml2json or parse are not present")
            }, b = function (a, b) {
                if (a && "string" === typeof a) {
                    var e = !1;
                    c.jgrid.useJSON && (c.jgrid.useJSON = !1, e = !0);
                    var f = c.jgrid.parse(a);
                    e && (c.jgrid.useJSON = !0);
                    e = f[b.jsonGrid.config];
                    if (f = f[b.jsonGrid.data]) {
                        var g = e.datatype;
                        e.datatype = "jsonstring";
                        e.datastr = f;
                        c(d).jqGrid(e).jqGrid("setGridParam", {datatype: g})
                    } else c(d).jqGrid(e)
                }
            };
            switch (a.imptype) {
                case "xml":
                    c.ajax(c.extend({url: a.impurl,
                        type: a.mtype, data: a.impData, dataType: "xml", complete: function (b, g) {
                            "success" === g && (f(b.responseXML, a), c(d).triggerHandler("jqGridImportComplete", [b, a]), c.isFunction(a.importComplete) && a.importComplete(b))
                        }}, a.ajaxOptions));
                    break;
                case "xmlstring":
                    if (a.impstring && "string" === typeof a.impstring) {
                        var g = c.parseXML(a.impstring);
                        g && (f(g, a), c(d).triggerHandler("jqGridImportComplete", [g, a]), c.isFunction(a.importComplete) && a.importComplete(g), a.impstring = null);
                        g = null
                    }
                    break;
                case "json":
                    c.ajax(c.extend({url: a.impurl,
                        type: a.mtype, data: a.impData, dataType: "json", complete: function (f) {
                            try {
                                b(f.responseText, a), c(d).triggerHandler("jqGridImportComplete", [f, a]), c.isFunction(a.importComplete) && a.importComplete(f)
                            } catch (g) {
                            }
                        }}, a.ajaxOptions));
                    break;
                case "jsonstring":
                    a.impstring && "string" === typeof a.impstring && (b(a.impstring, a), c(d).triggerHandler("jqGridImportComplete", [a.impstring, a]), c.isFunction(a.importComplete) && a.importComplete(a.impstring), a.impstring = null)
            }
        })
    }, jqGridExport: function (a) {
        var a = c.extend({exptype: "xmlstring",
            root: "grid", ident: "\t"}, a || {}), d = null;
        this.each(function () {
            if (this.grid) {
                var f, b = c.extend(!0, {}, c(this).jqGrid("getGridParam"));
                b.rownumbers && (b.colNames.splice(0, 1), b.colModel.splice(0, 1));
                b.multiselect && (b.colNames.splice(0, 1), b.colModel.splice(0, 1));
                b.subGrid && (b.colNames.splice(0, 1), b.colModel.splice(0, 1));
                b.knv = null;
                if (b.treeGrid)for (f in b.treeReader)b.treeReader.hasOwnProperty(f) && (b.colNames.splice(b.colNames.length - 1), b.colModel.splice(b.colModel.length - 1));
                switch (a.exptype) {
                    case "xmlstring":
                        d =
                            "<" + a.root + ">" + xmlJsonClass.json2xml(b, a.ident) + "</" + a.root + ">";
                        break;
                    case "jsonstring":
                        d = "{" + xmlJsonClass.toJson(b, a.root, a.ident, !1) + "}", void 0 !== b.postData.filters && (d = d.replace(/filters":"/, 'filters":'), d = d.replace(/}]}"/, "}]}"))
                }
            }
        });
        return d
    }, excelExport: function (a) {
        a = c.extend({exptype: "remote", url: null, oper: "oper", tag: "excel", exportOptions: {}}, a || {});
        return this.each(function () {
            if (this.grid) {
                var d;
                "remote" === a.exptype && (d = c.extend({}, this.p.postData), d[a.oper] = a.tag, d = jQuery.param(d), d = -1 !==
                    a.url.indexOf("?") ? a.url + "&" + d : a.url + "?" + d, window.location = d)
            }
        })
    }})
})(jQuery);
var xmlJsonClass = {xml2json: function (a, b) {
    9 === a.nodeType && (a = a.documentElement);
    var g = this.toJson(this.toObj(this.removeWhite(a)), a.nodeName, "\t");
    return"{\n" + b + (b ? g.replace(/\t/g, b) : g.replace(/\t|\n/g, "")) + "\n}"
}, json2xml: function (a, b) {
    var g = function (a, b, e) {
        var d = "", f, i;
        if (a instanceof Array)if (0 === a.length)d += e + "<" + b + ">__EMPTY_ARRAY_</" + b + ">\n"; else {
            f = 0;
            for (i = a.length; f < i; f += 1)var l = e + g(a[f], b, e + "\t") + "\n", d = d + l
        } else if ("object" === typeof a) {
            f = !1;
            d += e + "<" + b;
            for (i in a)a.hasOwnProperty(i) && ("@" ===
                i.charAt(0) ? d += " " + i.substr(1) + '="' + a[i].toString() + '"' : f = !0);
            d += f ? ">" : "/>";
            if (f) {
                for (i in a)a.hasOwnProperty(i) && ("#text" === i ? d += a[i] : "#cdata" === i ? d += "<![CDATA[" + a[i] + "]]\>" : "@" !== i.charAt(0) && (d += g(a[i], i, e + "\t")));
                d += ("\n" === d.charAt(d.length - 1) ? e : "") + "</" + b + ">"
            }
        } else"function" === typeof a ? d += e + "<" + b + "><![CDATA[" + a + "]]\></" + b + ">" : (void 0 === a && (a = ""), d = '""' === a.toString() || 0 === a.toString().length ? d + (e + "<" + b + ">__EMPTY_STRING_</" + b + ">") : d + (e + "<" + b + ">" + a.toString() + "</" + b + ">"));
        return d
    }, f = "", e;
    for (e in a)a.hasOwnProperty(e) &&
    (f += g(a[e], e, ""));
    return b ? f.replace(/\t/g, b) : f.replace(/\t|\n/g, "")
}, toObj: function (a) {
    var b = {}, g = /function/i;
    if (1 === a.nodeType) {
        if (a.attributes.length) {
            var f;
            for (f = 0; f < a.attributes.length; f += 1)b["@" + a.attributes[f].nodeName] = (a.attributes[f].nodeValue || "").toString()
        }
        if (a.firstChild) {
            var e = f = 0, h = !1, c;
            for (c = a.firstChild; c; c = c.nextSibling)1 === c.nodeType ? h = !0 : 3 === c.nodeType && c.nodeValue.match(/[^ \f\n\r\t\v]/) ? f += 1 : 4 === c.nodeType && (e += 1);
            if (h)if (2 > f && 2 > e) {
                this.removeWhite(a);
                for (c = a.firstChild; c; c =
                    c.nextSibling)3 === c.nodeType ? b["#text"] = this.escape(c.nodeValue) : 4 === c.nodeType ? g.test(c.nodeValue) ? b[c.nodeName] = [b[c.nodeName], c.nodeValue] : b["#cdata"] = this.escape(c.nodeValue) : b[c.nodeName] ? b[c.nodeName]instanceof Array ? b[c.nodeName][b[c.nodeName].length] = this.toObj(c) : b[c.nodeName] = [b[c.nodeName], this.toObj(c)] : b[c.nodeName] = this.toObj(c)
            } else a.attributes.length ? b["#text"] = this.escape(this.innerXml(a)) : b = this.escape(this.innerXml(a)); else if (f)a.attributes.length ? b["#text"] = this.escape(this.innerXml(a)) :
                (b = this.escape(this.innerXml(a)), "__EMPTY_ARRAY_" === b ? b = "[]" : "__EMPTY_STRING_" === b && (b = "")); else if (e)if (1 < e)b = this.escape(this.innerXml(a)); else for (c = a.firstChild; c; c = c.nextSibling)if (g.test(a.firstChild.nodeValue)) {
                b = a.firstChild.nodeValue;
                break
            } else b["#cdata"] = this.escape(c.nodeValue)
        }
        !a.attributes.length && !a.firstChild && (b = null)
    } else 9 === a.nodeType ? b = this.toObj(a.documentElement) : alert("unhandled node type: " + a.nodeType);
    return b
}, toJson: function (a, b, g, f) {
    void 0 === f && (f = !0);
    var e = b ? '"' + b + '"' :
        "", h = "\t", c = "\n";
    f || (c = h = "");
    if ("[]" === a)e += b ? ":[]" : "[]"; else if (a instanceof Array) {
        var j, d, k = [];
        d = 0;
        for (j = a.length; d < j; d += 1)k[d] = this.toJson(a[d], "", g + h, f);
        e += (b ? ":[" : "[") + (1 < k.length ? c + g + h + k.join("," + c + g + h) + c + g : k.join("")) + "]"
    } else if (null === a)e += (b && ":") + "null"; else if ("object" === typeof a) {
        j = [];
        for (d in a)a.hasOwnProperty(d) && (j[j.length] = this.toJson(a[d], d, g + h, f));
        e += (b ? ":{" : "{") + (1 < j.length ? c + g + h + j.join("," + c + g + h) + c + g : j.join("")) + "}"
    } else e = "string" === typeof a ? e + ((b && ":") + '"' + a.replace(/\\/g,
        "\\\\").replace(/\"/g, '\\"') + '"') : e + ((b && ":") + a.toString());
    return e
}, innerXml: function (a) {
    var b = "";
    if ("innerHTML"in a)b = a.innerHTML; else for (var g = function (a) {
        var b = "", h;
        if (1 === a.nodeType) {
            b += "<" + a.nodeName;
            for (h = 0; h < a.attributes.length; h += 1)b += " " + a.attributes[h].nodeName + '="' + (a.attributes[h].nodeValue || "").toString() + '"';
            if (a.firstChild) {
                b += ">";
                for (h = a.firstChild; h; h = h.nextSibling)b += g(h);
                b += "</" + a.nodeName + ">"
            } else b += "/>"
        } else 3 === a.nodeType ? b += a.nodeValue : 4 === a.nodeType && (b += "<![CDATA[" + a.nodeValue +
            "]]\>");
        return b
    }, a = a.firstChild; a; a = a.nextSibling)b += g(a);
    return b
}, escape: function (a) {
    return a.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r")
}, removeWhite: function (a) {
    a.normalize();
    var b;
    for (b = a.firstChild; b;)if (3 === b.nodeType)if (b.nodeValue.match(/[^ \f\n\r\t\v]/))b = b.nextSibling; else {
        var g = b.nextSibling;
        a.removeChild(b);
        b = g
    } else 1 === b.nodeType && this.removeWhite(b), b = b.nextSibling;
    return a
}};
function tableToGrid(j, k) {
    jQuery(j).each(function () {
        if (!this.grid) {
            jQuery(this).width("99%");
            var b = jQuery(this).width(), c = jQuery("tr td:first-child input[type=checkbox]:first", jQuery(this)), a = jQuery("tr td:first-child input[type=radio]:first", jQuery(this)), c = 0 < c.length, a = !c && 0 < a.length, i = c || a, d = [], e = [];
            jQuery("th", jQuery(this)).each(function () {
                0 === d.length && i ? (d.push({name: "__selection__", index: "__selection__", width: 0, hidden: !0}), e.push("__selection__")) : (d.push({name: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"),
                    index: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"), width: jQuery(this).width() || 150}), e.push(jQuery(this).html()))
            });
            var f = [], g = [], h = [];
            jQuery("tbody > tr", jQuery(this)).each(function () {
                var b = {}, a = 0;
                jQuery("td", jQuery(this)).each(function () {
                    if (0 === a && i) {
                        var c = jQuery("input", jQuery(this)), e = c.attr("value");
                        g.push(e || f.length);
                        c.is(":checked") && h.push(e);
                        b[d[a].name] = c.attr("value")
                    } else b[d[a].name] = jQuery(this).html();
                    a++
                });
                0 < a && f.push(b)
            });
            jQuery(this).empty();
            jQuery(this).addClass("scroll");
            jQuery(this).jqGrid(jQuery.extend({datatype: "local", width: b, colNames: e, colModel: d, multiselect: c}, k || {}));
            for (b = 0; b < f.length; b++)a = null, 0 < g.length && (a = g[b]) && a.replace && (a = encodeURIComponent(a).replace(/[.\-%]/g, "_")), null === a && (a = b + 1), jQuery(this).jqGrid("addRowData", a, f[b]);
            for (b = 0; b < h.length; b++)jQuery(this).jqGrid("setSelection", h[b])
        }
    })
};
(function (b) {
    b.jgrid.msie && 8 === b.jgrid.msiever() && (b.expr[":"].hidden = function (b) {
        return 0 === b.offsetWidth || 0 === b.offsetHeight || "none" === b.style.display
    });
    b.jgrid._multiselect = !1;
    if (b.ui && b.ui.multiselect) {
        if (b.ui.multiselect.prototype._setSelected) {
            var o = b.ui.multiselect.prototype._setSelected;
            b.ui.multiselect.prototype._setSelected = function (a, d) {
                var c = o.call(this, a, d);
                if (d && this.selectedList) {
                    var e = this.element;
                    this.selectedList.find("li").each(function () {
                        b(this).data("optionLink") && b(this).data("optionLink").remove().appendTo(e)
                    })
                }
                return c
            }
        }
        b.ui.multiselect.prototype.destroy &&
        (b.ui.multiselect.prototype.destroy = function () {
            this.element.show();
            this.container.remove();
            b.Widget === void 0 ? b.widget.prototype.destroy.apply(this, arguments) : b.Widget.prototype.destroy.apply(this, arguments)
        });
        b.jgrid._multiselect = !0
    }
    b.jgrid.extend({sortableColumns: function (a) {
        return this.each(function () {
            function d() {
                c.p.disableClick = true
            }

            var c = this, e = b.jgrid.jqID(c.p.id), e = {tolerance: "pointer", axis: "x", scrollSensitivity: "1", items: ">th:not(:has(#jqgh_" + e + "_cb,#jqgh_" + e + "_rn,#jqgh_" + e + "_subgrid),:hidden)",
                placeholder: {element: function (a) {
                    return b(document.createElement(a[0].nodeName)).addClass(a[0].className + " ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0]
                }, update: function (b, a) {
                    a.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10));
                    a.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                }}, update: function (a, e) {
                    var d = b(e.item).parent(), d = b(">th", d), f = {}, g = c.p.id + "_";
                    b.each(c.p.colModel, function (b) {
                        f[this.name] = b
                    });
                    var j = [];
                    d.each(function () {
                        var a = b(">div", this).get(0).id.replace(/^jqgh_/, "").replace(g, "");
                        f.hasOwnProperty(a) && j.push(f[a])
                    });
                    b(c).jqGrid("remapColumns", j, true, true);
                    b.isFunction(c.p.sortable.update) && c.p.sortable.update(j);
                    setTimeout(function () {
                        c.p.disableClick = false
                    }, 50)
                }};
            if (c.p.sortable.options)b.extend(e, c.p.sortable.options); else if (b.isFunction(c.p.sortable))c.p.sortable = {update: c.p.sortable};
            if (e.start) {
                var g = e.start;
                e.start = function (b, a) {
                    d();
                    g.call(this, b, a)
                }
            } else e.start = d;
            if (c.p.sortable.exclude)e.items = e.items + (":not(" + c.p.sortable.exclude + ")");
            a.sortable(e).data("sortable").floating = true
        })
    }, columnChooser: function (a) {
        function d(a, c) {
            a && (typeof a === "string" ? b.fn[a] && b.fn[a].apply(c, b.makeArray(arguments).slice(2)) : b.isFunction(a) && a.apply(c, b.makeArray(arguments).slice(2)))
        }

        var c = this;
        if (!b("#colchooser_" + b.jgrid.jqID(c[0].p.id)).length) {
            var e = b('<div id="colchooser_' + c[0].p.id + '" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>'),
                g = b("select", e), a = b.extend({width: 420, height: 240, classname: null, done: function (b) {
                    b && c.jqGrid("remapColumns", b, true)
                }, msel: "multiselect", dlog: "dialog", dialog_opts: {minWidth: 470}, dlog_opts: function (a) {
                    var c = {};
                    c[a.bSubmit] = function () {
                        a.apply_perm();
                        a.cleanup(false)
                    };
                    c[a.bCancel] = function () {
                        a.cleanup(true)
                    };
                    return b.extend(true, {buttons: c, close: function () {
                        a.cleanup(true)
                    }, modal: a.modal || false, resizable: a.resizable || true, width: a.width + 20}, a.dialog_opts || {})
                }, apply_perm: function () {
                    b("option", g).each(function () {
                        this.selected ?
                            c.jqGrid("showCol", i[this.value].name) : c.jqGrid("hideCol", i[this.value].name)
                    });
                    var e = [];
                    b("option:selected", g).each(function () {
                        e.push(parseInt(this.value, 10))
                    });
                    b.each(e, function () {
                        delete m[i[parseInt(this, 10)].name]
                    });
                    b.each(m, function () {
                        var b = parseInt(this, 10);
                        var a = e, c = b;
                        if (c >= 0) {
                            var d = a.slice(), i = d.splice(c, Math.max(a.length - c, c));
                            if (c > a.length)c = a.length;
                            d[c] = b;
                            e = d.concat(i)
                        } else e = void 0
                    });
                    a.done && a.done.call(c, e)
                }, cleanup: function (b) {
                    d(a.dlog, e, "destroy");
                    d(a.msel, g, "destroy");
                    e.remove();
                    b && a.done && a.done.call(c)
                }, msel_opts: {}}, b.jgrid.col, a || {});
            if (b.ui && b.ui.multiselect && a.msel === "multiselect") {
                if (!b.jgrid._multiselect) {
                    alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
                    return
                }
                a.msel_opts = b.extend(b.ui.multiselect.defaults, a.msel_opts)
            }
            a.caption && e.attr("title", a.caption);
            if (a.classname) {
                e.addClass(a.classname);
                g.addClass(a.classname)
            }
            if (a.width) {
                b(">div", e).css({width: a.width, margin: "0 auto"});
                g.css("width", a.width)
            }
            if (a.height) {
                b(">div",
                    e).css("height", a.height);
                g.css("height", a.height - 10)
            }
            var i = c.jqGrid("getGridParam", "colModel"), q = c.jqGrid("getGridParam", "colNames"), m = {}, f = [];
            g.empty();
            b.each(i, function (a) {
                m[this.name] = a;
                this.hidedlg ? this.hidden || f.push(a) : g.append("<option value='" + a + "' " + (this.hidden ? "" : "selected='selected'") + ">" + b.jgrid.stripHtml(q[a]) + "</option>")
            });
            var n = b.isFunction(a.dlog_opts) ? a.dlog_opts.call(c, a) : a.dlog_opts;
            d(a.dlog, e, n);
            n = b.isFunction(a.msel_opts) ? a.msel_opts.call(c, a) : a.msel_opts;
            d(a.msel, g, n)
        }
    }, sortableRows: function (a) {
        return this.each(function () {
            var d =
                this;
            if (d.grid && !d.p.treeGrid && b.fn.sortable) {
                a = b.extend({cursor: "move", axis: "y", items: ".jqgrow"}, a || {});
                if (a.start && b.isFunction(a.start)) {
                    a._start_ = a.start;
                    delete a.start
                } else a._start_ = false;
                if (a.update && b.isFunction(a.update)) {
                    a._update_ = a.update;
                    delete a.update
                } else a._update_ = false;
                a.start = function (c, e) {
                    b(e.item).css("border-width", "0px");
                    b("td", e.item).each(function (b) {
                        this.style.width = d.grid.cols[b].style.width
                    });
                    if (d.p.subGrid) {
                        var g = b(e.item).attr("id");
                        try {
                            b(d).jqGrid("collapseSubGridRow",
                                g)
                        } catch (i) {
                        }
                    }
                    a._start_ && a._start_.apply(this, [c, e])
                };
                a.update = function (c, e) {
                    b(e.item).css("border-width", "");
                    d.p.rownumbers === true && b("td.jqgrid-rownum", d.rows).each(function (a) {
                        b(this).html(a + 1 + (parseInt(d.p.page, 10) - 1) * parseInt(d.p.rowNum, 10))
                    });
                    a._update_ && a._update_.apply(this, [c, e])
                };
                b("tbody:first", d).sortable(a);
                b("tbody:first", d).disableSelection()
            }
        })
    }, gridDnD: function (a) {
        return this.each(function () {
            function d() {
                var a = b.data(c, "dnd");
                b("tr.jqgrow:not(.ui-draggable)", c).draggable(b.isFunction(a.drag) ?
                    a.drag.call(b(c), a) : a.drag)
            }

            var c = this, e, g;
            if (c.grid && !c.p.treeGrid && b.fn.draggable && b.fn.droppable) {
                b("#jqgrid_dnd")[0] === void 0 && b("body").append("<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>");
                if (typeof a === "string" && a === "updateDnD" && c.p.jqgdnd === true)d(); else {
                    a = b.extend({drag: function (a) {
                        return b.extend({start: function (e, d) {
                            var f;
                            if (c.p.subGrid) {
                                f = b(d.helper).attr("id");
                                try {
                                    b(c).jqGrid("collapseSubGridRow", f)
                                } catch (g) {
                                }
                            }
                            for (f = 0; f < b.data(c, "dnd").connectWith.length; f++)b(b.data(c, "dnd").connectWith[f]).jqGrid("getGridParam",
                                "reccount") === 0 && b(b.data(c, "dnd").connectWith[f]).jqGrid("addRowData", "jqg_empty_row", {});
                            d.helper.addClass("ui-state-highlight");
                            b("td", d.helper).each(function (b) {
                                this.style.width = c.grid.headers[b].width + "px"
                            });
                            a.onstart && b.isFunction(a.onstart) && a.onstart.call(b(c), e, d)
                        }, stop: function (e, d) {
                            var f;
                            if (d.helper.dropped && !a.dragcopy) {
                                f = b(d.helper).attr("id");
                                f === void 0 && (f = b(this).attr("id"));
                                b(c).jqGrid("delRowData", f)
                            }
                            for (f = 0; f < b.data(c, "dnd").connectWith.length; f++)b(b.data(c, "dnd").connectWith[f]).jqGrid("delRowData",
                                "jqg_empty_row");
                            a.onstop && b.isFunction(a.onstop) && a.onstop.call(b(c), e, d)
                        }}, a.drag_opts || {})
                    }, drop: function (a) {
                        return b.extend({accept: function (a) {
                            if (!b(a).hasClass("jqgrow"))return a;
                            a = b(a).closest("table.ui-jqgrid-btable");
                            if (a.length > 0 && b.data(a[0], "dnd") !== void 0) {
                                a = b.data(a[0], "dnd").connectWith;
                                return b.inArray("#" + b.jgrid.jqID(this.id), a) !== -1 ? true : false
                            }
                            return false
                        }, drop: function (e, d) {
                            if (b(d.draggable).hasClass("jqgrow")) {
                                var f = b(d.draggable).attr("id"), f = d.draggable.parent().parent().jqGrid("getRowData",
                                    f);
                                if (!a.dropbyname) {
                                    var g = 0, j = {}, h, l, p = b("#" + b.jgrid.jqID(this.id)).jqGrid("getGridParam", "colModel");
                                    try {
                                        for (l in f)if (f.hasOwnProperty(l)) {
                                            h = p[g].name;
                                            h === "cb" || h === "rn" || h === "subgrid" || f.hasOwnProperty(l) && p[g] && (j[h] = f[l]);
                                            g++
                                        }
                                        f = j
                                    } catch (o) {
                                    }
                                }
                                d.helper.dropped = true;
                                if (a.beforedrop && b.isFunction(a.beforedrop)) {
                                    h = a.beforedrop.call(this, e, d, f, b("#" + b.jgrid.jqID(c.p.id)), b(this));
                                    h !== void 0 && h !== null && typeof h === "object" && (f = h)
                                }
                                if (d.helper.dropped) {
                                    var k;
                                    if (a.autoid)if (b.isFunction(a.autoid))k = a.autoid.call(this,
                                        f); else {
                                        k = Math.ceil(Math.random() * 1E3);
                                        k = a.autoidprefix + k
                                    }
                                    b("#" + b.jgrid.jqID(this.id)).jqGrid("addRowData", k, f, a.droppos)
                                }
                                a.ondrop && b.isFunction(a.ondrop) && a.ondrop.call(this, e, d, f)
                            }
                        }}, a.drop_opts || {})
                    }, onstart: null, onstop: null, beforedrop: null, ondrop: null, drop_opts: {activeClass: "ui-state-active", hoverClass: "ui-state-hover"}, drag_opts: {revert: "invalid", helper: "clone", cursor: "move", appendTo: "#jqgrid_dnd", zIndex: 5E3}, dragcopy: false, dropbyname: false, droppos: "first", autoid: true, autoidprefix: "dnd_"}, a ||
                    {});
                    if (a.connectWith) {
                        a.connectWith = a.connectWith.split(",");
                        a.connectWith = b.map(a.connectWith, function (a) {
                            return b.trim(a)
                        });
                        b.data(c, "dnd", a);
                        c.p.reccount !== 0 && !c.p.jqgdnd && d();
                        c.p.jqgdnd = true;
                        for (e = 0; e < a.connectWith.length; e++) {
                            g = a.connectWith[e];
                            b(g).droppable(b.isFunction(a.drop) ? a.drop.call(b(c), a) : a.drop)
                        }
                    }
                }
            }
        })
    }, gridResize: function (a) {
        return this.each(function () {
            var d = this, c = b.jgrid.jqID(d.p.id);
            if (d.grid && b.fn.resizable) {
                a = b.extend({}, a || {});
                if (a.alsoResize) {
                    a._alsoResize_ = a.alsoResize;
                    delete a.alsoResize
                } else a._alsoResize_ =
                    false;
                if (a.stop && b.isFunction(a.stop)) {
                    a._stop_ = a.stop;
                    delete a.stop
                } else a._stop_ = false;
                a.stop = function (e, g) {
                    b(d).jqGrid("setGridParam", {height: b("#gview_" + c + " .ui-jqgrid-bdiv").height()});
                    b(d).jqGrid("setGridWidth", g.size.width, a.shrinkToFit);
                    a._stop_ && a._stop_.call(d, e, g)
                };
                a.alsoResize = a._alsoResize_ ? eval("(" + ("{'#gview_" + c + " .ui-jqgrid-bdiv':true,'" + a._alsoResize_ + "':true}") + ")") : b(".ui-jqgrid-bdiv", "#gview_" + c);
                delete a._alsoResize_;
                b("#gbox_" + c).resizable(a)
            }
        })
    }})
})(jQuery);
;
(function ($) {
    /**
     * jqGrid Brazilian-Portuguese Translation
     * Sergio Righi sergio.righi@gmail.com
     * http://curve.com.br
     *
     * Updated by Jonnas Fonini
     * http://fonini.net
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl.html
     **/
    $.jgrid = $.jgrid || {};
    $.extend($.jgrid, {
        defaults: {
            recordtext: "Ver {0} - {1} de {2}",
            emptyrecords: "Nenhum registro para visualizar",
            loadtext: "Carregando...",
            pgtext: "Página {0} de {1}"
        },
        search: {
            caption: "Procurar...",
            Find: "Procurar",
            Reset: "Resetar",
//	    odata: [{ oper:'eq', text:"igual"},{ oper:'ne', text:"diferente"},{ oper:'lt', text:"menor"},{ oper:'le', text:"menor ou igual"},{ oper:'gt', text:"maior"},{ oper:'ge', text:"maior ou igual"},{ oper:'bw', text:"inicia com"},{ oper:'bn', text:"não inicia com"},{ oper:'in', text:"está em"},{ oper:'ni', text:"não está em"},{ oper:'ew', text:"termina com"},{ oper:'en', text:"não termina com"},{ oper:'cn', text:"contém"},{ oper:'nc', text:"não contém"},{ oper:'nu', text:"nulo"},{ oper:'nn', text:"não nulo"}],
            odata: [
                { oper: 'eq', text: "igual"}
            ],
            groupOps: [
                { op: "AND", text: "all" },
                { op: "OR", text: "any" }
            ]
        },
        edit: {
            addCaption: "Incluir",
            editCaption: "Alterar",
            bSubmit: "Enviar",
            bCancel: "Cancelar",
            bClose: "Fechar",
            saveData: "Os dados foram alterados! Salvar alterações?",
            bYes: "Sim",
            bNo: "Não",
            bExit: "Cancelar",
            msg: {
                required: "Campo obrigatório",
                number: "Por favor, informe um número válido",
                minValue: "valor deve ser igual ou maior que ",
                maxValue: "valor deve ser menor ou igual a",
                email: "este e-mail não é válido",
                integer: "Por favor, informe um valor inteiro",
                date: "Por favor, informe uma data válida",
                url: "não é uma URL válida. Prefixo obrigatório ('http://' or 'https://')",
                nodefined: " não está definido!",
                novalue: " um valor de retorno é obrigatório!",
                customarray: "Função customizada deve retornar um array!",
                customfcheck: "Função customizada deve estar presente em caso de validação customizada!"
            }
        },
        view: {
            caption: "Ver Registro",
            bClose: "Fechar"
        },
        del: {
            caption: "Apagar",
            msg: "Apagar registro(s) selecionado(s)?",
            bSubmit: "Apagar",
            bCancel: "Cancelar"
        },
        nav: {
            edittext: " ",
            edittitle: "Alterar registro selecionado",
            addtext: " ",
            addtitle: "Incluir novo registro",
            deltext: " ",
            deltitle: "Apagar registro selecionado",
            searchtext: " ",
            searchtitle: "Procurar registros",
            refreshtext: "",
            refreshtitle: "Recarregando tabela",
            alertcap: "Aviso",
            alerttext: "Por favor, selecione um registro",
            viewtext: "",
            viewtitle: "Ver linha selecionada"
        },
        col: {
            caption: "Mostrar/Esconder Colunas",
            bSubmit: "Enviar",
            bCancel: "Cancelar"
        },
        errors: {
            errcap: "Erro",
            nourl: "Nenhuma URL definida",
            norecords: "Sem registros para exibir",
            model: "Comprimento de colNames <> colModel!"
        },
        formatter: {
            integer: {thousandsSeparator: " ", defaultValue: '0'},
            number: {decimalSeparator: ",", thousandsSeparator: " ", decimalPlaces: 2, defaultValue: '0,00'},
            currency: {decimalSeparator: ",", thousandsSeparator: ".", decimalPlaces: 2, prefix: "R$ ", suffix: "", defaultValue: '0,00'},
            date: {
                dayNames: [
                    "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb",
                    "Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"
                ],
                monthNames: [
                    "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez",
                    "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
                ],
                AmPm: ["am", "pm", "AM", "PM"],
                S: function (j) {
                    return j < 11 || j > 13 ? ['º', 'º', 'º', 'º'][Math.min((j - 1) % 10, 3)] : 'º'
                },
                srcformat: 'Y-m-d',
                newformat: 'd/m/Y',
                parseRe: /[Tt\\\/:_;.,\t\s-]/,
                masks: {
                    ISO8601Long: "Y-m-d H:i:s",
                    ISO8601Short: "Y-m-d",
                    ShortDate: "n/j/Y",
                    LongDate: "l, F d, Y",
                    FullDateTime: "l, F d, Y g:i:s A",
                    MonthDay: "F d",
                    ShortTime: "g:i A",
                    LongTime: "g:i:s A",
                    SortableDateTime: "Y-m-d\\TH:i:s",
                    UniversalSortableDateTime: "Y-m-d H:i:sO",
                    YearMonth: "F, Y"
                },
                reformatAfterEdit: false
            },
            baseLinkUrl: '',
            showAction: '',
            target: '',
            checkbox: {disabled: true},
            idName: 'id'
        }
    });
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (L) {
    var u;
    L.fn.emptyForce = function () {
        for (var ah = 0, ai; (ai = L(this)[ah]) != null; ah++) {
            if (ai.nodeType === 1) {
                L.cleanData(ai.getElementsByTagName("*"))
            }
            if (L.jqplot.use_excanvas) {
                ai.outerHTML = ""
            } else {
                while (ai.firstChild) {
                    ai.removeChild(ai.firstChild)
                }
            }
            ai = null
        }
        return L(this)
    };
    L.fn.removeChildForce = function (ah) {
        while (ah.firstChild) {
            this.removeChildForce(ah.firstChild);
            ah.removeChild(ah.firstChild)
        }
    };
    L.fn.jqplot = function () {
        var ah = [];
        var aj = [];
        for (var ak = 0, ai = arguments.length; ak < ai; ak++) {
            if (L.isArray(arguments[ak])) {
                ah.push(arguments[ak])
            } else {
                if (L.isPlainObject(arguments[ak])) {
                    aj.push(arguments[ak])
                }
            }
        }
        return this.each(function (an) {
            var at, ar, aq = L(this), am = ah.length, al = aj.length, ap, ao;
            if (an < am) {
                ap = ah[an]
            } else {
                ap = am ? ah[am - 1] : null
            }
            if (an < al) {
                ao = aj[an]
            } else {
                ao = al ? aj[al - 1] : null
            }
            at = aq.attr("id");
            if (at === u) {
                at = "jqplot_target_" + L.jqplot.targetCounter++;
                aq.attr("id", at)
            }
            ar = L.jqplot(at, ap, ao);
            aq.data("jqplot", ar)
        })
    };
    L.jqplot = function (an, ak, ai) {
        var aj = null, ah = null;
        if (arguments.length === 3) {
            aj = ak;
            ah = ai
        } else {
            if (arguments.length === 2) {
                if (L.isArray(ak)) {
                    aj = ak
                } else {
                    if (L.isPlainObject(ak)) {
                        ah = ak
                    }
                }
            }
        }
        if (aj === null && ah !== null && ah.data) {
            aj = ah.data
        }
        var am = new R();
        L("#" + an).removeClass("jqplot-error");
        if (L.jqplot.config.catchErrors) {
            try {
                am.init(an, aj, ah);
                am.draw();
                am.themeEngine.init.call(am);
                return am
            } catch (al) {
                var ao = L.jqplot.config.errorMessage || al.message;
                L("#" + an).append('<div class="jqplot-error-message">' + ao + "</div>");
                L("#" + an).addClass("jqplot-error");
                document.getElementById(an).style.background = L.jqplot.config.errorBackground;
                document.getElementById(an).style.border = L.jqplot.config.errorBorder;
                document.getElementById(an).style.fontFamily = L.jqplot.config.errorFontFamily;
                document.getElementById(an).style.fontSize = L.jqplot.config.errorFontSize;
                document.getElementById(an).style.fontStyle = L.jqplot.config.errorFontStyle;
                document.getElementById(an).style.fontWeight = L.jqplot.config.errorFontWeight
            }
        } else {
            am.init(an, aj, ah);
            am.draw();
            am.themeEngine.init.call(am);
            return am
        }
    };
    L.jqplot.version = "1.0.8";
    L.jqplot.revision = "1250";
    L.jqplot.targetCounter = 1;
    L.jqplot.CanvasManager = function () {
        if (typeof L.jqplot.CanvasManager.canvases == "undefined") {
            L.jqplot.CanvasManager.canvases = [];
            L.jqplot.CanvasManager.free = []
        }
        var ah = [];
        this.getCanvas = function () {
            var ak;
            var aj = true;
            if (!L.jqplot.use_excanvas) {
                for (var al = 0, ai = L.jqplot.CanvasManager.canvases.length; al < ai; al++) {
                    if (L.jqplot.CanvasManager.free[al] === true) {
                        aj = false;
                        ak = L.jqplot.CanvasManager.canvases[al];
                        L.jqplot.CanvasManager.free[al] = false;
                        ah.push(al);
                        break
                    }
                }
            }
            if (aj) {
                ak = document.createElement("canvas");
                ah.push(L.jqplot.CanvasManager.canvases.length);
                L.jqplot.CanvasManager.canvases.push(ak);
                L.jqplot.CanvasManager.free.push(false)
            }
            return ak
        };
        this.initCanvas = function (ai) {
            if (L.jqplot.use_excanvas) {
                return window.G_vmlCanvasManager.initElement(ai)
            }
            return ai
        };
        this.freeAllCanvases = function () {
            for (var aj = 0, ai = ah.length; aj < ai; aj++) {
                this.freeCanvas(ah[aj])
            }
            ah = []
        };
        this.freeCanvas = function (ai) {
            if (L.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== u) {
                window.G_vmlCanvasManager.uninitElement(L.jqplot.CanvasManager.canvases[ai]);
                L.jqplot.CanvasManager.canvases[ai] = null
            } else {
                var aj = L.jqplot.CanvasManager.canvases[ai];
                aj.getContext("2d").clearRect(0, 0, aj.width, aj.height);
                L(aj).unbind().removeAttr("class").removeAttr("style");
                L(aj).css({left: "", top: "", position: ""});
                aj.width = 0;
                aj.height = 0;
                L.jqplot.CanvasManager.free[ai] = true
            }
        }
    };
    L.jqplot.log = function () {
        if (window.console) {
            window.console.log.apply(window.console, arguments)
        }
    };
    L.jqplot.config = {addDomReference: false, enablePlugins: false, defaultHeight: 300, defaultWidth: 400, UTCAdjust: false, timezoneOffset: new Date(new Date().getTimezoneOffset() * 60000), errorMessage: "", errorBackground: "", errorBorder: "", errorFontFamily: "", errorFontSize: "", errorFontStyle: "", errorFontWeight: "", catchErrors: false, defaultTickFormatString: "%.1f", defaultColors: ["#4bb2c5", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7"], defaultNegativeColors: ["#498991", "#C08840", "#9F9274", "#546D61", "#646C4A", "#6F6621", "#6E3F5F", "#4F64B0", "#A89050", "#C45923", "#187399", "#945381", "#959E5C", "#C7AF7B", "#478396", "#907294"], dashLength: 4, gapLength: 4, dotGapLength: 2.5, srcLocation: "jqplot/src/", pluginLocation: "jqplot/src/plugins/"};
    L.jqplot.arrayMax = function (ah) {
        return Math.max.apply(Math, ah)
    };
    L.jqplot.arrayMin = function (ah) {
        return Math.min.apply(Math, ah)
    };
    L.jqplot.enablePlugins = L.jqplot.config.enablePlugins;
    L.jqplot.support_canvas = function () {
        if (typeof L.jqplot.support_canvas.result == "undefined") {
            L.jqplot.support_canvas.result = !!document.createElement("canvas").getContext
        }
        return L.jqplot.support_canvas.result
    };
    L.jqplot.support_canvas_text = function () {
        if (typeof L.jqplot.support_canvas_text.result == "undefined") {
            if (window.G_vmlCanvasManager !== u && window.G_vmlCanvasManager._version > 887) {
                L.jqplot.support_canvas_text.result = true
            } else {
                L.jqplot.support_canvas_text.result = !!(document.createElement("canvas").getContext && typeof document.createElement("canvas").getContext("2d").fillText == "function")
            }
        }
        return L.jqplot.support_canvas_text.result
    };
    L.jqplot.use_excanvas = ((!L.support.boxModel || !L.support.objectAll || !$support.leadingWhitespace) && !L.jqplot.support_canvas()) ? true : false;
    L.jqplot.preInitHooks = [];
    L.jqplot.postInitHooks = [];
    L.jqplot.preParseOptionsHooks = [];
    L.jqplot.postParseOptionsHooks = [];
    L.jqplot.preDrawHooks = [];
    L.jqplot.postDrawHooks = [];
    L.jqplot.preDrawSeriesHooks = [];
    L.jqplot.postDrawSeriesHooks = [];
    L.jqplot.preDrawLegendHooks = [];
    L.jqplot.addLegendRowHooks = [];
    L.jqplot.preSeriesInitHooks = [];
    L.jqplot.postSeriesInitHooks = [];
    L.jqplot.preParseSeriesOptionsHooks = [];
    L.jqplot.postParseSeriesOptionsHooks = [];
    L.jqplot.eventListenerHooks = [];
    L.jqplot.preDrawSeriesShadowHooks = [];
    L.jqplot.postDrawSeriesShadowHooks = [];
    L.jqplot.ElemContainer = function () {
        this._elem;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height: null, width: null}
    };
    L.jqplot.ElemContainer.prototype.createElement = function (ak, am, ai, aj, an) {
        this._offsets = am;
        var ah = ai || "jqplot";
        var al = document.createElement(ak);
        this._elem = L(al);
        this._elem.addClass(ah);
        this._elem.css(aj);
        this._elem.attr(an);
        al = null;
        return this._elem
    };
    L.jqplot.ElemContainer.prototype.getWidth = function () {
        if (this._elem) {
            return this._elem.outerWidth(true)
        } else {
            return null
        }
    };
    L.jqplot.ElemContainer.prototype.getHeight = function () {
        if (this._elem) {
            return this._elem.outerHeight(true)
        } else {
            return null
        }
    };
    L.jqplot.ElemContainer.prototype.getPosition = function () {
        if (this._elem) {
            return this._elem.position()
        } else {
            return{top: null, left: null, bottom: null, right: null}
        }
    };
    L.jqplot.ElemContainer.prototype.getTop = function () {
        return this.getPosition().top
    };
    L.jqplot.ElemContainer.prototype.getLeft = function () {
        return this.getPosition().left
    };
    L.jqplot.ElemContainer.prototype.getBottom = function () {
        return this._elem.css("bottom")
    };
    L.jqplot.ElemContainer.prototype.getRight = function () {
        return this._elem.css("right")
    };
    function w(ah) {
        L.jqplot.ElemContainer.call(this);
        this.name = ah;
        this._series = [];
        this.show = false;
        this.tickRenderer = L.jqplot.AxisTickRenderer;
        this.tickOptions = {};
        this.labelRenderer = L.jqplot.AxisLabelRenderer;
        this.labelOptions = {};
        this.label = null;
        this.showLabel = true;
        this.min = null;
        this.max = null;
        this.autoscale = false;
        this.pad = 1.2;
        this.padMax = null;
        this.padMin = null;
        this.ticks = [];
        this.numberTicks;
        this.tickInterval;
        this.renderer = L.jqplot.LinearAxisRenderer;
        this.rendererOptions = {};
        this.showTicks = true;
        this.showTickMarks = true;
        this.showMinorTicks = true;
        this.drawMajorGridlines = true;
        this.drawMinorGridlines = false;
        this.drawMajorTickMarks = true;
        this.drawMinorTickMarks = true;
        this.useSeriesColor = false;
        this.borderWidth = null;
        this.borderColor = null;
        this.scaleToHiddenSeries = false;
        this._dataBounds = {min: null, max: null};
        this._intervalStats = [];
        this._offsets = {min: null, max: null};
        this._ticks = [];
        this._label = null;
        this.syncTicks = null;
        this.tickSpacing = 75;
        this._min = null;
        this._max = null;
        this._tickInterval = null;
        this._numberTicks = null;
        this.__ticks = null;
        this._options = {}
    }

    w.prototype = new L.jqplot.ElemContainer();
    w.prototype.constructor = w;
    w.prototype.init = function () {
        if (L.isFunction(this.renderer)) {
            this.renderer = new this.renderer()
        }
        this.tickOptions.axis = this.name;
        if (this.tickOptions.showMark == null) {
            this.tickOptions.showMark = this.showTicks
        }
        if (this.tickOptions.showMark == null) {
            this.tickOptions.showMark = this.showTickMarks
        }
        if (this.tickOptions.showLabel == null) {
            this.tickOptions.showLabel = this.showTicks
        }
        if (this.label == null || this.label == "") {
            this.showLabel = false
        } else {
            this.labelOptions.label = this.label
        }
        if (this.showLabel == false) {
            this.labelOptions.show = false
        }
        if (this.pad == 0) {
            this.pad = 1
        }
        if (this.padMax == 0) {
            this.padMax = 1
        }
        if (this.padMin == 0) {
            this.padMin = 1
        }
        if (this.padMax == null) {
            this.padMax = (this.pad - 1) / 2 + 1
        }
        if (this.padMin == null) {
            this.padMin = (this.pad - 1) / 2 + 1
        }
        this.pad = this.padMax + this.padMin - 1;
        if (this.min != null || this.max != null) {
            this.autoscale = false
        }
        if (this.syncTicks == null && this.name.indexOf("y") > -1) {
            this.syncTicks = true
        } else {
            if (this.syncTicks == null) {
                this.syncTicks = false
            }
        }
        this.renderer.init.call(this, this.rendererOptions)
    };
    w.prototype.draw = function (ah, ai) {
        if (this.__ticks) {
            this.__ticks = null
        }
        return this.renderer.draw.call(this, ah, ai)
    };
    w.prototype.set = function () {
        this.renderer.set.call(this)
    };
    w.prototype.pack = function (ai, ah) {
        if (this.show) {
            this.renderer.pack.call(this, ai, ah)
        }
        if (this._min == null) {
            this._min = this.min;
            this._max = this.max;
            this._tickInterval = this.tickInterval;
            this._numberTicks = this.numberTicks;
            this.__ticks = this._ticks
        }
    };
    w.prototype.reset = function () {
        this.renderer.reset.call(this)
    };
    w.prototype.resetScale = function (ah) {
        L.extend(true, this, {min: null, max: null, numberTicks: null, tickInterval: null, _ticks: [], ticks: []}, ah);
        this.resetDataBounds()
    };
    w.prototype.resetDataBounds = function () {
        var ao = this._dataBounds;
        ao.min = null;
        ao.max = null;
        var ai, ap, am;
        var aj = (this.show) ? true : false;
        for (var al = 0; al < this._series.length; al++) {
            ap = this._series[al];
            if (ap.show || this.scaleToHiddenSeries) {
                am = ap._plotData;
                if (ap._type === "line" && ap.renderer.bands.show && this.name.charAt(0) !== "x") {
                    am = [
                        [0, ap.renderer.bands._min],
                        [1, ap.renderer.bands._max]
                    ]
                }
                var ah = 1, an = 1;
                if (ap._type != null && ap._type == "ohlc") {
                    ah = 3;
                    an = 2
                }
                for (var ak = 0, ai = am.length; ak < ai; ak++) {
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        if ((am[ak][0] != null && am[ak][0] < ao.min) || ao.min == null) {
                            ao.min = am[ak][0]
                        }
                        if ((am[ak][0] != null && am[ak][0] > ao.max) || ao.max == null) {
                            ao.max = am[ak][0]
                        }
                    } else {
                        if ((am[ak][ah] != null && am[ak][ah] < ao.min) || ao.min == null) {
                            ao.min = am[ak][ah]
                        }
                        if ((am[ak][an] != null && am[ak][an] > ao.max) || ao.max == null) {
                            ao.max = am[ak][an]
                        }
                    }
                }
                if (aj && ap.renderer.constructor !== L.jqplot.BarRenderer) {
                    aj = false
                } else {
                    if (aj && this._options.hasOwnProperty("forceTickAt0") && this._options.forceTickAt0 == false) {
                        aj = false
                    } else {
                        if (aj && ap.renderer.constructor === L.jqplot.BarRenderer) {
                            if (ap.barDirection == "vertical" && this.name != "xaxis" && this.name != "x2axis") {
                                if (this._options.pad != null || this._options.padMin != null) {
                                    aj = false
                                }
                            } else {
                                if (ap.barDirection == "horizontal" && (this.name == "xaxis" || this.name == "x2axis")) {
                                    if (this._options.pad != null || this._options.padMin != null) {
                                        aj = false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (aj && this.renderer.constructor === L.jqplot.LinearAxisRenderer && ao.min >= 0) {
            this.padMin = 1;
            this.forceTickAt0 = true
        }
    };
    function q(ah) {
        L.jqplot.ElemContainer.call(this);
        this.show = false;
        this.location = "ne";
        this.labels = [];
        this.showLabels = true;
        this.showSwatches = true;
        this.placement = "insideGrid";
        this.xoffset = 0;
        this.yoffset = 0;
        this.border;
        this.background;
        this.textColor;
        this.fontFamily;
        this.fontSize;
        this.rowSpacing = "0.5em";
        this.renderer = L.jqplot.TableLegendRenderer;
        this.rendererOptions = {};
        this.preDraw = false;
        this.marginTop = null;
        this.marginRight = null;
        this.marginBottom = null;
        this.marginLeft = null;
        this.escapeHtml = false;
        this._series = [];
        L.extend(true, this, ah)
    }

    q.prototype = new L.jqplot.ElemContainer();
    q.prototype.constructor = q;
    q.prototype.setOptions = function (ah) {
        L.extend(true, this, ah);
        if (this.placement == "inside") {
            this.placement = "insideGrid"
        }
        if (this.xoffset > 0) {
            if (this.placement == "insideGrid") {
                switch (this.location) {
                    case"nw":
                    case"w":
                    case"sw":
                        if (this.marginLeft == null) {
                            this.marginLeft = this.xoffset + "px"
                        }
                        this.marginRight = "0px";
                        break;
                    case"ne":
                    case"e":
                    case"se":
                    default:
                        if (this.marginRight == null) {
                            this.marginRight = this.xoffset + "px"
                        }
                        this.marginLeft = "0px";
                        break
                }
            } else {
                if (this.placement == "outside") {
                    switch (this.location) {
                        case"nw":
                        case"w":
                        case"sw":
                            if (this.marginRight == null) {
                                this.marginRight = this.xoffset + "px"
                            }
                            this.marginLeft = "0px";
                            break;
                        case"ne":
                        case"e":
                        case"se":
                        default:
                            if (this.marginLeft == null) {
                                this.marginLeft = this.xoffset + "px"
                            }
                            this.marginRight = "0px";
                            break
                    }
                }
            }
            this.xoffset = 0
        }
        if (this.yoffset > 0) {
            if (this.placement == "outside") {
                switch (this.location) {
                    case"sw":
                    case"s":
                    case"se":
                        if (this.marginTop == null) {
                            this.marginTop = this.yoffset + "px"
                        }
                        this.marginBottom = "0px";
                        break;
                    case"ne":
                    case"n":
                    case"nw":
                    default:
                        if (this.marginBottom == null) {
                            this.marginBottom = this.yoffset + "px"
                        }
                        this.marginTop = "0px";
                        break
                }
            } else {
                if (this.placement == "insideGrid") {
                    switch (this.location) {
                        case"sw":
                        case"s":
                        case"se":
                            if (this.marginBottom == null) {
                                this.marginBottom = this.yoffset + "px"
                            }
                            this.marginTop = "0px";
                            break;
                        case"ne":
                        case"n":
                        case"nw":
                        default:
                            if (this.marginTop == null) {
                                this.marginTop = this.yoffset + "px"
                            }
                            this.marginBottom = "0px";
                            break
                    }
                }
            }
            this.yoffset = 0
        }
    };
    q.prototype.init = function () {
        if (L.isFunction(this.renderer)) {
            this.renderer = new this.renderer()
        }
        this.renderer.init.call(this, this.rendererOptions)
    };
    q.prototype.draw = function (ai, aj) {
        for (var ah = 0; ah < L.jqplot.preDrawLegendHooks.length; ah++) {
            L.jqplot.preDrawLegendHooks[ah].call(this, ai)
        }
        return this.renderer.draw.call(this, ai, aj)
    };
    q.prototype.pack = function (ah) {
        this.renderer.pack.call(this, ah)
    };
    function y(ah) {
        L.jqplot.ElemContainer.call(this);
        this.text = ah;
        this.show = true;
        this.fontFamily;
        this.fontSize;
        this.textAlign;
        this.textColor;
        this.renderer = L.jqplot.DivTitleRenderer;
        this.rendererOptions = {};
        this.escapeHtml = false
    }

    y.prototype = new L.jqplot.ElemContainer();
    y.prototype.constructor = y;
    y.prototype.init = function () {
        if (L.isFunction(this.renderer)) {
            this.renderer = new this.renderer()
        }
        this.renderer.init.call(this, this.rendererOptions)
    };
    y.prototype.draw = function (ah) {
        return this.renderer.draw.call(this, ah)
    };
    y.prototype.pack = function () {
        this.renderer.pack.call(this)
    };
    function S(ah) {
        ah = ah || {};
        L.jqplot.ElemContainer.call(this);
        this.show = true;
        this.xaxis = "xaxis";
        this._xaxis;
        this.yaxis = "yaxis";
        this._yaxis;
        this.gridBorderWidth = 2;
        this.renderer = L.jqplot.LineRenderer;
        this.rendererOptions = {};
        this.data = [];
        this.gridData = [];
        this.label = "";
        this.showLabel = true;
        this.color;
        this.negativeColor;
        this.lineWidth = 2.5;
        this.lineJoin = "round";
        this.lineCap = "round";
        this.linePattern = "solid";
        this.shadow = true;
        this.shadowAngle = 45;
        this.shadowOffset = 1.25;
        this.shadowDepth = 3;
        this.shadowAlpha = "0.1";
        this.breakOnNull = false;
        this.markerRenderer = L.jqplot.MarkerRenderer;
        this.markerOptions = {};
        this.showLine = true;
        this.showMarker = true;
        this.index;
        this.fill = false;
        this.fillColor;
        this.fillAlpha;
        this.fillAndStroke = false;
        this.disableStack = false;
        this._stack = false;
        this.neighborThreshold = 4;
        this.fillToZero = false;
        this.fillToValue = 0;
        this.fillAxis = "y";
        this.useNegativeColors = true;
        this._stackData = [];
        this._plotData = [];
        this._plotValues = {x: [], y: []};
        this._intervals = {x: {}, y: {}};
        this._prevPlotData = [];
        this._prevGridData = [];
        this._stackAxis = "y";
        this._primaryAxis = "_xaxis";
        this.canvas = new L.jqplot.GenericCanvas();
        this.shadowCanvas = new L.jqplot.GenericCanvas();
        this.plugins = {};
        this._sumy = 0;
        this._sumx = 0;
        this._type = ""
    }

    S.prototype = new L.jqplot.ElemContainer();
    S.prototype.constructor = S;
    S.prototype.init = function (ak, ao, am) {
        this.index = ak;
        this.gridBorderWidth = ao;
        var an = this.data;
        var aj = [], al, ah;
        for (al = 0, ah = an.length; al < ah; al++) {
            if (!this.breakOnNull) {
                if (an[al] == null || an[al][0] == null || an[al][1] == null) {
                    continue
                } else {
                    aj.push(an[al])
                }
            } else {
                aj.push(an[al])
            }
        }
        this.data = aj;
        if (!this.color) {
            this.color = am.colorGenerator.get(this.index)
        }
        if (!this.negativeColor) {
            this.negativeColor = am.negativeColorGenerator.get(this.index)
        }
        if (!this.fillColor) {
            this.fillColor = this.color
        }
        if (this.fillAlpha) {
            var ai = L.jqplot.normalize2rgb(this.fillColor);
            var ai = L.jqplot.getColorComponents(ai);
            this.fillColor = "rgba(" + ai[0] + "," + ai[1] + "," + ai[2] + "," + this.fillAlpha + ")"
        }
        if (L.isFunction(this.renderer)) {
            this.renderer = new this.renderer()
        }
        this.renderer.init.call(this, this.rendererOptions, am);
        this.markerRenderer = new this.markerRenderer();
        if (!this.markerOptions.color) {
            this.markerOptions.color = this.color
        }
        if (this.markerOptions.show == null) {
            this.markerOptions.show = this.showMarker
        }
        this.showMarker = this.markerOptions.show;
        this.markerRenderer.init(this.markerOptions)
    };
    S.prototype.draw = function (an, ak, am) {
        var ai = (ak == u) ? {} : ak;
        an = (an == u) ? this.canvas._ctx : an;
        var ah, al, aj;
        for (ah = 0; ah < L.jqplot.preDrawSeriesHooks.length; ah++) {
            L.jqplot.preDrawSeriesHooks[ah].call(this, an, ai)
        }
        if (this.show) {
            this.renderer.setGridData.call(this, am);
            if (!ai.preventJqPlotSeriesDrawTrigger) {
                L(an.canvas).trigger("jqplotSeriesDraw", [this.data, this.gridData])
            }
            al = [];
            if (ai.data) {
                al = ai.data
            } else {
                if (!this._stack) {
                    al = this.data
                } else {
                    al = this._plotData
                }
            }
            aj = ai.gridData || this.renderer.makeGridData.call(this, al, am);
            if (this._type === "line" && this.renderer.smooth && this.renderer._smoothedData.length) {
                aj = this.renderer._smoothedData
            }
            this.renderer.draw.call(this, an, aj, ai, am)
        }
        for (ah = 0; ah < L.jqplot.postDrawSeriesHooks.length; ah++) {
            L.jqplot.postDrawSeriesHooks[ah].call(this, an, ai, am)
        }
        an = ak = am = ah = al = aj = null
    };
    S.prototype.drawShadow = function (an, ak, am) {
        var ai = (ak == u) ? {} : ak;
        an = (an == u) ? this.shadowCanvas._ctx : an;
        var ah, al, aj;
        for (ah = 0; ah < L.jqplot.preDrawSeriesShadowHooks.length; ah++) {
            L.jqplot.preDrawSeriesShadowHooks[ah].call(this, an, ai)
        }
        if (this.shadow) {
            this.renderer.setGridData.call(this, am);
            al = [];
            if (ai.data) {
                al = ai.data
            } else {
                if (!this._stack) {
                    al = this.data
                } else {
                    al = this._plotData
                }
            }
            aj = ai.gridData || this.renderer.makeGridData.call(this, al, am);
            this.renderer.drawShadow.call(this, an, aj, ai, am)
        }
        for (ah = 0; ah < L.jqplot.postDrawSeriesShadowHooks.length; ah++) {
            L.jqplot.postDrawSeriesShadowHooks[ah].call(this, an, ai)
        }
        an = ak = am = ah = al = aj = null
    };
    S.prototype.toggleDisplay = function (ai, ak) {
        var ah, aj;
        if (ai.data.series) {
            ah = ai.data.series
        } else {
            ah = this
        }
        if (ai.data.speed) {
            aj = ai.data.speed
        }
        if (aj) {
            if (ah.canvas._elem.is(":hidden") || !ah.show) {
                ah.show = true;
                ah.canvas._elem.removeClass("jqplot-series-hidden");
                if (ah.shadowCanvas._elem) {
                    ah.shadowCanvas._elem.fadeIn(aj)
                }
                ah.canvas._elem.fadeIn(aj, ak);
                ah.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + ah.index).fadeIn(aj)
            } else {
                ah.show = false;
                ah.canvas._elem.addClass("jqplot-series-hidden");
                if (ah.shadowCanvas._elem) {
                    ah.shadowCanvas._elem.fadeOut(aj)
                }
                ah.canvas._elem.fadeOut(aj, ak);
                ah.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + ah.index).fadeOut(aj)
            }
        } else {
            if (ah.canvas._elem.is(":hidden") || !ah.show) {
                ah.show = true;
                ah.canvas._elem.removeClass("jqplot-series-hidden");
                if (ah.shadowCanvas._elem) {
                    ah.shadowCanvas._elem.show()
                }
                ah.canvas._elem.show(0, ak);
                ah.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + ah.index).show()
            } else {
                ah.show = false;
                ah.canvas._elem.addClass("jqplot-series-hidden");
                if (ah.shadowCanvas._elem) {
                    ah.shadowCanvas._elem.hide()
                }
                ah.canvas._elem.hide(0, ak);
                ah.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + ah.index).hide()
            }
        }
    };
    function M() {
        L.jqplot.ElemContainer.call(this);
        this.drawGridlines = true;
        this.gridLineColor = "#cccccc";
        this.gridLineWidth = 1;
        this.background = "#fffdf6";
        this.borderColor = "#999999";
        this.borderWidth = 2;
        this.drawBorder = true;
        this.shadow = true;
        this.shadowAngle = 45;
        this.shadowOffset = 1.5;
        this.shadowWidth = 3;
        this.shadowDepth = 3;
        this.shadowColor = null;
        this.shadowAlpha = "0.07";
        this._left;
        this._top;
        this._right;
        this._bottom;
        this._width;
        this._height;
        this._axes = [];
        this.renderer = L.jqplot.CanvasGridRenderer;
        this.rendererOptions = {};
        this._offsets = {top: null, bottom: null, left: null, right: null}
    }

    M.prototype = new L.jqplot.ElemContainer();
    M.prototype.constructor = M;
    M.prototype.init = function () {
        if (L.isFunction(this.renderer)) {
            this.renderer = new this.renderer()
        }
        this.renderer.init.call(this, this.rendererOptions)
    };
    M.prototype.createElement = function (ah, ai) {
        this._offsets = ah;
        return this.renderer.createElement.call(this, ai)
    };
    M.prototype.draw = function () {
        this.renderer.draw.call(this)
    };
    L.jqplot.GenericCanvas = function () {
        L.jqplot.ElemContainer.call(this);
        this._ctx
    };
    L.jqplot.GenericCanvas.prototype = new L.jqplot.ElemContainer();
    L.jqplot.GenericCanvas.prototype.constructor = L.jqplot.GenericCanvas;
    L.jqplot.GenericCanvas.prototype.createElement = function (al, aj, ai, am) {
        this._offsets = al;
        var ah = "jqplot";
        if (aj != u) {
            ah = aj
        }
        var ak;
        ak = am.canvasManager.getCanvas();
        if (ai != null) {
            this._plotDimensions = ai
        }
        ak.width = this._plotDimensions.width - this._offsets.left - this._offsets.right;
        ak.height = this._plotDimensions.height - this._offsets.top - this._offsets.bottom;
        this._elem = L(ak);
        this._elem.css({position: "absolute", left: this._offsets.left, top: this._offsets.top});
        this._elem.addClass(ah);
        ak = am.canvasManager.initCanvas(ak);
        ak = null;
        return this._elem
    };
    L.jqplot.GenericCanvas.prototype.setContext = function () {
        this._ctx = this._elem.get(0).getContext("2d");
        return this._ctx
    };
    L.jqplot.GenericCanvas.prototype.resetCanvas = function () {
        if (this._elem) {
            if (L.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== u) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0))
            }
            this._elem.emptyForce()
        }
        this._ctx = null
    };
    L.jqplot.HooksManager = function () {
        this.hooks = [];
        this.args = []
    };
    L.jqplot.HooksManager.prototype.addOnce = function (ak, ai) {
        ai = ai || [];
        var al = false;
        for (var aj = 0, ah = this.hooks.length; aj < ah; aj++) {
            if (this.hooks[aj] == ak) {
                al = true
            }
        }
        if (!al) {
            this.hooks.push(ak);
            this.args.push(ai)
        }
    };
    L.jqplot.HooksManager.prototype.add = function (ai, ah) {
        ah = ah || [];
        this.hooks.push(ai);
        this.args.push(ah)
    };
    L.jqplot.EventListenerManager = function () {
        this.hooks = []
    };
    L.jqplot.EventListenerManager.prototype.addOnce = function (al, ak) {
        var am = false, aj, ai;
        for (var ai = 0, ah = this.hooks.length; ai < ah; ai++) {
            aj = this.hooks[ai];
            if (aj[0] == al && aj[1] == ak) {
                am = true
            }
        }
        if (!am) {
            this.hooks.push([al, ak])
        }
    };
    L.jqplot.EventListenerManager.prototype.add = function (ai, ah) {
        this.hooks.push([ai, ah])
    };
    var U = ["yMidAxis", "xaxis", "yaxis", "x2axis", "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis"];

    function R() {
        this.animate = false;
        this.animateReplot = false;
        this.axes = {xaxis: new w("xaxis"), yaxis: new w("yaxis"), x2axis: new w("x2axis"), y2axis: new w("y2axis"), y3axis: new w("y3axis"), y4axis: new w("y4axis"), y5axis: new w("y5axis"), y6axis: new w("y6axis"), y7axis: new w("y7axis"), y8axis: new w("y8axis"), y9axis: new w("y9axis"), yMidAxis: new w("yMidAxis")};
        this.baseCanvas = new L.jqplot.GenericCanvas();
        this.captureRightClick = false;
        this.data = [];
        this.dataRenderer;
        this.dataRendererOptions;
        this.defaults = {axesDefaults: {}, axes: {xaxis: {}, yaxis: {}, x2axis: {}, y2axis: {}, y3axis: {}, y4axis: {}, y5axis: {}, y6axis: {}, y7axis: {}, y8axis: {}, y9axis: {}, yMidAxis: {}}, seriesDefaults: {}, series: []};
        this.defaultAxisStart = 1;
        this.drawIfHidden = false;
        this.eventCanvas = new L.jqplot.GenericCanvas();
        this.fillBetween = {series1: null, series2: null, color: null, baseSeries: 0, fill: true};
        this.fontFamily;
        this.fontSize;
        this.grid = new M();
        this.legend = new q();
        this.noDataIndicator = {show: false, indicator: "Loading Data...", axes: {xaxis: {min: 0, max: 10, tickInterval: 2, show: true}, yaxis: {min: 0, max: 12, tickInterval: 3, show: true}}};
        this.negativeSeriesColors = L.jqplot.config.defaultNegativeColors;
        this.options = {};
        this.previousSeriesStack = [];
        this.plugins = {};
        this.series = [];
        this.seriesStack = [];
        this.seriesColors = L.jqplot.config.defaultColors;
        this.sortData = true;
        this.stackSeries = false;
        this.syncXTicks = true;
        this.syncYTicks = true;
        this.target = null;
        this.targetId = null;
        this.textColor;
        this.title = new y();
        this._drawCount = 0;
        this._sumy = 0;
        this._sumx = 0;
        this._stackData = [];
        this._plotData = [];
        this._width = null;
        this._height = null;
        this._plotDimensions = {height: null, width: null};
        this._gridPadding = {top: null, right: null, bottom: null, left: null};
        this._defaultGridPadding = {top: 10, right: 10, bottom: 23, left: 10};
        this._addDomReference = L.jqplot.config.addDomReference;
        this.preInitHooks = new L.jqplot.HooksManager();
        this.postInitHooks = new L.jqplot.HooksManager();
        this.preParseOptionsHooks = new L.jqplot.HooksManager();
        this.postParseOptionsHooks = new L.jqplot.HooksManager();
        this.preDrawHooks = new L.jqplot.HooksManager();
        this.postDrawHooks = new L.jqplot.HooksManager();
        this.preDrawSeriesHooks = new L.jqplot.HooksManager();
        this.postDrawSeriesHooks = new L.jqplot.HooksManager();
        this.preDrawLegendHooks = new L.jqplot.HooksManager();
        this.addLegendRowHooks = new L.jqplot.HooksManager();
        this.preSeriesInitHooks = new L.jqplot.HooksManager();
        this.postSeriesInitHooks = new L.jqplot.HooksManager();
        this.preParseSeriesOptionsHooks = new L.jqplot.HooksManager();
        this.postParseSeriesOptionsHooks = new L.jqplot.HooksManager();
        this.eventListenerHooks = new L.jqplot.EventListenerManager();
        this.preDrawSeriesShadowHooks = new L.jqplot.HooksManager();
        this.postDrawSeriesShadowHooks = new L.jqplot.HooksManager();
        this.colorGenerator = new L.jqplot.ColorGenerator();
        this.negativeColorGenerator = new L.jqplot.ColorGenerator();
        this.canvasManager = new L.jqplot.CanvasManager();
        this.themeEngine = new L.jqplot.ThemeEngine();
        var aj = 0;
        this.init = function (av, ar, ay) {
            ay = ay || {};
            for (var at = 0; at < L.jqplot.preInitHooks.length; at++) {
                L.jqplot.preInitHooks[at].call(this, av, ar, ay)
            }
            for (var at = 0; at < this.preInitHooks.hooks.length; at++) {
                this.preInitHooks.hooks[at].call(this, av, ar, ay)
            }
            this.targetId = "#" + av;
            this.target = L("#" + av);
            if (this._addDomReference) {
                this.target.data("jqplot", this)
            }
            this.target.removeClass("jqplot-error");
            if (!this.target.get(0)) {
                throw new Error("No plot target specified")
            }
            if (this.target.css("position") == "static") {
                this.target.css("position", "relative")
            }
            if (!this.target.hasClass("jqplot-target")) {
                this.target.addClass("jqplot-target")
            }
            if (!this.target.height()) {
                var au;
                if (ay && ay.height) {
                    au = parseInt(ay.height, 10)
                } else {
                    if (this.target.attr("data-height")) {
                        au = parseInt(this.target.attr("data-height"), 10)
                    } else {
                        au = parseInt(L.jqplot.config.defaultHeight, 10)
                    }
                }
                this._height = au;
                this.target.css("height", au + "px")
            } else {
                this._height = au = this.target.height()
            }
            if (!this.target.width()) {
                var aw;
                if (ay && ay.width) {
                    aw = parseInt(ay.width, 10)
                } else {
                    if (this.target.attr("data-width")) {
                        aw = parseInt(this.target.attr("data-width"), 10)
                    } else {
                        aw = parseInt(L.jqplot.config.defaultWidth, 10)
                    }
                }
                this._width = aw;
                this.target.css("width", aw + "px")
            } else {
                this._width = aw = this.target.width()
            }
            for (var at = 0, ap = U.length; at < ap; at++) {
                this.axes[U[at]] = new w(U[at])
            }
            this._plotDimensions.height = this._height;
            this._plotDimensions.width = this._width;
            this.grid._plotDimensions = this._plotDimensions;
            this.title._plotDimensions = this._plotDimensions;
            this.baseCanvas._plotDimensions = this._plotDimensions;
            this.eventCanvas._plotDimensions = this._plotDimensions;
            this.legend._plotDimensions = this._plotDimensions;
            if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {
                throw new Error("Canvas dimension not set")
            }
            if (ay.dataRenderer && L.isFunction(ay.dataRenderer)) {
                if (ay.dataRendererOptions) {
                    this.dataRendererOptions = ay.dataRendererOptions
                }
                this.dataRenderer = ay.dataRenderer;
                ar = this.dataRenderer(ar, this, this.dataRendererOptions)
            }
            if (ay.noDataIndicator && L.isPlainObject(ay.noDataIndicator)) {
                L.extend(true, this.noDataIndicator, ay.noDataIndicator)
            }
            if (ar == null || L.isArray(ar) == false || ar.length == 0 || L.isArray(ar[0]) == false || ar[0].length == 0) {
                if (this.noDataIndicator.show == false) {
                    throw new Error("No data specified")
                } else {
                    for (var al in this.noDataIndicator.axes) {
                        for (var an in this.noDataIndicator.axes[al]) {
                            this.axes[al][an] = this.noDataIndicator.axes[al][an]
                        }
                    }
                    this.postDrawHooks.add(function () {
                        var aD = this.eventCanvas.getHeight();
                        var aA = this.eventCanvas.getWidth();
                        var az = L('<div class="jqplot-noData-container" style="position:absolute;"></div>');
                        this.target.append(az);
                        az.height(aD);
                        az.width(aA);
                        az.css("top", this.eventCanvas._offsets.top);
                        az.css("left", this.eventCanvas._offsets.left);
                        var aC = L('<div class="jqplot-noData-contents" style="text-align:center; position:relative; margin-left:auto; margin-right:auto;"></div>');
                        az.append(aC);
                        aC.html(this.noDataIndicator.indicator);
                        var aB = aC.height();
                        var ax = aC.width();
                        aC.height(aB);
                        aC.width(ax);
                        aC.css("top", (aD - aB) / 2 + "px")
                    })
                }
            }
            this.data = L.extend(true, [], ar);
            this.parseOptions(ay);
            if (this.textColor) {
                this.target.css("color", this.textColor)
            }
            if (this.fontFamily) {
                this.target.css("font-family", this.fontFamily)
            }
            if (this.fontSize) {
                this.target.css("font-size", this.fontSize)
            }
            this.title.init();
            this.legend.init();
            this._sumy = 0;
            this._sumx = 0;
            this.computePlotData();
            for (var at = 0; at < this.series.length; at++) {
                this.seriesStack.push(at);
                this.previousSeriesStack.push(at);
                this.series[at].shadowCanvas._plotDimensions = this._plotDimensions;
                this.series[at].canvas._plotDimensions = this._plotDimensions;
                for (var aq = 0; aq < L.jqplot.preSeriesInitHooks.length; aq++) {
                    L.jqplot.preSeriesInitHooks[aq].call(this.series[at], av, this.data, this.options.seriesDefaults, this.options.series[at], this)
                }
                for (var aq = 0; aq < this.preSeriesInitHooks.hooks.length; aq++) {
                    this.preSeriesInitHooks.hooks[aq].call(this.series[at], av, this.data, this.options.seriesDefaults, this.options.series[at], this)
                }
                this.series[at]._plotDimensions = this._plotDimensions;
                this.series[at].init(at, this.grid.borderWidth, this);
                for (var aq = 0; aq < L.jqplot.postSeriesInitHooks.length; aq++) {
                    L.jqplot.postSeriesInitHooks[aq].call(this.series[at], av, this.data, this.options.seriesDefaults, this.options.series[at], this)
                }
                for (var aq = 0; aq < this.postSeriesInitHooks.hooks.length; aq++) {
                    this.postSeriesInitHooks.hooks[aq].call(this.series[at], av, this.data, this.options.seriesDefaults, this.options.series[at], this)
                }
                this._sumy += this.series[at]._sumy;
                this._sumx += this.series[at]._sumx
            }
            var am, ao;
            for (var at = 0, ap = U.length; at < ap; at++) {
                am = U[at];
                ao = this.axes[am];
                ao._plotDimensions = this._plotDimensions;
                ao.init();
                if (this.axes[am].borderColor == null) {
                    if (am.charAt(0) !== "x" && ao.useSeriesColor === true && ao.show) {
                        ao.borderColor = ao._series[0].color
                    } else {
                        ao.borderColor = this.grid.borderColor
                    }
                }
            }
            if (this.sortData) {
                ah(this.series)
            }
            this.grid.init();
            this.grid._axes = this.axes;
            this.legend._series = this.series;
            for (var at = 0; at < L.jqplot.postInitHooks.length; at++) {
                L.jqplot.postInitHooks[at].call(this, av, this.data, ay)
            }
            for (var at = 0; at < this.postInitHooks.hooks.length; at++) {
                this.postInitHooks.hooks[at].call(this, av, this.data, ay)
            }
        };
        this.resetAxesScale = function (aq, am) {
            var ao = am || {};
            var ap = aq || this.axes;
            if (ap === true) {
                ap = this.axes
            }
            if (L.isArray(ap)) {
                for (var an = 0; an < ap.length; an++) {
                    this.axes[ap[an]].resetScale(ao[ap[an]])
                }
            } else {
                if (typeof(ap) === "object") {
                    for (var al in ap) {
                        this.axes[al].resetScale(ao[al])
                    }
                }
            }
        };
        this.reInitialize = function (au, al) {
            var ay = L.extend(true, {}, this.options, al);
            var aw = this.targetId.substr(1);
            var ar = (au == null) ? this.data : au;
            for (var av = 0; av < L.jqplot.preInitHooks.length; av++) {
                L.jqplot.preInitHooks[av].call(this, aw, ar, ay)
            }
            for (var av = 0; av < this.preInitHooks.hooks.length; av++) {
                this.preInitHooks.hooks[av].call(this, aw, ar, ay)
            }
            this._height = this.target.height();
            this._width = this.target.width();
            if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {
                throw new Error("Target dimension not set")
            }
            this._plotDimensions.height = this._height;
            this._plotDimensions.width = this._width;
            this.grid._plotDimensions = this._plotDimensions;
            this.title._plotDimensions = this._plotDimensions;
            this.baseCanvas._plotDimensions = this._plotDimensions;
            this.eventCanvas._plotDimensions = this._plotDimensions;
            this.legend._plotDimensions = this._plotDimensions;
            var am, ax, at, ao;
            for (var av = 0, aq = U.length; av < aq; av++) {
                am = U[av];
                ao = this.axes[am];
                ax = ao._ticks;
                for (var at = 0, ap = ax.length; at < ap; at++) {
                    var an = ax[at]._elem;
                    if (an) {
                        if (L.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== u) {
                            window.G_vmlCanvasManager.uninitElement(an.get(0))
                        }
                        an.emptyForce();
                        an = null;
                        ax._elem = null
                    }
                }
                ax = null;
                delete ao.ticks;
                delete ao._ticks;
                this.axes[am] = new w(am);
                this.axes[am]._plotWidth = this._width;
                this.axes[am]._plotHeight = this._height
            }
            if (au) {
                if (ay.dataRenderer && L.isFunction(ay.dataRenderer)) {
                    if (ay.dataRendererOptions) {
                        this.dataRendererOptions = ay.dataRendererOptions
                    }
                    this.dataRenderer = ay.dataRenderer;
                    au = this.dataRenderer(au, this, this.dataRendererOptions)
                }
                this.data = L.extend(true, [], au)
            }
            if (al) {
                this.parseOptions(ay)
            }
            this.title._plotWidth = this._width;
            if (this.textColor) {
                this.target.css("color", this.textColor)
            }
            if (this.fontFamily) {
                this.target.css("font-family", this.fontFamily)
            }
            if (this.fontSize) {
                this.target.css("font-size", this.fontSize)
            }
            this.title.init();
            this.legend.init();
            this._sumy = 0;
            this._sumx = 0;
            this.seriesStack = [];
            this.previousSeriesStack = [];
            this.computePlotData();
            for (var av = 0, aq = this.series.length; av < aq; av++) {
                this.seriesStack.push(av);
                this.previousSeriesStack.push(av);
                this.series[av].shadowCanvas._plotDimensions = this._plotDimensions;
                this.series[av].canvas._plotDimensions = this._plotDimensions;
                for (var at = 0; at < L.jqplot.preSeriesInitHooks.length; at++) {
                    L.jqplot.preSeriesInitHooks[at].call(this.series[av], aw, this.data, this.options.seriesDefaults, this.options.series[av], this)
                }
                for (var at = 0; at < this.preSeriesInitHooks.hooks.length; at++) {
                    this.preSeriesInitHooks.hooks[at].call(this.series[av], aw, this.data, this.options.seriesDefaults, this.options.series[av], this)
                }
                this.series[av]._plotDimensions = this._plotDimensions;
                this.series[av].init(av, this.grid.borderWidth, this);
                for (var at = 0; at < L.jqplot.postSeriesInitHooks.length; at++) {
                    L.jqplot.postSeriesInitHooks[at].call(this.series[av], aw, this.data, this.options.seriesDefaults, this.options.series[av], this)
                }
                for (var at = 0; at < this.postSeriesInitHooks.hooks.length; at++) {
                    this.postSeriesInitHooks.hooks[at].call(this.series[av], aw, this.data, this.options.seriesDefaults, this.options.series[av], this)
                }
                this._sumy += this.series[av]._sumy;
                this._sumx += this.series[av]._sumx
            }
            for (var av = 0, aq = U.length; av < aq; av++) {
                am = U[av];
                ao = this.axes[am];
                ao._plotDimensions = this._plotDimensions;
                ao.init();
                if (ao.borderColor == null) {
                    if (am.charAt(0) !== "x" && ao.useSeriesColor === true && ao.show) {
                        ao.borderColor = ao._series[0].color
                    } else {
                        ao.borderColor = this.grid.borderColor
                    }
                }
            }
            if (this.sortData) {
                ah(this.series)
            }
            this.grid.init();
            this.grid._axes = this.axes;
            this.legend._series = this.series;
            for (var av = 0, aq = L.jqplot.postInitHooks.length; av < aq; av++) {
                L.jqplot.postInitHooks[av].call(this, aw, this.data, ay)
            }
            for (var av = 0, aq = this.postInitHooks.hooks.length; av < aq; av++) {
                this.postInitHooks.hooks[av].call(this, aw, this.data, ay)
            }
        };
        this.quickInit = function () {
            this._height = this.target.height();
            this._width = this.target.width();
            if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {
                throw new Error("Target dimension not set")
            }
            this._plotDimensions.height = this._height;
            this._plotDimensions.width = this._width;
            this.grid._plotDimensions = this._plotDimensions;
            this.title._plotDimensions = this._plotDimensions;
            this.baseCanvas._plotDimensions = this._plotDimensions;
            this.eventCanvas._plotDimensions = this._plotDimensions;
            this.legend._plotDimensions = this._plotDimensions;
            for (var aq in this.axes) {
                this.axes[aq]._plotWidth = this._width;
                this.axes[aq]._plotHeight = this._height
            }
            this.title._plotWidth = this._width;
            if (this.textColor) {
                this.target.css("color", this.textColor)
            }
            if (this.fontFamily) {
                this.target.css("font-family", this.fontFamily)
            }
            if (this.fontSize) {
                this.target.css("font-size", this.fontSize)
            }
            this._sumy = 0;
            this._sumx = 0;
            this.computePlotData();
            for (var ao = 0; ao < this.series.length; ao++) {
                if (this.series[ao]._type === "line" && this.series[ao].renderer.bands.show) {
                    this.series[ao].renderer.initBands.call(this.series[ao], this.series[ao].renderer.options, this)
                }
                this.series[ao]._plotDimensions = this._plotDimensions;
                this.series[ao].canvas._plotDimensions = this._plotDimensions;
                this._sumy += this.series[ao]._sumy;
                this._sumx += this.series[ao]._sumx
            }
            var am;
            for (var al = 0; al < 12; al++) {
                am = U[al];
                var an = this.axes[am]._ticks;
                for (var ao = 0; ao < an.length; ao++) {
                    var ap = an[ao]._elem;
                    if (ap) {
                        if (L.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== u) {
                            window.G_vmlCanvasManager.uninitElement(ap.get(0))
                        }
                        ap.emptyForce();
                        ap = null;
                        an._elem = null
                    }
                }
                an = null;
                this.axes[am]._plotDimensions = this._plotDimensions;
                this.axes[am]._ticks = []
            }
            if (this.sortData) {
                ah(this.series)
            }
            this.grid._axes = this.axes;
            this.legend._series = this.series
        };
        function ah(ap) {
            var au, av, aw, al, at;
            for (var aq = 0; aq < ap.length; aq++) {
                var am;
                var ar = [ap[aq].data, ap[aq]._stackData, ap[aq]._plotData, ap[aq]._prevPlotData];
                for (var an = 0; an < 4; an++) {
                    am = true;
                    au = ar[an];
                    if (ap[aq]._stackAxis == "x") {
                        for (var ao = 0; ao < au.length; ao++) {
                            if (typeof(au[ao][1]) != "number") {
                                am = false;
                                break
                            }
                        }
                        if (am) {
                            au.sort(function (ay, ax) {
                                return ay[1] - ax[1]
                            })
                        }
                    } else {
                        for (var ao = 0; ao < au.length; ao++) {
                            if (typeof(au[ao][0]) != "number") {
                                am = false;
                                break
                            }
                        }
                        if (am) {
                            au.sort(function (ay, ax) {
                                return ay[0] - ax[0]
                            })
                        }
                    }
                }
            }
        }

        this.computePlotData = function () {
            this._plotData = [];
            this._stackData = [];
            var at, au, ao;
            for (au = 0, ao = this.series.length; au < ao; au++) {
                at = this.series[au];
                this._plotData.push([]);
                this._stackData.push([]);
                var am = at.data;
                this._plotData[au] = L.extend(true, [], am);
                this._stackData[au] = L.extend(true, [], am);
                at._plotData = this._plotData[au];
                at._stackData = this._stackData[au];
                var ax = {x: [], y: []};
                if (this.stackSeries && !at.disableStack) {
                    at._stack = true;
                    var av = (at._stackAxis === "x") ? 0 : 1;
                    for (var ap = 0, al = am.length; ap < al; ap++) {
                        var aw = am[ap][av];
                        if (aw == null) {
                            aw = 0
                        }
                        this._plotData[au][ap][av] = aw;
                        this._stackData[au][ap][av] = aw;
                        if (au > 0) {
                            for (var aq = au; aq--;) {
                                var an = this._plotData[aq][ap][av];
                                if (aw * an >= 0) {
                                    this._plotData[au][ap][av] += an;
                                    this._stackData[au][ap][av] += an;
                                    break
                                }
                            }
                        }
                    }
                } else {
                    for (var ar = 0; ar < at.data.length; ar++) {
                        ax.x.push(at.data[ar][0]);
                        ax.y.push(at.data[ar][1])
                    }
                    this._stackData.push(at.data);
                    this.series[au]._stackData = at.data;
                    this._plotData.push(at.data);
                    at._plotData = at.data;
                    at._plotValues = ax
                }
                if (au > 0) {
                    at._prevPlotData = this.series[au - 1]._plotData
                }
                at._sumy = 0;
                at._sumx = 0;
                for (ar = at.data.length - 1; ar > -1; ar--) {
                    at._sumy += at.data[ar][1];
                    at._sumx += at.data[ar][0]
                }
            }
        };
        this.populatePlotData = function (au, av) {
            this._plotData = [];
            this._stackData = [];
            au._stackData = [];
            au._plotData = [];
            var ay = {x: [], y: []};
            if (this.stackSeries && !au.disableStack) {
                au._stack = true;
                var ax = (au._stackAxis === "x") ? 0 : 1;
                var az = L.extend(true, [], au.data);
                var aA = L.extend(true, [], au.data);
                var an, am, ao, aw, al;
                for (var ar = 0; ar < av; ar++) {
                    var ap = this.series[ar].data;
                    for (var aq = 0; aq < ap.length; aq++) {
                        ao = ap[aq];
                        an = (ao[0] != null) ? ao[0] : 0;
                        am = (ao[1] != null) ? ao[1] : 0;
                        az[aq][0] += an;
                        az[aq][1] += am;
                        aw = (ax) ? am : an;
                        if (au.data[aq][ax] * aw >= 0) {
                            aA[aq][ax] += aw
                        }
                    }
                }
                for (var at = 0; at < aA.length; at++) {
                    ay.x.push(aA[at][0]);
                    ay.y.push(aA[at][1])
                }
                this._plotData.push(aA);
                this._stackData.push(az);
                au._stackData = az;
                au._plotData = aA;
                au._plotValues = ay
            } else {
                for (var at = 0; at < au.data.length; at++) {
                    ay.x.push(au.data[at][0]);
                    ay.y.push(au.data[at][1])
                }
                this._stackData.push(au.data);
                this.series[av]._stackData = au.data;
                this._plotData.push(au.data);
                au._plotData = au.data;
                au._plotValues = ay
            }
            if (av > 0) {
                au._prevPlotData = this.series[av - 1]._plotData
            }
            au._sumy = 0;
            au._sumx = 0;
            for (at = au.data.length - 1; at > -1; at--) {
                au._sumy += au.data[at][1];
                au._sumx += au.data[at][0]
            }
        };
        this.getNextSeriesColor = (function (am) {
            var al = 0;
            var an = am.seriesColors;
            return function () {
                if (al < an.length) {
                    return an[al++]
                } else {
                    al = 0;
                    return an[al++]
                }
            }
        })(this);
        this.parseOptions = function (ay) {
            for (var at = 0; at < this.preParseOptionsHooks.hooks.length; at++) {
                this.preParseOptionsHooks.hooks[at].call(this, ay)
            }
            for (var at = 0; at < L.jqplot.preParseOptionsHooks.length; at++) {
                L.jqplot.preParseOptionsHooks[at].call(this, ay)
            }
            this.options = L.extend(true, {}, this.defaults, ay);
            var am = this.options;
            this.animate = am.animate;
            this.animateReplot = am.animateReplot;
            this.stackSeries = am.stackSeries;
            if (L.isPlainObject(am.fillBetween)) {
                var ax = ["series1", "series2", "color", "baseSeries", "fill"], au;
                for (var at = 0, aq = ax.length; at < aq; at++) {
                    au = ax[at];
                    if (am.fillBetween[au] != null) {
                        this.fillBetween[au] = am.fillBetween[au]
                    }
                }
            }
            if (am.seriesColors) {
                this.seriesColors = am.seriesColors
            }
            if (am.negativeSeriesColors) {
                this.negativeSeriesColors = am.negativeSeriesColors
            }
            if (am.captureRightClick) {
                this.captureRightClick = am.captureRightClick
            }
            this.defaultAxisStart = (ay && ay.defaultAxisStart != null) ? ay.defaultAxisStart : this.defaultAxisStart;
            this.colorGenerator.setColors(this.seriesColors);
            this.negativeColorGenerator.setColors(this.negativeSeriesColors);
            L.extend(true, this._gridPadding, am.gridPadding);
            this.sortData = (am.sortData != null) ? am.sortData : this.sortData;
            for (var at = 0; at < 12; at++) {
                var an = U[at];
                var ap = this.axes[an];
                ap._options = L.extend(true, {}, am.axesDefaults, am.axes[an]);
                L.extend(true, ap, am.axesDefaults, am.axes[an]);
                ap._plotWidth = this._width;
                ap._plotHeight = this._height
            }
            var aw = function (aD, aB, aE) {
                var aA = [];
                var aC, az;
                aB = aB || "vertical";
                if (!L.isArray(aD[0])) {
                    for (aC = 0, az = aD.length; aC < az; aC++) {
                        if (aB == "vertical") {
                            aA.push([aE + aC, aD[aC]])
                        } else {
                            aA.push([aD[aC], aE + aC])
                        }
                    }
                } else {
                    L.extend(true, aA, aD)
                }
                return aA
            };
            var av = 0;
            this.series = [];
            for (var at = 0; at < this.data.length; at++) {
                var al = L.extend(true, {index: at}, {seriesColors: this.seriesColors, negativeSeriesColors: this.negativeSeriesColors}, this.options.seriesDefaults, this.options.series[at], {rendererOptions: {animation: {show: this.animate}}});
                var ax = new S(al);
                for (var ar = 0; ar < L.jqplot.preParseSeriesOptionsHooks.length; ar++) {
                    L.jqplot.preParseSeriesOptionsHooks[ar].call(ax, this.options.seriesDefaults, this.options.series[at])
                }
                for (var ar = 0; ar < this.preParseSeriesOptionsHooks.hooks.length; ar++) {
                    this.preParseSeriesOptionsHooks.hooks[ar].call(ax, this.options.seriesDefaults, this.options.series[at])
                }
                L.extend(true, ax, al);
                var ao = "vertical";
                if (ax.renderer === L.jqplot.BarRenderer && ax.rendererOptions && ax.rendererOptions.barDirection == "horizontal") {
                    ao = "horizontal";
                    ax._stackAxis = "x";
                    ax._primaryAxis = "_yaxis"
                }
                ax.data = aw(this.data[at], ao, this.defaultAxisStart);
                switch (ax.xaxis) {
                    case"xaxis":
                        ax._xaxis = this.axes.xaxis;
                        break;
                    case"x2axis":
                        ax._xaxis = this.axes.x2axis;
                        break;
                    default:
                        break
                }
                ax._yaxis = this.axes[ax.yaxis];
                ax._xaxis._series.push(ax);
                ax._yaxis._series.push(ax);
                if (ax.show) {
                    ax._xaxis.show = true;
                    ax._yaxis.show = true
                } else {
                    if (ax._xaxis.scaleToHiddenSeries) {
                        ax._xaxis.show = true
                    }
                    if (ax._yaxis.scaleToHiddenSeries) {
                        ax._yaxis.show = true
                    }
                }
                if (!ax.label) {
                    ax.label = "Series " + (at + 1).toString()
                }
                this.series.push(ax);
                for (var ar = 0; ar < L.jqplot.postParseSeriesOptionsHooks.length; ar++) {
                    L.jqplot.postParseSeriesOptionsHooks[ar].call(this.series[at], this.options.seriesDefaults, this.options.series[at])
                }
                for (var ar = 0; ar < this.postParseSeriesOptionsHooks.hooks.length; ar++) {
                    this.postParseSeriesOptionsHooks.hooks[ar].call(this.series[at], this.options.seriesDefaults, this.options.series[at])
                }
            }
            L.extend(true, this.grid, this.options.grid);
            for (var at = 0, aq = U.length; at < aq; at++) {
                var an = U[at];
                var ap = this.axes[an];
                if (ap.borderWidth == null) {
                    ap.borderWidth = this.grid.borderWidth
                }
            }
            if (typeof this.options.title == "string") {
                this.title.text = this.options.title
            } else {
                if (typeof this.options.title == "object") {
                    L.extend(true, this.title, this.options.title)
                }
            }
            this.title._plotWidth = this._width;
            this.legend.setOptions(this.options.legend);
            for (var at = 0; at < L.jqplot.postParseOptionsHooks.length; at++) {
                L.jqplot.postParseOptionsHooks[at].call(this, ay)
            }
            for (var at = 0; at < this.postParseOptionsHooks.hooks.length; at++) {
                this.postParseOptionsHooks.hooks[at].call(this, ay)
            }
        };
        this.destroy = function () {
            this.canvasManager.freeAllCanvases();
            if (this.eventCanvas && this.eventCanvas._elem) {
                this.eventCanvas._elem.unbind()
            }
            this.target.empty();
            this.target[0].innerHTML = ""
        };
        this.replot = function (am) {
            var an = am || {};
            var ap = an.data || null;
            var al = (an.clear === false) ? false : true;
            var ao = an.resetAxes || false;
            delete an.data;
            delete an.clear;
            delete an.resetAxes;
            this.target.trigger("jqplotPreReplot");
            if (al) {
                this.destroy()
            }
            if (ap || !L.isEmptyObject(an)) {
                this.reInitialize(ap, an)
            } else {
                this.quickInit()
            }
            if (ao) {
                this.resetAxesScale(ao, an.axes)
            }
            this.draw();
            this.target.trigger("jqplotPostReplot")
        };
        this.redraw = function (al) {
            al = (al != null) ? al : true;
            this.target.trigger("jqplotPreRedraw");
            if (al) {
                this.canvasManager.freeAllCanvases();
                this.eventCanvas._elem.unbind();
                this.target.empty()
            }
            for (var an in this.axes) {
                this.axes[an]._ticks = []
            }
            this.computePlotData();
            this._sumy = 0;
            this._sumx = 0;
            for (var am = 0, ao = this.series.length; am < ao; am++) {
                this._sumy += this.series[am]._sumy;
                this._sumx += this.series[am]._sumx
            }
            this.draw();
            this.target.trigger("jqplotPostRedraw")
        };
        this.draw = function () {
            if (this.drawIfHidden || this.target.is(":visible")) {
                this.target.trigger("jqplotPreDraw");
                var aH, aF, aE, ao;
                for (aH = 0, aE = L.jqplot.preDrawHooks.length; aH < aE; aH++) {
                    L.jqplot.preDrawHooks[aH].call(this)
                }
                for (aH = 0, aE = this.preDrawHooks.hooks.length; aH < aE; aH++) {
                    this.preDrawHooks.hooks[aH].apply(this, this.preDrawSeriesHooks.args[aH])
                }
                this.target.append(this.baseCanvas.createElement({left: 0, right: 0, top: 0, bottom: 0}, "jqplot-base-canvas", null, this));
                this.baseCanvas.setContext();
                this.target.append(this.title.draw());
                this.title.pack({top: 0, left: 0});
                var aL = this.legend.draw({}, this);
                var al = {top: 0, left: 0, bottom: 0, right: 0};
                if (this.legend.placement == "outsideGrid") {
                    this.target.append(aL);
                    switch (this.legend.location) {
                        case"n":
                            al.top += this.legend.getHeight();
                            break;
                        case"s":
                            al.bottom += this.legend.getHeight();
                            break;
                        case"ne":
                        case"e":
                        case"se":
                            al.right += this.legend.getWidth();
                            break;
                        case"nw":
                        case"w":
                        case"sw":
                            al.left += this.legend.getWidth();
                            break;
                        default:
                            al.right += this.legend.getWidth();
                            break
                    }
                    aL = aL.detach()
                }
                var ar = this.axes;
                var aM;
                for (aH = 0; aH < 12; aH++) {
                    aM = U[aH];
                    this.target.append(ar[aM].draw(this.baseCanvas._ctx, this));
                    ar[aM].set()
                }
                if (ar.yaxis.show) {
                    al.left += ar.yaxis.getWidth()
                }
                var aG = ["y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis"];
                var az = [0, 0, 0, 0, 0, 0, 0, 0];
                var aC = 0;
                var aB;
                for (aB = 0; aB < 8; aB++) {
                    if (ar[aG[aB]].show) {
                        aC += ar[aG[aB]].getWidth();
                        az[aB] = aC
                    }
                }
                al.right += aC;
                if (ar.x2axis.show) {
                    al.top += ar.x2axis.getHeight()
                }
                if (this.title.show) {
                    al.top += this.title.getHeight()
                }
                if (ar.xaxis.show) {
                    al.bottom += ar.xaxis.getHeight()
                }
                if (this.options.gridDimensions && L.isPlainObject(this.options.gridDimensions)) {
                    var at = parseInt(this.options.gridDimensions.width, 10) || 0;
                    var aI = parseInt(this.options.gridDimensions.height, 10) || 0;
                    var an = (this._width - al.left - al.right - at) / 2;
                    var aK = (this._height - al.top - al.bottom - aI) / 2;
                    if (aK >= 0 && an >= 0) {
                        al.top += aK;
                        al.bottom += aK;
                        al.left += an;
                        al.right += an
                    }
                }
                var am = ["top", "bottom", "left", "right"];
                for (var aB in am) {
                    if (this._gridPadding[am[aB]] == null && al[am[aB]] > 0) {
                        this._gridPadding[am[aB]] = al[am[aB]]
                    } else {
                        if (this._gridPadding[am[aB]] == null) {
                            this._gridPadding[am[aB]] = this._defaultGridPadding[am[aB]]
                        }
                    }
                }
                var aA = this._gridPadding;
                if (this.legend.placement === "outsideGrid") {
                    aA = {top: this.title.getHeight(), left: 0, right: 0, bottom: 0};
                    if (this.legend.location === "s") {
                        aA.left = this._gridPadding.left;
                        aA.right = this._gridPadding.right
                    }
                }
                ar.xaxis.pack({position: "absolute", bottom: this._gridPadding.bottom - ar.xaxis.getHeight(), left: 0, width: this._width}, {min: this._gridPadding.left, max: this._width - this._gridPadding.right});
                ar.yaxis.pack({position: "absolute", top: 0, left: this._gridPadding.left - ar.yaxis.getWidth(), height: this._height}, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top});
                ar.x2axis.pack({position: "absolute", top: this._gridPadding.top - ar.x2axis.getHeight(), left: 0, width: this._width}, {min: this._gridPadding.left, max: this._width - this._gridPadding.right});
                for (aH = 8; aH > 0; aH--) {
                    ar[aG[aH - 1]].pack({position: "absolute", top: 0, right: this._gridPadding.right - az[aH - 1]}, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top})
                }
                var au = (this._width - this._gridPadding.left - this._gridPadding.right) / 2 + this._gridPadding.left - ar.yMidAxis.getWidth() / 2;
                ar.yMidAxis.pack({position: "absolute", top: 0, left: au, zIndex: 9, textAlign: "center"}, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top});
                this.target.append(this.grid.createElement(this._gridPadding, this));
                this.grid.draw();
                var aq = this.series;
                var aJ = aq.length;
                for (aH = 0, aE = aJ; aH < aE; aH++) {
                    aF = this.seriesStack[aH];
                    this.target.append(aq[aF].shadowCanvas.createElement(this._gridPadding, "jqplot-series-shadowCanvas", null, this));
                    aq[aF].shadowCanvas.setContext();
                    aq[aF].shadowCanvas._elem.data("seriesIndex", aF)
                }
                for (aH = 0, aE = aJ; aH < aE; aH++) {
                    aF = this.seriesStack[aH];
                    this.target.append(aq[aF].canvas.createElement(this._gridPadding, "jqplot-series-canvas", null, this));
                    aq[aF].canvas.setContext();
                    aq[aF].canvas._elem.data("seriesIndex", aF)
                }
                this.target.append(this.eventCanvas.createElement(this._gridPadding, "jqplot-event-canvas", null, this));
                this.eventCanvas.setContext();
                this.eventCanvas._ctx.fillStyle = "rgba(0,0,0,0)";
                this.eventCanvas._ctx.fillRect(0, 0, this.eventCanvas._ctx.canvas.width, this.eventCanvas._ctx.canvas.height);
                this.bindCustomEvents();
                if (this.legend.preDraw) {
                    this.eventCanvas._elem.before(aL);
                    this.legend.pack(aA);
                    if (this.legend._elem) {
                        this.drawSeries({legendInfo: {location: this.legend.location, placement: this.legend.placement, width: this.legend.getWidth(), height: this.legend.getHeight(), xoffset: this.legend.xoffset, yoffset: this.legend.yoffset}})
                    } else {
                        this.drawSeries()
                    }
                } else {
                    this.drawSeries();
                    if (aJ) {
                        L(aq[aJ - 1].canvas._elem).after(aL)
                    }
                    this.legend.pack(aA)
                }
                for (var aH = 0, aE = L.jqplot.eventListenerHooks.length; aH < aE; aH++) {
                    this.eventCanvas._elem.bind(L.jqplot.eventListenerHooks[aH][0], {plot: this}, L.jqplot.eventListenerHooks[aH][1])
                }
                for (var aH = 0, aE = this.eventListenerHooks.hooks.length; aH < aE; aH++) {
                    this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[aH][0], {plot: this}, this.eventListenerHooks.hooks[aH][1])
                }
                var ay = this.fillBetween;
                if (ay.fill && ay.series1 !== ay.series2 && ay.series1 < aJ && ay.series2 < aJ && aq[ay.series1]._type === "line" && aq[ay.series2]._type === "line") {
                    this.doFillBetweenLines()
                }
                for (var aH = 0, aE = L.jqplot.postDrawHooks.length; aH < aE; aH++) {
                    L.jqplot.postDrawHooks[aH].call(this)
                }
                for (var aH = 0, aE = this.postDrawHooks.hooks.length; aH < aE; aH++) {
                    this.postDrawHooks.hooks[aH].apply(this, this.postDrawHooks.args[aH])
                }
                if (this.target.is(":visible")) {
                    this._drawCount += 1
                }
                var av, aw, aD, ap;
                for (aH = 0, aE = aJ; aH < aE; aH++) {
                    av = aq[aH];
                    aw = av.renderer;
                    aD = ".jqplot-point-label.jqplot-series-" + aH;
                    if (aw.animation && aw.animation._supported && aw.animation.show && (this._drawCount < 2 || this.animateReplot)) {
                        ap = this.target.find(aD);
                        ap.stop(true, true).hide();
                        av.canvas._elem.stop(true, true).hide();
                        av.shadowCanvas._elem.stop(true, true).hide();
                        av.canvas._elem.jqplotEffect("blind", {mode: "show", direction: aw.animation.direction}, aw.animation.speed);
                        av.shadowCanvas._elem.jqplotEffect("blind", {mode: "show", direction: aw.animation.direction}, aw.animation.speed);
                        ap.fadeIn(aw.animation.speed * 0.8)
                    }
                }
                ap = null;
                this.target.trigger("jqplotPostDraw", [this])
            }
        };
        R.prototype.doFillBetweenLines = function () {
            var an = this.fillBetween;
            var ax = an.series1;
            var av = an.series2;
            var aw = (ax < av) ? ax : av;
            var au = (av > ax) ? av : ax;
            var ar = this.series[aw];
            var aq = this.series[au];
            if (aq.renderer.smooth) {
                var ap = aq.renderer._smoothedData.slice(0).reverse()
            } else {
                var ap = aq.gridData.slice(0).reverse()
            }
            if (ar.renderer.smooth) {
                var at = ar.renderer._smoothedData.concat(ap)
            } else {
                var at = ar.gridData.concat(ap)
            }
            var ao = (an.color !== null) ? an.color : this.series[ax].fillColor;
            var ay = (an.baseSeries !== null) ? an.baseSeries : aw;
            var am = this.series[ay].renderer.shapeRenderer;
            var al = {fillStyle: ao, fill: true, closePath: true};
            am.draw(ar.shadowCanvas._ctx, at, al)
        };
        this.bindCustomEvents = function () {
            this.eventCanvas._elem.bind("click", {plot: this}, this.onClick);
            this.eventCanvas._elem.bind("dblclick", {plot: this}, this.onDblClick);
            this.eventCanvas._elem.bind("mousedown", {plot: this}, this.onMouseDown);
            this.eventCanvas._elem.bind("mousemove", {plot: this}, this.onMouseMove);
            this.eventCanvas._elem.bind("mouseenter", {plot: this}, this.onMouseEnter);
            this.eventCanvas._elem.bind("mouseleave", {plot: this}, this.onMouseLeave);
            if (this.captureRightClick) {
                this.eventCanvas._elem.bind("mouseup", {plot: this}, this.onRightClick);
                this.eventCanvas._elem.get(0).oncontextmenu = function () {
                    return false
                }
            } else {
                this.eventCanvas._elem.bind("mouseup", {plot: this}, this.onMouseUp)
            }
        };
        function ai(av) {
            var au = av.data.plot;
            var ap = au.eventCanvas._elem.offset();
            var at = {x: av.pageX - ap.left, y: av.pageY - ap.top};
            var aq = {xaxis: null, yaxis: null, x2axis: null, y2axis: null, y3axis: null, y4axis: null, y5axis: null, y6axis: null, y7axis: null, y8axis: null, y9axis: null, yMidAxis: null};
            var ar = ["xaxis", "yaxis", "x2axis", "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis", "yMidAxis"];
            var al = au.axes;
            var am, ao;
            for (am = 11; am > 0; am--) {
                ao = ar[am - 1];
                if (al[ao].show) {
                    aq[ao] = al[ao].series_p2u(at[ao.charAt(0)])
                }
            }
            return{offsets: ap, gridPos: at, dataPos: aq}
        }

        function ak(al, am) {
            var aq = am.series;
            var aW, aU, aT, aO, aP, aJ, aI, aw, au, az, aA, aK;
            var aS, aX, aQ, ar, aH, aM, aV;
            var an, aN;
            for (aT = am.seriesStack.length - 1; aT >= 0; aT--) {
                aW = am.seriesStack[aT];
                aO = aq[aW];
                aV = aO._highlightThreshold;
                switch (aO.renderer.constructor) {
                    case L.jqplot.BarRenderer:
                        aJ = al.x;
                        aI = al.y;
                        for (aU = 0; aU < aO._barPoints.length; aU++) {
                            aH = aO._barPoints[aU];
                            aQ = aO.gridData[aU];
                            if (aJ > aH[0][0] && aJ < aH[2][0] && aI > aH[2][1] && aI < aH[0][1]) {
                                return{seriesIndex: aO.index, pointIndex: aU, gridData: aQ, data: aO.data[aU], points: aO._barPoints[aU]}
                            }
                        }
                        break;
                    case L.jqplot.PyramidRenderer:
                        aJ = al.x;
                        aI = al.y;
                        for (aU = 0; aU < aO._barPoints.length; aU++) {
                            aH = aO._barPoints[aU];
                            aQ = aO.gridData[aU];
                            if (aJ > aH[0][0] + aV[0][0] && aJ < aH[2][0] + aV[2][0] && aI > aH[2][1] && aI < aH[0][1]) {
                                return{seriesIndex: aO.index, pointIndex: aU, gridData: aQ, data: aO.data[aU], points: aO._barPoints[aU]}
                            }
                        }
                        break;
                    case L.jqplot.DonutRenderer:
                        az = aO.startAngle / 180 * Math.PI;
                        aJ = al.x - aO._center[0];
                        aI = al.y - aO._center[1];
                        aP = Math.sqrt(Math.pow(aJ, 2) + Math.pow(aI, 2));
                        if (aJ > 0 && -aI >= 0) {
                            aw = 2 * Math.PI - Math.atan(-aI / aJ)
                        } else {
                            if (aJ > 0 && -aI < 0) {
                                aw = -Math.atan(-aI / aJ)
                            } else {
                                if (aJ < 0) {
                                    aw = Math.PI - Math.atan(-aI / aJ)
                                } else {
                                    if (aJ == 0 && -aI > 0) {
                                        aw = 3 * Math.PI / 2
                                    } else {
                                        if (aJ == 0 && -aI < 0) {
                                            aw = Math.PI / 2
                                        } else {
                                            if (aJ == 0 && aI == 0) {
                                                aw = 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (az) {
                            aw -= az;
                            if (aw < 0) {
                                aw += 2 * Math.PI
                            } else {
                                if (aw > 2 * Math.PI) {
                                    aw -= 2 * Math.PI
                                }
                            }
                        }
                        au = aO.sliceMargin / 180 * Math.PI;
                        if (aP < aO._radius && aP > aO._innerRadius) {
                            for (aU = 0; aU < aO.gridData.length; aU++) {
                                aA = (aU > 0) ? aO.gridData[aU - 1][1] + au : au;
                                aK = aO.gridData[aU][1];
                                if (aw > aA && aw < aK) {
                                    return{seriesIndex: aO.index, pointIndex: aU, gridData: [al.x, al.y], data: aO.data[aU]}
                                }
                            }
                        }
                        break;
                    case L.jqplot.PieRenderer:
                        az = aO.startAngle / 180 * Math.PI;
                        aJ = al.x - aO._center[0];
                        aI = al.y - aO._center[1];
                        aP = Math.sqrt(Math.pow(aJ, 2) + Math.pow(aI, 2));
                        if (aJ > 0 && -aI >= 0) {
                            aw = 2 * Math.PI - Math.atan(-aI / aJ)
                        } else {
                            if (aJ > 0 && -aI < 0) {
                                aw = -Math.atan(-aI / aJ)
                            } else {
                                if (aJ < 0) {
                                    aw = Math.PI - Math.atan(-aI / aJ)
                                } else {
                                    if (aJ == 0 && -aI > 0) {
                                        aw = 3 * Math.PI / 2
                                    } else {
                                        if (aJ == 0 && -aI < 0) {
                                            aw = Math.PI / 2
                                        } else {
                                            if (aJ == 0 && aI == 0) {
                                                aw = 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (az) {
                            aw -= az;
                            if (aw < 0) {
                                aw += 2 * Math.PI
                            } else {
                                if (aw > 2 * Math.PI) {
                                    aw -= 2 * Math.PI
                                }
                            }
                        }
                        au = aO.sliceMargin / 180 * Math.PI;
                        if (aP < aO._radius) {
                            for (aU = 0; aU < aO.gridData.length; aU++) {
                                aA = (aU > 0) ? aO.gridData[aU - 1][1] + au : au;
                                aK = aO.gridData[aU][1];
                                if (aw > aA && aw < aK) {
                                    return{seriesIndex: aO.index, pointIndex: aU, gridData: [al.x, al.y], data: aO.data[aU]}
                                }
                            }
                        }
                        break;
                    case L.jqplot.BubbleRenderer:
                        aJ = al.x;
                        aI = al.y;
                        var aF = null;
                        if (aO.show) {
                            for (var aU = 0; aU < aO.gridData.length; aU++) {
                                aQ = aO.gridData[aU];
                                aX = Math.sqrt((aJ - aQ[0]) * (aJ - aQ[0]) + (aI - aQ[1]) * (aI - aQ[1]));
                                if (aX <= aQ[2] && (aX <= aS || aS == null)) {
                                    aS = aX;
                                    aF = {seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                }
                            }
                            if (aF != null) {
                                return aF
                            }
                        }
                        break;
                    case L.jqplot.FunnelRenderer:
                        aJ = al.x;
                        aI = al.y;
                        var aL = aO._vertices, ap = aL[0], ao = aL[aL.length - 1], at, aE, ay;

                    function aR(a0, a2, a1) {
                        var aZ = (a2[1] - a1[1]) / (a2[0] - a1[0]);
                        var aY = a2[1] - aZ * a2[0];
                        var a3 = a0 + a2[1];
                        return[(a3 - aY) / aZ, a3]
                    }

                        at = aR(aI, ap[0], ao[3]);
                        aE = aR(aI, ap[1], ao[2]);
                        for (aU = 0; aU < aL.length; aU++) {
                            ay = aL[aU];
                            if (aI >= ay[0][1] && aI <= ay[3][1] && aJ >= at[0] && aJ <= aE[0]) {
                                return{seriesIndex: aO.index, pointIndex: aU, gridData: null, data: aO.data[aU]}
                            }
                        }
                        break;
                    case L.jqplot.LineRenderer:
                        aJ = al.x;
                        aI = al.y;
                        aP = aO.renderer;
                        if (aO.show) {
                            if ((aO.fill || (aO.renderer.bands.show && aO.renderer.bands.fill)) && (!am.plugins.highlighter || !am.plugins.highlighter.show)) {
                                var ax = false;
                                if (aJ > aO._boundingBox[0][0] && aJ < aO._boundingBox[1][0] && aI > aO._boundingBox[1][1] && aI < aO._boundingBox[0][1]) {
                                    var aD = aO._areaPoints.length;
                                    var aG;
                                    var aU = aD - 1;
                                    for (var aG = 0; aG < aD; aG++) {
                                        var aC = [aO._areaPoints[aG][0], aO._areaPoints[aG][1]];
                                        var aB = [aO._areaPoints[aU][0], aO._areaPoints[aU][1]];
                                        if (aC[1] < aI && aB[1] >= aI || aB[1] < aI && aC[1] >= aI) {
                                            if (aC[0] + (aI - aC[1]) / (aB[1] - aC[1]) * (aB[0] - aC[0]) < aJ) {
                                                ax = !ax
                                            }
                                        }
                                        aU = aG
                                    }
                                }
                                if (ax) {
                                    return{seriesIndex: aW, pointIndex: null, gridData: aO.gridData, data: aO.data, points: aO._areaPoints}
                                }
                                break
                            } else {
                                aN = aO.markerRenderer.size / 2 + aO.neighborThreshold;
                                an = (aN > 0) ? aN : 0;
                                for (var aU = 0; aU < aO.gridData.length; aU++) {
                                    aQ = aO.gridData[aU];
                                    if (aP.constructor == L.jqplot.OHLCRenderer) {
                                        if (aP.candleStick) {
                                            var av = aO._yaxis.series_u2p;
                                            if (aJ >= aQ[0] - aP._bodyWidth / 2 && aJ <= aQ[0] + aP._bodyWidth / 2 && aI >= av(aO.data[aU][2]) && aI <= av(aO.data[aU][3])) {
                                                return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                            }
                                        } else {
                                            if (!aP.hlc) {
                                                var av = aO._yaxis.series_u2p;
                                                if (aJ >= aQ[0] - aP._tickLength && aJ <= aQ[0] + aP._tickLength && aI >= av(aO.data[aU][2]) && aI <= av(aO.data[aU][3])) {
                                                    return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                                }
                                            } else {
                                                var av = aO._yaxis.series_u2p;
                                                if (aJ >= aQ[0] - aP._tickLength && aJ <= aQ[0] + aP._tickLength && aI >= av(aO.data[aU][1]) && aI <= av(aO.data[aU][2])) {
                                                    return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                                }
                                            }
                                        }
                                    } else {
                                        if (aQ[0] != null && aQ[1] != null) {
                                            aX = Math.sqrt((aJ - aQ[0]) * (aJ - aQ[0]) + (aI - aQ[1]) * (aI - aQ[1]));
                                            if (aX <= an && (aX <= aS || aS == null)) {
                                                aS = aX;
                                                return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    default:
                        aJ = al.x;
                        aI = al.y;
                        aP = aO.renderer;
                        if (aO.show) {
                            aN = aO.markerRenderer.size / 2 + aO.neighborThreshold;
                            an = (aN > 0) ? aN : 0;
                            for (var aU = 0; aU < aO.gridData.length; aU++) {
                                aQ = aO.gridData[aU];
                                if (aP.constructor == L.jqplot.OHLCRenderer) {
                                    if (aP.candleStick) {
                                        var av = aO._yaxis.series_u2p;
                                        if (aJ >= aQ[0] - aP._bodyWidth / 2 && aJ <= aQ[0] + aP._bodyWidth / 2 && aI >= av(aO.data[aU][2]) && aI <= av(aO.data[aU][3])) {
                                            return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                        }
                                    } else {
                                        if (!aP.hlc) {
                                            var av = aO._yaxis.series_u2p;
                                            if (aJ >= aQ[0] - aP._tickLength && aJ <= aQ[0] + aP._tickLength && aI >= av(aO.data[aU][2]) && aI <= av(aO.data[aU][3])) {
                                                return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                            }
                                        } else {
                                            var av = aO._yaxis.series_u2p;
                                            if (aJ >= aQ[0] - aP._tickLength && aJ <= aQ[0] + aP._tickLength && aI >= av(aO.data[aU][1]) && aI <= av(aO.data[aU][2])) {
                                                return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                            }
                                        }
                                    }
                                } else {
                                    aX = Math.sqrt((aJ - aQ[0]) * (aJ - aQ[0]) + (aI - aQ[1]) * (aI - aQ[1]));
                                    if (aX <= an && (aX <= aS || aS == null)) {
                                        aS = aX;
                                        return{seriesIndex: aW, pointIndex: aU, gridData: aQ, data: aO.data[aU]}
                                    }
                                }
                            }
                        }
                        break
                }
            }
            return null
        }

        this.onClick = function (an) {
            var am = ai(an);
            var ap = an.data.plot;
            var ao = ak(am.gridPos, ap);
            var al = L.Event("jqplotClick");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
        };
        this.onDblClick = function (an) {
            var am = ai(an);
            var ap = an.data.plot;
            var ao = ak(am.gridPos, ap);
            var al = L.Event("jqplotDblClick");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
        };
        this.onMouseDown = function (an) {
            var am = ai(an);
            var ap = an.data.plot;
            var ao = ak(am.gridPos, ap);
            var al = L.Event("jqplotMouseDown");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
        };
        this.onMouseUp = function (an) {
            var am = ai(an);
            var al = L.Event("jqplotMouseUp");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            L(this).trigger(al, [am.gridPos, am.dataPos, null, an.data.plot])
        };
        this.onRightClick = function (an) {
            var am = ai(an);
            var ap = an.data.plot;
            var ao = ak(am.gridPos, ap);
            if (ap.captureRightClick) {
                if (an.which == 3) {
                    var al = L.Event("jqplotRightClick");
                    al.pageX = an.pageX;
                    al.pageY = an.pageY;
                    L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
                } else {
                    var al = L.Event("jqplotMouseUp");
                    al.pageX = an.pageX;
                    al.pageY = an.pageY;
                    L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
                }
            }
        };
        this.onMouseMove = function (an) {
            var am = ai(an);
            var ap = an.data.plot;
            var ao = ak(am.gridPos, ap);
            var al = L.Event("jqplotMouseMove");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            L(this).trigger(al, [am.gridPos, am.dataPos, ao, ap])
        };
        this.onMouseEnter = function (an) {
            var am = ai(an);
            var ao = an.data.plot;
            var al = L.Event("jqplotMouseEnter");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            al.relatedTarget = an.relatedTarget;
            L(this).trigger(al, [am.gridPos, am.dataPos, null, ao])
        };
        this.onMouseLeave = function (an) {
            var am = ai(an);
            var ao = an.data.plot;
            var al = L.Event("jqplotMouseLeave");
            al.pageX = an.pageX;
            al.pageY = an.pageY;
            al.relatedTarget = an.relatedTarget;
            L(this).trigger(al, [am.gridPos, am.dataPos, null, ao])
        };
        this.drawSeries = function (an, al) {
            var ap, ao, am;
            al = (typeof(an) === "number" && al == null) ? an : al;
            an = (typeof(an) === "object") ? an : {};
            if (al != u) {
                ao = this.series[al];
                am = ao.shadowCanvas._ctx;
                am.clearRect(0, 0, am.canvas.width, am.canvas.height);
                ao.drawShadow(am, an, this);
                am = ao.canvas._ctx;
                am.clearRect(0, 0, am.canvas.width, am.canvas.height);
                ao.draw(am, an, this);
                if (ao.renderer.constructor == L.jqplot.BezierCurveRenderer) {
                    if (al < this.series.length - 1) {
                        this.drawSeries(al + 1)
                    }
                }
            } else {
                for (ap = 0; ap < this.series.length; ap++) {
                    ao = this.series[ap];
                    am = ao.shadowCanvas._ctx;
                    am.clearRect(0, 0, am.canvas.width, am.canvas.height);
                    ao.drawShadow(am, an, this);
                    am = ao.canvas._ctx;
                    am.clearRect(0, 0, am.canvas.width, am.canvas.height);
                    ao.draw(am, an, this)
                }
            }
            an = al = ap = ao = am = null
        };
        this.moveSeriesToFront = function (am) {
            am = parseInt(am, 10);
            var ap = L.inArray(am, this.seriesStack);
            if (ap == -1) {
                return
            }
            if (ap == this.seriesStack.length - 1) {
                this.previousSeriesStack = this.seriesStack.slice(0);
                return
            }
            var al = this.seriesStack[this.seriesStack.length - 1];
            var ao = this.series[am].canvas._elem.detach();
            var an = this.series[am].shadowCanvas._elem.detach();
            this.series[al].shadowCanvas._elem.after(an);
            this.series[al].canvas._elem.after(ao);
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack.splice(ap, 1);
            this.seriesStack.push(am)
        };
        this.moveSeriesToBack = function (am) {
            am = parseInt(am, 10);
            var ap = L.inArray(am, this.seriesStack);
            if (ap == 0 || ap == -1) {
                return
            }
            var al = this.seriesStack[0];
            var ao = this.series[am].canvas._elem.detach();
            var an = this.series[am].shadowCanvas._elem.detach();
            this.series[al].shadowCanvas._elem.before(an);
            this.series[al].canvas._elem.before(ao);
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack.splice(ap, 1);
            this.seriesStack.unshift(am)
        };
        this.restorePreviousSeriesOrder = function () {
            var ar, aq, ap, ao, an, al, am;
            if (this.seriesStack == this.previousSeriesStack) {
                return
            }
            for (ar = 1; ar < this.previousSeriesStack.length; ar++) {
                al = this.previousSeriesStack[ar];
                am = this.previousSeriesStack[ar - 1];
                ap = this.series[al].canvas._elem.detach();
                ao = this.series[al].shadowCanvas._elem.detach();
                this.series[am].shadowCanvas._elem.after(ao);
                this.series[am].canvas._elem.after(ap)
            }
            an = this.seriesStack.slice(0);
            this.seriesStack = this.previousSeriesStack.slice(0);
            this.previousSeriesStack = an
        };
        this.restoreOriginalSeriesOrder = function () {
            var ap, ao, al = [], an, am;
            for (ap = 0; ap < this.series.length; ap++) {
                al.push(ap)
            }
            if (this.seriesStack == al) {
                return
            }
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack = al;
            for (ap = 1; ap < this.seriesStack.length; ap++) {
                an = this.series[ap].canvas._elem.detach();
                am = this.series[ap].shadowCanvas._elem.detach();
                this.series[ap - 1].shadowCanvas._elem.after(am);
                this.series[ap - 1].canvas._elem.after(an)
            }
        };
        this.activateTheme = function (al) {
            this.themeEngine.activate(this, al)
        }
    }

    L.jqplot.computeHighlightColors = function (ai) {
        var ak;
        if (L.isArray(ai)) {
            ak = [];
            for (var am = 0; am < ai.length; am++) {
                var al = L.jqplot.getColorComponents(ai[am]);
                var ah = [al[0], al[1], al[2]];
                var an = ah[0] + ah[1] + ah[2];
                for (var aj = 0; aj < 3; aj++) {
                    ah[aj] = (an > 660) ? ah[aj] * 0.85 : 0.73 * ah[aj] + 90;
                    ah[aj] = parseInt(ah[aj], 10);
                    (ah[aj] > 255) ? 255 : ah[aj]
                }
                ah[3] = 0.3 + 0.35 * al[3];
                ak.push("rgba(" + ah[0] + "," + ah[1] + "," + ah[2] + "," + ah[3] + ")")
            }
        } else {
            var al = L.jqplot.getColorComponents(ai);
            var ah = [al[0], al[1], al[2]];
            var an = ah[0] + ah[1] + ah[2];
            for (var aj = 0; aj < 3; aj++) {
                ah[aj] = (an > 660) ? ah[aj] * 0.85 : 0.73 * ah[aj] + 90;
                ah[aj] = parseInt(ah[aj], 10);
                (ah[aj] > 255) ? 255 : ah[aj]
            }
            ah[3] = 0.3 + 0.35 * al[3];
            ak = "rgba(" + ah[0] + "," + ah[1] + "," + ah[2] + "," + ah[3] + ")"
        }
        return ak
    };
    L.jqplot.ColorGenerator = function (ai) {
        ai = ai || L.jqplot.config.defaultColors;
        var ah = 0;
        this.next = function () {
            if (ah < ai.length) {
                return ai[ah++]
            } else {
                ah = 0;
                return ai[ah++]
            }
        };
        this.previous = function () {
            if (ah > 0) {
                return ai[ah--]
            } else {
                ah = ai.length - 1;
                return ai[ah]
            }
        };
        this.get = function (ak) {
            var aj = ak - ai.length * Math.floor(ak / ai.length);
            return ai[aj]
        };
        this.setColors = function (aj) {
            ai = aj
        };
        this.reset = function () {
            ah = 0
        };
        this.getIndex = function () {
            return ah
        };
        this.setIndex = function (aj) {
            ah = aj
        }
    };
    L.jqplot.hex2rgb = function (aj, ah) {
        aj = aj.replace("#", "");
        if (aj.length == 3) {
            aj = aj.charAt(0) + aj.charAt(0) + aj.charAt(1) + aj.charAt(1) + aj.charAt(2) + aj.charAt(2)
        }
        var ai;
        ai = "rgba(" + parseInt(aj.slice(0, 2), 16) + ", " + parseInt(aj.slice(2, 4), 16) + ", " + parseInt(aj.slice(4, 6), 16);
        if (ah) {
            ai += ", " + ah
        }
        ai += ")";
        return ai
    };
    L.jqplot.rgb2hex = function (am) {
        var aj = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *(?:, *[0-9.]*)?\)/;
        var ah = am.match(aj);
        var al = "#";
        for (var ak = 1; ak < 4; ak++) {
            var ai;
            if (ah[ak].search(/%/) != -1) {
                ai = parseInt(255 * ah[ak] / 100, 10).toString(16);
                if (ai.length == 1) {
                    ai = "0" + ai
                }
            } else {
                ai = parseInt(ah[ak], 10).toString(16);
                if (ai.length == 1) {
                    ai = "0" + ai
                }
            }
            al += ai
        }
        return al
    };
    L.jqplot.normalize2rgb = function (ai, ah) {
        if (ai.search(/^ *rgba?\(/) != -1) {
            return ai
        } else {
            if (ai.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/) != -1) {
                return L.jqplot.hex2rgb(ai, ah)
            } else {
                throw new Error("Invalid color spec")
            }
        }
    };
    L.jqplot.getColorComponents = function (am) {
        am = L.jqplot.colorKeywordMap[am] || am;
        var ak = L.jqplot.normalize2rgb(am);
        var aj = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *,? *([0-9.]* *)?\)/;
        var ah = ak.match(aj);
        var ai = [];
        for (var al = 1; al < 4; al++) {
            if (ah[al].search(/%/) != -1) {
                ai[al - 1] = parseInt(255 * ah[al] / 100, 10)
            } else {
                ai[al - 1] = parseInt(ah[al], 10)
            }
        }
        ai[3] = parseFloat(ah[4]) ? parseFloat(ah[4]) : 1;
        return ai
    };
    L.jqplot.colorKeywordMap = {aliceblue: "rgb(240, 248, 255)", antiquewhite: "rgb(250, 235, 215)", aqua: "rgb( 0, 255, 255)", aquamarine: "rgb(127, 255, 212)", azure: "rgb(240, 255, 255)", beige: "rgb(245, 245, 220)", bisque: "rgb(255, 228, 196)", black: "rgb( 0, 0, 0)", blanchedalmond: "rgb(255, 235, 205)", blue: "rgb( 0, 0, 255)", blueviolet: "rgb(138, 43, 226)", brown: "rgb(165, 42, 42)", burlywood: "rgb(222, 184, 135)", cadetblue: "rgb( 95, 158, 160)", chartreuse: "rgb(127, 255, 0)", chocolate: "rgb(210, 105, 30)", coral: "rgb(255, 127, 80)", cornflowerblue: "rgb(100, 149, 237)", cornsilk: "rgb(255, 248, 220)", crimson: "rgb(220, 20, 60)", cyan: "rgb( 0, 255, 255)", darkblue: "rgb( 0, 0, 139)", darkcyan: "rgb( 0, 139, 139)", darkgoldenrod: "rgb(184, 134, 11)", darkgray: "rgb(169, 169, 169)", darkgreen: "rgb( 0, 100, 0)", darkgrey: "rgb(169, 169, 169)", darkkhaki: "rgb(189, 183, 107)", darkmagenta: "rgb(139, 0, 139)", darkolivegreen: "rgb( 85, 107, 47)", darkorange: "rgb(255, 140, 0)", darkorchid: "rgb(153, 50, 204)", darkred: "rgb(139, 0, 0)", darksalmon: "rgb(233, 150, 122)", darkseagreen: "rgb(143, 188, 143)", darkslateblue: "rgb( 72, 61, 139)", darkslategray: "rgb( 47, 79, 79)", darkslategrey: "rgb( 47, 79, 79)", darkturquoise: "rgb( 0, 206, 209)", darkviolet: "rgb(148, 0, 211)", deeppink: "rgb(255, 20, 147)", deepskyblue: "rgb( 0, 191, 255)", dimgray: "rgb(105, 105, 105)", dimgrey: "rgb(105, 105, 105)", dodgerblue: "rgb( 30, 144, 255)", firebrick: "rgb(178, 34, 34)", floralwhite: "rgb(255, 250, 240)", forestgreen: "rgb( 34, 139, 34)", fuchsia: "rgb(255, 0, 255)", gainsboro: "rgb(220, 220, 220)", ghostwhite: "rgb(248, 248, 255)", gold: "rgb(255, 215, 0)", goldenrod: "rgb(218, 165, 32)", gray: "rgb(128, 128, 128)", grey: "rgb(128, 128, 128)", green: "rgb( 0, 128, 0)", greenyellow: "rgb(173, 255, 47)", honeydew: "rgb(240, 255, 240)", hotpink: "rgb(255, 105, 180)", indianred: "rgb(205, 92, 92)", indigo: "rgb( 75, 0, 130)", ivory: "rgb(255, 255, 240)", khaki: "rgb(240, 230, 140)", lavender: "rgb(230, 230, 250)", lavenderblush: "rgb(255, 240, 245)", lawngreen: "rgb(124, 252, 0)", lemonchiffon: "rgb(255, 250, 205)", lightblue: "rgb(173, 216, 230)", lightcoral: "rgb(240, 128, 128)", lightcyan: "rgb(224, 255, 255)", lightgoldenrodyellow: "rgb(250, 250, 210)", lightgray: "rgb(211, 211, 211)", lightgreen: "rgb(144, 238, 144)", lightgrey: "rgb(211, 211, 211)", lightpink: "rgb(255, 182, 193)", lightsalmon: "rgb(255, 160, 122)", lightseagreen: "rgb( 32, 178, 170)", lightskyblue: "rgb(135, 206, 250)", lightslategray: "rgb(119, 136, 153)", lightslategrey: "rgb(119, 136, 153)", lightsteelblue: "rgb(176, 196, 222)", lightyellow: "rgb(255, 255, 224)", lime: "rgb( 0, 255, 0)", limegreen: "rgb( 50, 205, 50)", linen: "rgb(250, 240, 230)", magenta: "rgb(255, 0, 255)", maroon: "rgb(128, 0, 0)", mediumaquamarine: "rgb(102, 205, 170)", mediumblue: "rgb( 0, 0, 205)", mediumorchid: "rgb(186, 85, 211)", mediumpurple: "rgb(147, 112, 219)", mediumseagreen: "rgb( 60, 179, 113)", mediumslateblue: "rgb(123, 104, 238)", mediumspringgreen: "rgb( 0, 250, 154)", mediumturquoise: "rgb( 72, 209, 204)", mediumvioletred: "rgb(199, 21, 133)", midnightblue: "rgb( 25, 25, 112)", mintcream: "rgb(245, 255, 250)", mistyrose: "rgb(255, 228, 225)", moccasin: "rgb(255, 228, 181)", navajowhite: "rgb(255, 222, 173)", navy: "rgb( 0, 0, 128)", oldlace: "rgb(253, 245, 230)", olive: "rgb(128, 128, 0)", olivedrab: "rgb(107, 142, 35)", orange: "rgb(255, 165, 0)", orangered: "rgb(255, 69, 0)", orchid: "rgb(218, 112, 214)", palegoldenrod: "rgb(238, 232, 170)", palegreen: "rgb(152, 251, 152)", paleturquoise: "rgb(175, 238, 238)", palevioletred: "rgb(219, 112, 147)", papayawhip: "rgb(255, 239, 213)", peachpuff: "rgb(255, 218, 185)", peru: "rgb(205, 133, 63)", pink: "rgb(255, 192, 203)", plum: "rgb(221, 160, 221)", powderblue: "rgb(176, 224, 230)", purple: "rgb(128, 0, 128)", red: "rgb(255, 0, 0)", rosybrown: "rgb(188, 143, 143)", royalblue: "rgb( 65, 105, 225)", saddlebrown: "rgb(139, 69, 19)", salmon: "rgb(250, 128, 114)", sandybrown: "rgb(244, 164, 96)", seagreen: "rgb( 46, 139, 87)", seashell: "rgb(255, 245, 238)", sienna: "rgb(160, 82, 45)", silver: "rgb(192, 192, 192)", skyblue: "rgb(135, 206, 235)", slateblue: "rgb(106, 90, 205)", slategray: "rgb(112, 128, 144)", slategrey: "rgb(112, 128, 144)", snow: "rgb(255, 250, 250)", springgreen: "rgb( 0, 255, 127)", steelblue: "rgb( 70, 130, 180)", tan: "rgb(210, 180, 140)", teal: "rgb( 0, 128, 128)", thistle: "rgb(216, 191, 216)", tomato: "rgb(255, 99, 71)", turquoise: "rgb( 64, 224, 208)", violet: "rgb(238, 130, 238)", wheat: "rgb(245, 222, 179)", white: "rgb(255, 255, 255)", whitesmoke: "rgb(245, 245, 245)", yellow: "rgb(255, 255, 0)", yellowgreen: "rgb(154, 205, 50)"};
    L.jqplot.AxisLabelRenderer = function (ah) {
        L.jqplot.ElemContainer.call(this);
        this.axis;
        this.show = true;
        this.label = "";
        this.fontFamily = null;
        this.fontSize = null;
        this.textColor = null;
        this._elem;
        this.escapeHTML = false;
        L.extend(true, this, ah)
    };
    L.jqplot.AxisLabelRenderer.prototype = new L.jqplot.ElemContainer();
    L.jqplot.AxisLabelRenderer.prototype.constructor = L.jqplot.AxisLabelRenderer;
    L.jqplot.AxisLabelRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.AxisLabelRenderer.prototype.draw = function (ah, ai) {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null
        }
        this._elem = L('<div style="position:absolute;" class="jqplot-' + this.axis + '-label"></div>');
        if (Number(this.label)) {
            this._elem.css("white-space", "nowrap")
        }
        if (!this.escapeHTML) {
            this._elem.html(this.label)
        } else {
            this._elem.text(this.label)
        }
        if (this.fontFamily) {
            this._elem.css("font-family", this.fontFamily)
        }
        if (this.fontSize) {
            this._elem.css("font-size", this.fontSize)
        }
        if (this.textColor) {
            this._elem.css("color", this.textColor)
        }
        return this._elem
    };
    L.jqplot.AxisLabelRenderer.prototype.pack = function () {
    };
    L.jqplot.AxisTickRenderer = function (ah) {
        L.jqplot.ElemContainer.call(this);
        this.mark = "outside";
        this.axis;
        this.showMark = true;
        this.showGridline = true;
        this.isMinorTick = false;
        this.size = 4;
        this.markSize = 6;
        this.show = true;
        this.showLabel = true;
        this.label = null;
        this.value = null;
        this._styles = {};
        this.formatter = L.jqplot.DefaultTickFormatter;
        this.prefix = "";
        this.suffix = "";
        this.formatString = "";
        this.fontFamily;
        this.fontSize;
        this.textColor;
        this.escapeHTML = false;
        this._elem;
        this._breakTick = false;
        L.extend(true, this, ah)
    };
    L.jqplot.AxisTickRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.AxisTickRenderer.prototype = new L.jqplot.ElemContainer();
    L.jqplot.AxisTickRenderer.prototype.constructor = L.jqplot.AxisTickRenderer;
    L.jqplot.AxisTickRenderer.prototype.setTick = function (ah, aj, ai) {
        this.value = ah;
        this.axis = aj;
        if (ai) {
            this.isMinorTick = true
        }
        return this
    };
    L.jqplot.AxisTickRenderer.prototype.draw = function () {
        if (this.label === null) {
            this.label = this.prefix + this.formatter(this.formatString, this.value) + this.suffix
        }
        var ai = {position: "absolute"};
        if (Number(this.label)) {
            ai.whitSpace = "nowrap"
        }
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null
        }
        this._elem = L(document.createElement("div"));
        this._elem.addClass("jqplot-" + this.axis + "-tick");
        if (!this.escapeHTML) {
            this._elem.html(this.label)
        } else {
            this._elem.text(this.label)
        }
        this._elem.css(ai);
        for (var ah in this._styles) {
            this._elem.css(ah, this._styles[ah])
        }
        if (this.fontFamily) {
            this._elem.css("font-family", this.fontFamily)
        }
        if (this.fontSize) {
            this._elem.css("font-size", this.fontSize)
        }
        if (this.textColor) {
            this._elem.css("color", this.textColor)
        }
        if (this._breakTick) {
            this._elem.addClass("jqplot-breakTick")
        }
        return this._elem
    };
    L.jqplot.DefaultTickFormatter = function (ah, ai) {
        if (typeof ai == "number") {
            if (!ah) {
                ah = L.jqplot.config.defaultTickFormatString
            }
            return L.jqplot.sprintf(ah, ai)
        } else {
            return String(ai)
        }
    };
    L.jqplot.PercentTickFormatter = function (ah, ai) {
        if (typeof ai == "number") {
            ai = 100 * ai;
            if (!ah) {
                ah = L.jqplot.config.defaultTickFormatString
            }
            return L.jqplot.sprintf(ah, ai)
        } else {
            return String(ai)
        }
    };
    L.jqplot.AxisTickRenderer.prototype.pack = function () {
    };
    L.jqplot.CanvasGridRenderer = function () {
        this.shadowRenderer = new L.jqplot.ShadowRenderer()
    };
    L.jqplot.CanvasGridRenderer.prototype.init = function (ai) {
        this._ctx;
        L.extend(true, this, ai);
        var ah = {lineJoin: "miter", lineCap: "round", fill: false, isarc: false, angle: this.shadowAngle, offset: this.shadowOffset, alpha: this.shadowAlpha, depth: this.shadowDepth, lineWidth: this.shadowWidth, closePath: false, strokeStyle: this.shadowColor};
        this.renderer.shadowRenderer.init(ah)
    };
    L.jqplot.CanvasGridRenderer.prototype.createElement = function (ak) {
        var aj;
        if (this._elem) {
            if (L.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== u) {
                aj = this._elem.get(0);
                window.G_vmlCanvasManager.uninitElement(aj);
                aj = null
            }
            this._elem.emptyForce();
            this._elem = null
        }
        aj = ak.canvasManager.getCanvas();
        var ah = this._plotDimensions.width;
        var ai = this._plotDimensions.height;
        aj.width = ah;
        aj.height = ai;
        this._elem = L(aj);
        this._elem.addClass("jqplot-grid-canvas");
        this._elem.css({position: "absolute", left: 0, top: 0});
        aj = ak.canvasManager.initCanvas(aj);
        this._top = this._offsets.top;
        this._bottom = ai - this._offsets.bottom;
        this._left = this._offsets.left;
        this._right = ah - this._offsets.right;
        this._width = this._right - this._left;
        this._height = this._bottom - this._top;
        aj = null;
        return this._elem
    };
    L.jqplot.CanvasGridRenderer.prototype.draw = function () {
        this._ctx = this._elem.get(0).getContext("2d");
        var at = this._ctx;
        var aw = this._axes;
        at.save();
        at.clearRect(0, 0, this._plotDimensions.width, this._plotDimensions.height);
        at.fillStyle = this.backgroundColor || this.background;
        at.fillRect(this._left, this._top, this._width, this._height);
        at.save();
        at.lineJoin = "miter";
        at.lineCap = "butt";
        at.lineWidth = this.gridLineWidth;
        at.strokeStyle = this.gridLineColor;
        var aA, az, ap, aq;
        var am = ["xaxis", "yaxis", "x2axis", "y2axis"];
        for (var ay = 4; ay > 0; ay--) {
            var aD = am[ay - 1];
            var ah = aw[aD];
            var aB = ah._ticks;
            var ar = aB.length;
            if (ah.show) {
                if (ah.drawBaseline) {
                    var aC = {};
                    if (ah.baselineWidth !== null) {
                        aC.lineWidth = ah.baselineWidth
                    }
                    if (ah.baselineColor !== null) {
                        aC.strokeStyle = ah.baselineColor
                    }
                    switch (aD) {
                        case"xaxis":
                            ao(this._left, this._bottom, this._right, this._bottom, aC);
                            break;
                        case"yaxis":
                            ao(this._left, this._bottom, this._left, this._top, aC);
                            break;
                        case"x2axis":
                            ao(this._left, this._bottom, this._right, this._bottom, aC);
                            break;
                        case"y2axis":
                            ao(this._right, this._bottom, this._right, this._top, aC);
                            break
                    }
                }
                for (var au = ar; au > 0; au--) {
                    var an = aB[au - 1];
                    if (an.show) {
                        var ak = Math.round(ah.u2p(an.value)) + 0.5;
                        switch (aD) {
                            case"xaxis":
                                if (an.showGridline && this.drawGridlines && ((!an.isMinorTick && ah.drawMajorGridlines) || (an.isMinorTick && ah.drawMinorGridlines))) {
                                    ao(ak, this._top, ak, this._bottom)
                                }
                                if (an.showMark && an.mark && ((!an.isMinorTick && ah.drawMajorTickMarks) || (an.isMinorTick && ah.drawMinorTickMarks))) {
                                    ap = an.markSize;
                                    aq = an.mark;
                                    var ak = Math.round(ah.u2p(an.value)) + 0.5;
                                    switch (aq) {
                                        case"outside":
                                            aA = this._bottom;
                                            az = this._bottom + ap;
                                            break;
                                        case"inside":
                                            aA = this._bottom - ap;
                                            az = this._bottom;
                                            break;
                                        case"cross":
                                            aA = this._bottom - ap;
                                            az = this._bottom + ap;
                                            break;
                                        default:
                                            aA = this._bottom;
                                            az = this._bottom + ap;
                                            break
                                    }
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(at, [
                                            [ak, aA],
                                            [ak, az]
                                        ], {lineCap: "butt", lineWidth: this.gridLineWidth, offset: this.gridLineWidth * 0.75, depth: 2, fill: false, closePath: false})
                                    }
                                    ao(ak, aA, ak, az)
                                }
                                break;
                            case"yaxis":
                                if (an.showGridline && this.drawGridlines && ((!an.isMinorTick && ah.drawMajorGridlines) || (an.isMinorTick && ah.drawMinorGridlines))) {
                                    ao(this._right, ak, this._left, ak)
                                }
                                if (an.showMark && an.mark && ((!an.isMinorTick && ah.drawMajorTickMarks) || (an.isMinorTick && ah.drawMinorTickMarks))) {
                                    ap = an.markSize;
                                    aq = an.mark;
                                    var ak = Math.round(ah.u2p(an.value)) + 0.5;
                                    switch (aq) {
                                        case"outside":
                                            aA = this._left - ap;
                                            az = this._left;
                                            break;
                                        case"inside":
                                            aA = this._left;
                                            az = this._left + ap;
                                            break;
                                        case"cross":
                                            aA = this._left - ap;
                                            az = this._left + ap;
                                            break;
                                        default:
                                            aA = this._left - ap;
                                            az = this._left;
                                            break
                                    }
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(at, [
                                            [aA, ak],
                                            [az, ak]
                                        ], {lineCap: "butt", lineWidth: this.gridLineWidth * 1.5, offset: this.gridLineWidth * 0.75, fill: false, closePath: false})
                                    }
                                    ao(aA, ak, az, ak, {strokeStyle: ah.borderColor})
                                }
                                break;
                            case"x2axis":
                                if (an.showGridline && this.drawGridlines && ((!an.isMinorTick && ah.drawMajorGridlines) || (an.isMinorTick && ah.drawMinorGridlines))) {
                                    ao(ak, this._bottom, ak, this._top)
                                }
                                if (an.showMark && an.mark && ((!an.isMinorTick && ah.drawMajorTickMarks) || (an.isMinorTick && ah.drawMinorTickMarks))) {
                                    ap = an.markSize;
                                    aq = an.mark;
                                    var ak = Math.round(ah.u2p(an.value)) + 0.5;
                                    switch (aq) {
                                        case"outside":
                                            aA = this._top - ap;
                                            az = this._top;
                                            break;
                                        case"inside":
                                            aA = this._top;
                                            az = this._top + ap;
                                            break;
                                        case"cross":
                                            aA = this._top - ap;
                                            az = this._top + ap;
                                            break;
                                        default:
                                            aA = this._top - ap;
                                            az = this._top;
                                            break
                                    }
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(at, [
                                            [ak, aA],
                                            [ak, az]
                                        ], {lineCap: "butt", lineWidth: this.gridLineWidth, offset: this.gridLineWidth * 0.75, depth: 2, fill: false, closePath: false})
                                    }
                                    ao(ak, aA, ak, az)
                                }
                                break;
                            case"y2axis":
                                if (an.showGridline && this.drawGridlines && ((!an.isMinorTick && ah.drawMajorGridlines) || (an.isMinorTick && ah.drawMinorGridlines))) {
                                    ao(this._left, ak, this._right, ak)
                                }
                                if (an.showMark && an.mark && ((!an.isMinorTick && ah.drawMajorTickMarks) || (an.isMinorTick && ah.drawMinorTickMarks))) {
                                    ap = an.markSize;
                                    aq = an.mark;
                                    var ak = Math.round(ah.u2p(an.value)) + 0.5;
                                    switch (aq) {
                                        case"outside":
                                            aA = this._right;
                                            az = this._right + ap;
                                            break;
                                        case"inside":
                                            aA = this._right - ap;
                                            az = this._right;
                                            break;
                                        case"cross":
                                            aA = this._right - ap;
                                            az = this._right + ap;
                                            break;
                                        default:
                                            aA = this._right;
                                            az = this._right + ap;
                                            break
                                    }
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(at, [
                                            [aA, ak],
                                            [az, ak]
                                        ], {lineCap: "butt", lineWidth: this.gridLineWidth * 1.5, offset: this.gridLineWidth * 0.75, fill: false, closePath: false})
                                    }
                                    ao(aA, ak, az, ak, {strokeStyle: ah.borderColor})
                                }
                                break;
                            default:
                                break
                        }
                    }
                }
                an = null
            }
            ah = null;
            aB = null
        }
        am = ["y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis", "yMidAxis"];
        for (var ay = 7; ay > 0; ay--) {
            var ah = aw[am[ay - 1]];
            var aB = ah._ticks;
            if (ah.show) {
                var ai = aB[ah.numberTicks - 1];
                var al = aB[0];
                var aj = ah.getLeft();
                var av = [
                    [aj, ai.getTop() + ai.getHeight() / 2],
                    [aj, al.getTop() + al.getHeight() / 2 + 1]
                ];
                if (this.shadow) {
                    this.renderer.shadowRenderer.draw(at, av, {lineCap: "butt", fill: false, closePath: false})
                }
                ao(av[0][0], av[0][1], av[1][0], av[1][1], {lineCap: "butt", strokeStyle: ah.borderColor, lineWidth: ah.borderWidth});
                for (var au = aB.length; au > 0; au--) {
                    var an = aB[au - 1];
                    ap = an.markSize;
                    aq = an.mark;
                    var ak = Math.round(ah.u2p(an.value)) + 0.5;
                    if (an.showMark && an.mark) {
                        switch (aq) {
                            case"outside":
                                aA = aj;
                                az = aj + ap;
                                break;
                            case"inside":
                                aA = aj - ap;
                                az = aj;
                                break;
                            case"cross":
                                aA = aj - ap;
                                az = aj + ap;
                                break;
                            default:
                                aA = aj;
                                az = aj + ap;
                                break
                        }
                        av = [
                            [aA, ak],
                            [az, ak]
                        ];
                        if (this.shadow) {
                            this.renderer.shadowRenderer.draw(at, av, {lineCap: "butt", lineWidth: this.gridLineWidth * 1.5, offset: this.gridLineWidth * 0.75, fill: false, closePath: false})
                        }
                        ao(aA, ak, az, ak, {strokeStyle: ah.borderColor})
                    }
                    an = null
                }
                al = null
            }
            ah = null;
            aB = null
        }
        at.restore();
        function ao(aH, aG, aE, ax, aF) {
            at.save();
            aF = aF || {};
            if (aF.lineWidth == null || aF.lineWidth != 0) {
                L.extend(true, at, aF);
                at.beginPath();
                at.moveTo(aH, aG);
                at.lineTo(aE, ax);
                at.stroke();
                at.restore()
            }
        }

        if (this.shadow) {
            var av = [
                [this._left, this._bottom],
                [this._right, this._bottom],
                [this._right, this._top]
            ];
            this.renderer.shadowRenderer.draw(at, av)
        }
        if (this.borderWidth != 0 && this.drawBorder) {
            ao(this._left, this._top, this._right, this._top, {lineCap: "round", strokeStyle: aw.x2axis.borderColor, lineWidth: aw.x2axis.borderWidth});
            ao(this._right, this._top, this._right, this._bottom, {lineCap: "round", strokeStyle: aw.y2axis.borderColor, lineWidth: aw.y2axis.borderWidth});
            ao(this._right, this._bottom, this._left, this._bottom, {lineCap: "round", strokeStyle: aw.xaxis.borderColor, lineWidth: aw.xaxis.borderWidth});
            ao(this._left, this._bottom, this._left, this._top, {lineCap: "round", strokeStyle: aw.yaxis.borderColor, lineWidth: aw.yaxis.borderWidth})
        }
        at.restore();
        at = null;
        aw = null
    };
    L.jqplot.DivTitleRenderer = function () {
    };
    L.jqplot.DivTitleRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.DivTitleRenderer.prototype.draw = function () {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null
        }
        var ak = this.renderer;
        var aj = document.createElement("div");
        this._elem = L(aj);
        this._elem.addClass("jqplot-title");
        if (!this.text) {
            this.show = false;
            this._elem.height(0);
            this._elem.width(0)
        } else {
            if (this.text) {
                var ah;
                if (this.color) {
                    ah = this.color
                } else {
                    if (this.textColor) {
                        ah = this.textColor
                    }
                }
                var ai = {position: "absolute", top: "0px", left: "0px"};
                if (this._plotWidth) {
                    ai.width = this._plotWidth + "px"
                }
                if (this.fontSize) {
                    ai.fontSize = this.fontSize
                }
                if (typeof this.textAlign === "string") {
                    ai.textAlign = this.textAlign
                } else {
                    ai.textAlign = "center"
                }
                if (ah) {
                    ai.color = ah
                }
                if (this.paddingBottom) {
                    ai.paddingBottom = this.paddingBottom
                }
                if (this.fontFamily) {
                    ai.fontFamily = this.fontFamily
                }
                this._elem.css(ai);
                if (this.escapeHtml) {
                    this._elem.text(this.text)
                } else {
                    this._elem.html(this.text)
                }
            }
        }
        aj = null;
        return this._elem
    };
    L.jqplot.DivTitleRenderer.prototype.pack = function () {
    };
    var r = 0.1;
    L.jqplot.LinePattern = function (aw, aq) {
        var ap = {dotted: [r, L.jqplot.config.dotGapLength], dashed: [L.jqplot.config.dashLength, L.jqplot.config.gapLength], solid: null};
        if (typeof aq === "string") {
            if (aq[0] === "." || aq[0] === "-") {
                var ax = aq;
                aq = [];
                for (var ao = 0, al = ax.length; ao < al; ao++) {
                    if (ax[ao] === ".") {
                        aq.push(r)
                    } else {
                        if (ax[ao] === "-") {
                            aq.push(L.jqplot.config.dashLength)
                        } else {
                            continue
                        }
                    }
                    aq.push(L.jqplot.config.gapLength)
                }
            } else {
                aq = ap[aq]
            }
        }
        if (!(aq && aq.length)) {
            return aw
        }
        var ak = 0;
        var ar = aq[0];
        var au = 0;
        var at = 0;
        var an = 0;
        var ah = 0;
        var av = function (ay, az) {
            aw.moveTo(ay, az);
            au = ay;
            at = az;
            an = ay;
            ah = az
        };
        var aj = function (ay, aE) {
            var aC = aw.lineWidth;
            var aA = ay - au;
            var az = aE - at;
            var aB = Math.sqrt(aA * aA + az * az);
            if ((aB > 0) && (aC > 0)) {
                aA /= aB;
                az /= aB;
                while (true) {
                    var aD = aC * ar;
                    if (aD < aB) {
                        au += aD * aA;
                        at += aD * az;
                        if ((ak & 1) == 0) {
                            aw.lineTo(au, at)
                        } else {
                            aw.moveTo(au, at)
                        }
                        aB -= aD;
                        ak++;
                        if (ak >= aq.length) {
                            ak = 0
                        }
                        ar = aq[ak]
                    } else {
                        au = ay;
                        at = aE;
                        if ((ak & 1) == 0) {
                            aw.lineTo(au, at)
                        } else {
                            aw.moveTo(au, at)
                        }
                        ar -= aB / aC;
                        break
                    }
                }
            }
        };
        var ai = function () {
            aw.beginPath()
        };
        var am = function () {
            aj(an, ah)
        };
        return{moveTo: av, lineTo: aj, beginPath: ai, closePath: am}
    };
    L.jqplot.LineRenderer = function () {
        this.shapeRenderer = new L.jqplot.ShapeRenderer();
        this.shadowRenderer = new L.jqplot.ShadowRenderer()
    };
    L.jqplot.LineRenderer.prototype.init = function (ai, an) {
        ai = ai || {};
        this._type = "line";
        this.renderer.animation = {show: false, direction: "left", speed: 2500, _supported: true};
        this.renderer.smooth = false;
        this.renderer.tension = null;
        this.renderer.constrainSmoothing = true;
        this.renderer._smoothedData = [];
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];
        this.renderer.bandData = [];
        this.renderer.bands = {show: false, hiData: [], lowData: [], color: this.color, showLines: false, fill: true, fillColor: null, _min: null, _max: null, interval: "3%"};
        var al = {highlightMouseOver: ai.highlightMouseOver, highlightMouseDown: ai.highlightMouseDown, highlightColor: ai.highlightColor};
        delete (ai.highlightMouseOver);
        delete (ai.highlightMouseDown);
        delete (ai.highlightColor);
        L.extend(true, this.renderer, ai);
        this.renderer.options = ai;
        if (this.renderer.bandData.length > 1 && (!ai.bands || ai.bands.show == null)) {
            this.renderer.bands.show = true
        } else {
            if (ai.bands && ai.bands.show == null && ai.bands.interval != null) {
                this.renderer.bands.show = true
            }
        }
        if (this.fill) {
            this.renderer.bands.show = false
        }
        if (this.renderer.bands.show) {
            this.renderer.initBands.call(this, this.renderer.options, an)
        }
        if (this._stack) {
            this.renderer.smooth = false
        }
        var am = {lineJoin: this.lineJoin, lineCap: this.lineCap, fill: this.fill, isarc: false, strokeStyle: this.color, fillStyle: this.fillColor, lineWidth: this.lineWidth, linePattern: this.linePattern, closePath: this.fill};
        this.renderer.shapeRenderer.init(am);
        var aj = ai.shadowOffset;
        if (aj == null) {
            if (this.lineWidth > 2.5) {
                aj = 1.25 * (1 + (Math.atan((this.lineWidth / 2.5)) / 0.785398163 - 1) * 0.6)
            } else {
                aj = 1.25 * Math.atan((this.lineWidth / 2.5)) / 0.785398163
            }
        }
        var ah = {lineJoin: this.lineJoin, lineCap: this.lineCap, fill: this.fill, isarc: false, angle: this.shadowAngle, offset: aj, alpha: this.shadowAlpha, depth: this.shadowDepth, lineWidth: this.lineWidth, linePattern: this.linePattern, closePath: this.fill};
        this.renderer.shadowRenderer.init(ah);
        this._areaPoints = [];
        this._boundingBox = [
            [],
            []
        ];
        if (!this.isTrendline && this.fill || this.renderer.bands.show) {
            this.highlightMouseOver = true;
            this.highlightMouseDown = false;
            this.highlightColor = null;
            if (al.highlightMouseDown && al.highlightMouseOver == null) {
                al.highlightMouseOver = false
            }
            L.extend(true, this, {highlightMouseOver: al.highlightMouseOver, highlightMouseDown: al.highlightMouseDown, highlightColor: al.highlightColor});
            if (!this.highlightColor) {
                var ak = (this.renderer.bands.show) ? this.renderer.bands.fillColor : this.fillColor;
                this.highlightColor = L.jqplot.computeHighlightColors(ak)
            }
            if (this.highlighter) {
                this.highlighter.show = false
            }
        }
        if (!this.isTrendline && an) {
            an.plugins.lineRenderer = {};
            an.postInitHooks.addOnce(z);
            an.postDrawHooks.addOnce(af);
            an.eventListenerHooks.addOnce("jqplotMouseMove", h);
            an.eventListenerHooks.addOnce("jqplotMouseDown", e);
            an.eventListenerHooks.addOnce("jqplotMouseUp", ad);
            an.eventListenerHooks.addOnce("jqplotClick", g);
            an.eventListenerHooks.addOnce("jqplotRightClick", s)
        }
    };
    L.jqplot.LineRenderer.prototype.initBands = function (ak, av) {
        var al = ak.bandData || [];
        var an = this.renderer.bands;
        an.hiData = [];
        an.lowData = [];
        var aB = this.data;
        an._max = null;
        an._min = null;
        if (al.length == 2) {
            if (L.isArray(al[0][0])) {
                var ao;
                var ah = 0, ar = 0;
                for (var aw = 0, at = al[0].length; aw < at; aw++) {
                    ao = al[0][aw];
                    if ((ao[1] != null && ao[1] > an._max) || an._max == null) {
                        an._max = ao[1]
                    }
                    if ((ao[1] != null && ao[1] < an._min) || an._min == null) {
                        an._min = ao[1]
                    }
                }
                for (var aw = 0, at = al[1].length; aw < at; aw++) {
                    ao = al[1][aw];
                    if ((ao[1] != null && ao[1] > an._max) || an._max == null) {
                        an._max = ao[1];
                        ar = 1
                    }
                    if ((ao[1] != null && ao[1] < an._min) || an._min == null) {
                        an._min = ao[1];
                        ah = 1
                    }
                }
                if (ar === ah) {
                    an.show = false
                }
                an.hiData = al[ar];
                an.lowData = al[ah]
            } else {
                if (al[0].length === aB.length && al[1].length === aB.length) {
                    var aj = (al[0][0] > al[1][0]) ? 0 : 1;
                    var aC = (aj) ? 0 : 1;
                    for (var aw = 0, at = aB.length; aw < at; aw++) {
                        an.hiData.push([aB[aw][0], al[aj][aw]]);
                        an.lowData.push([aB[aw][0], al[aC][aw]])
                    }
                } else {
                    an.show = false
                }
            }
        } else {
            if (al.length > 2 && !L.isArray(al[0][0])) {
                var aj = (al[0][0] > al[0][1]) ? 0 : 1;
                var aC = (aj) ? 0 : 1;
                for (var aw = 0, at = al.length; aw < at; aw++) {
                    an.hiData.push([aB[aw][0], al[aw][aj]]);
                    an.lowData.push([aB[aw][0], al[aw][aC]])
                }
            } else {
                var aq = an.interval;
                var aA = null;
                var az = null;
                var ai = null;
                var au = null;
                if (L.isArray(aq)) {
                    aA = aq[0];
                    az = aq[1]
                } else {
                    aA = aq
                }
                if (isNaN(aA)) {
                    if (aA.charAt(aA.length - 1) === "%") {
                        ai = "multiply";
                        aA = parseFloat(aA) / 100 + 1
                    }
                } else {
                    aA = parseFloat(aA);
                    ai = "add"
                }
                if (az !== null && isNaN(az)) {
                    if (az.charAt(az.length - 1) === "%") {
                        au = "multiply";
                        az = parseFloat(az) / 100 + 1
                    }
                } else {
                    if (az !== null) {
                        az = parseFloat(az);
                        au = "add"
                    }
                }
                if (aA !== null) {
                    if (az === null) {
                        az = -aA;
                        au = ai;
                        if (au === "multiply") {
                            az += 2
                        }
                    }
                    if (aA < az) {
                        var ax = aA;
                        aA = az;
                        az = ax;
                        ax = ai;
                        ai = au;
                        au = ax
                    }
                    for (var aw = 0, at = aB.length; aw < at; aw++) {
                        switch (ai) {
                            case"add":
                                an.hiData.push([aB[aw][0], aB[aw][1] + aA]);
                                break;
                            case"multiply":
                                an.hiData.push([aB[aw][0], aB[aw][1] * aA]);
                                break
                        }
                        switch (au) {
                            case"add":
                                an.lowData.push([aB[aw][0], aB[aw][1] + az]);
                                break;
                            case"multiply":
                                an.lowData.push([aB[aw][0], aB[aw][1] * az]);
                                break
                        }
                    }
                } else {
                    an.show = false
                }
            }
        }
        var am = an.hiData;
        var ap = an.lowData;
        for (var aw = 0, at = am.length; aw < at; aw++) {
            if ((am[aw][1] != null && am[aw][1] > an._max) || an._max == null) {
                an._max = am[aw][1]
            }
        }
        for (var aw = 0, at = ap.length; aw < at; aw++) {
            if ((ap[aw][1] != null && ap[aw][1] < an._min) || an._min == null) {
                an._min = ap[aw][1]
            }
        }
        if (an.fillColor === null) {
            var ay = L.jqplot.getColorComponents(an.color);
            ay[3] = ay[3] * 0.5;
            an.fillColor = "rgba(" + ay[0] + ", " + ay[1] + ", " + ay[2] + ", " + ay[3] + ")"
        }
    };
    function K(ai, ah) {
        return(3.4182054 + ah) * Math.pow(ai, -0.3534992)
    }

    function n(aj, ai) {
        var ah = Math.sqrt(Math.pow((ai[0] - aj[0]), 2) + Math.pow((ai[1] - aj[1]), 2));
        return 5.7648 * Math.log(ah) + 7.4456
    }

    function A(ah) {
        var ai = (Math.exp(2 * ah) - 1) / (Math.exp(2 * ah) + 1);
        return ai
    }

    function J(aJ) {
        var at = this.renderer.smooth;
        var aD = this.canvas.getWidth();
        var an = this._xaxis.series_p2u;
        var aG = this._yaxis.series_p2u;
        var aF = null;
        var am = null;
        var az = aJ.length / aD;
        var aj = [];
        var ay = [];
        if (!isNaN(parseFloat(at))) {
            aF = parseFloat(at)
        } else {
            aF = K(az, 0.5)
        }
        var aw = [];
        var ak = [];
        for (var aE = 0, aA = aJ.length; aE < aA; aE++) {
            aw.push(aJ[aE][1]);
            ak.push(aJ[aE][0])
        }
        function av(aK, aL) {
            if (aK - aL == 0) {
                return Math.pow(10, 10)
            } else {
                return aK - aL
            }
        }

        var ax, ar, aq, ap;
        var ah = aJ.length - 1;
        for (var al = 1, aB = aJ.length; al < aB; al++) {
            var ai = [];
            var au = [];
            for (var aC = 0; aC < 2; aC++) {
                var aE = al - 1 + aC;
                if (aE == 0 || aE == ah) {
                    ai[aC] = Math.pow(10, 10)
                } else {
                    if (aw[aE + 1] - aw[aE] == 0 || aw[aE] - aw[aE - 1] == 0) {
                        ai[aC] = 0
                    } else {
                        if (((ak[aE + 1] - ak[aE]) / (aw[aE + 1] - aw[aE]) + (ak[aE] - ak[aE - 1]) / (aw[aE] - aw[aE - 1])) == 0) {
                            ai[aC] = 0
                        } else {
                            if ((aw[aE + 1] - aw[aE]) * (aw[aE] - aw[aE - 1]) < 0) {
                                ai[aC] = 0
                            } else {
                                ai[aC] = 2 / (av(ak[aE + 1], ak[aE]) / (aw[aE + 1] - aw[aE]) + av(ak[aE], ak[aE - 1]) / (aw[aE] - aw[aE - 1]))
                            }
                        }
                    }
                }
            }
            if (al == 1) {
                ai[0] = 3 / 2 * (aw[1] - aw[0]) / av(ak[1], ak[0]) - ai[1] / 2
            } else {
                if (al == ah) {
                    ai[1] = 3 / 2 * (aw[ah] - aw[ah - 1]) / av(ak[ah], ak[ah - 1]) - ai[0] / 2
                }
            }
            au[0] = -2 * (ai[1] + 2 * ai[0]) / av(ak[al], ak[al - 1]) + 6 * (aw[al] - aw[al - 1]) / Math.pow(av(ak[al], ak[al - 1]), 2);
            au[1] = 2 * (2 * ai[1] + ai[0]) / av(ak[al], ak[al - 1]) - 6 * (aw[al] - aw[al - 1]) / Math.pow(av(ak[al], ak[al - 1]), 2);
            ap = 1 / 6 * (au[1] - au[0]) / av(ak[al], ak[al - 1]);
            aq = 1 / 2 * (ak[al] * au[0] - ak[al - 1] * au[1]) / av(ak[al], ak[al - 1]);
            ar = (aw[al] - aw[al - 1] - aq * (Math.pow(ak[al], 2) - Math.pow(ak[al - 1], 2)) - ap * (Math.pow(ak[al], 3) - Math.pow(ak[al - 1], 3))) / av(ak[al], ak[al - 1]);
            ax = aw[al - 1] - ar * ak[al - 1] - aq * Math.pow(ak[al - 1], 2) - ap * Math.pow(ak[al - 1], 3);
            var aI = (ak[al] - ak[al - 1]) / aF;
            var aH, ao;
            for (var aC = 0, aA = aF; aC < aA; aC++) {
                aH = [];
                ao = ak[al - 1] + aC * aI;
                aH.push(ao);
                aH.push(ax + ar * ao + aq * Math.pow(ao, 2) + ap * Math.pow(ao, 3));
                aj.push(aH);
                ay.push([an(aH[0]), aG(aH[1])])
            }
        }
        aj.push(aJ[aE]);
        ay.push([an(aJ[aE][0]), aG(aJ[aE][1])]);
        return[aj, ay]
    }

    function F(ap) {
        var ao = this.renderer.smooth;
        var aU = this.renderer.tension;
        var ah = this.canvas.getWidth();
        var aH = this._xaxis.series_p2u;
        var aq = this._yaxis.series_p2u;
        var aI = null;
        var aJ = null;
        var aT = null;
        var aO = null;
        var aM = null;
        var at = null;
        var aR = null;
        var am = null;
        var aK, aL, aD, aC, aA, ay;
        var ak, ai, av, au;
        var aB, az, aN;
        var aw = [];
        var aj = [];
        var al = ap.length / ah;
        var aS, ax, aF, aG, aE;
        var ar = [];
        var an = [];
        if (!isNaN(parseFloat(ao))) {
            aI = parseFloat(ao)
        } else {
            aI = K(al, 0.5)
        }
        if (!isNaN(parseFloat(aU))) {
            aU = parseFloat(aU)
        }
        for (var aQ = 0, aP = ap.length - 1; aQ < aP; aQ++) {
            if (aU === null) {
                at = Math.abs((ap[aQ + 1][1] - ap[aQ][1]) / (ap[aQ + 1][0] - ap[aQ][0]));
                aS = 0.3;
                ax = 0.6;
                aF = (ax - aS) / 2;
                aG = 2.5;
                aE = -1.4;
                am = at / aG + aE;
                aO = aF * A(am) - aF * A(aE) + aS;
                if (aQ > 0) {
                    aR = Math.abs((ap[aQ][1] - ap[aQ - 1][1]) / (ap[aQ][0] - ap[aQ - 1][0]))
                }
                am = aR / aG + aE;
                aM = aF * A(am) - aF * A(aE) + aS;
                aT = (aO + aM) / 2
            } else {
                aT = aU
            }
            for (aK = 0; aK < aI; aK++) {
                aL = aK / aI;
                aD = (1 + 2 * aL) * Math.pow((1 - aL), 2);
                aC = aL * Math.pow((1 - aL), 2);
                aA = Math.pow(aL, 2) * (3 - 2 * aL);
                ay = Math.pow(aL, 2) * (aL - 1);
                if (ap[aQ - 1]) {
                    ak = aT * (ap[aQ + 1][0] - ap[aQ - 1][0]);
                    ai = aT * (ap[aQ + 1][1] - ap[aQ - 1][1])
                } else {
                    ak = aT * (ap[aQ + 1][0] - ap[aQ][0]);
                    ai = aT * (ap[aQ + 1][1] - ap[aQ][1])
                }
                if (ap[aQ + 2]) {
                    av = aT * (ap[aQ + 2][0] - ap[aQ][0]);
                    au = aT * (ap[aQ + 2][1] - ap[aQ][1])
                } else {
                    av = aT * (ap[aQ + 1][0] - ap[aQ][0]);
                    au = aT * (ap[aQ + 1][1] - ap[aQ][1])
                }
                aB = aD * ap[aQ][0] + aA * ap[aQ + 1][0] + aC * ak + ay * av;
                az = aD * ap[aQ][1] + aA * ap[aQ + 1][1] + aC * ai + ay * au;
                aN = [aB, az];
                ar.push(aN);
                an.push([aH(aB), aq(az)])
            }
        }
        ar.push(ap[aP]);
        an.push([aH(ap[aP][0]), aq(ap[aP][1])]);
        return[ar, an]
    }

    L.jqplot.LineRenderer.prototype.setGridData = function (ap) {
        var al = this._xaxis.series_u2p;
        var ah = this._yaxis.series_u2p;
        var am = this._plotData;
        var aq = this._prevPlotData;
        this.gridData = [];
        this._prevGridData = [];
        this.renderer._smoothedData = [];
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];
        var ak = this.renderer.bands;
        var ai = false;
        for (var an = 0, aj = am.length; an < aj; an++) {
            if (am[an][0] != null && am[an][1] != null) {
                this.gridData.push([al.call(this._xaxis, am[an][0]), ah.call(this._yaxis, am[an][1])])
            } else {
                if (am[an][0] == null) {
                    ai = true;
                    this.gridData.push([null, ah.call(this._yaxis, am[an][1])])
                } else {
                    if (am[an][1] == null) {
                        ai = true;
                        this.gridData.push([al.call(this._xaxis, am[an][0]), null])
                    }
                }
            }
            if (aq[an] != null && aq[an][0] != null && aq[an][1] != null) {
                this._prevGridData.push([al.call(this._xaxis, aq[an][0]), ah.call(this._yaxis, aq[an][1])])
            } else {
                if (aq[an] != null && aq[an][0] == null) {
                    this._prevGridData.push([null, ah.call(this._yaxis, aq[an][1])])
                } else {
                    if (aq[an] != null && aq[an][0] != null && aq[an][1] == null) {
                        this._prevGridData.push([al.call(this._xaxis, aq[an][0]), null])
                    }
                }
            }
        }
        if (ai) {
            this.renderer.smooth = false;
            if (this._type === "line") {
                ak.show = false
            }
        }
        if (this._type === "line" && ak.show) {
            for (var an = 0, aj = ak.hiData.length; an < aj; an++) {
                this.renderer._hiBandGridData.push([al.call(this._xaxis, ak.hiData[an][0]), ah.call(this._yaxis, ak.hiData[an][1])])
            }
            for (var an = 0, aj = ak.lowData.length; an < aj; an++) {
                this.renderer._lowBandGridData.push([al.call(this._xaxis, ak.lowData[an][0]), ah.call(this._yaxis, ak.lowData[an][1])])
            }
        }
        if (this._type === "line" && this.renderer.smooth && this.gridData.length > 2) {
            var ao;
            if (this.renderer.constrainSmoothing) {
                ao = J.call(this, this.gridData);
                this.renderer._smoothedData = ao[0];
                this.renderer._smoothedPlotData = ao[1];
                if (ak.show) {
                    ao = J.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ao[0];
                    ao = J.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ao[0]
                }
                ao = null
            } else {
                ao = F.call(this, this.gridData);
                this.renderer._smoothedData = ao[0];
                this.renderer._smoothedPlotData = ao[1];
                if (ak.show) {
                    ao = F.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ao[0];
                    ao = F.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ao[0]
                }
                ao = null
            }
        }
    };
    L.jqplot.LineRenderer.prototype.makeGridData = function (ao, aq) {
        var am = this._xaxis.series_u2p;
        var ah = this._yaxis.series_u2p;
        var ar = [];
        var aj = [];
        this.renderer._smoothedData = [];
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];
        var al = this.renderer.bands;
        var ai = false;
        for (var an = 0; an < ao.length; an++) {
            if (ao[an][0] != null && ao[an][1] != null) {
                ar.push([am.call(this._xaxis, ao[an][0]), ah.call(this._yaxis, ao[an][1])])
            } else {
                if (ao[an][0] == null) {
                    ai = true;
                    ar.push([null, ah.call(this._yaxis, ao[an][1])])
                } else {
                    if (ao[an][1] == null) {
                        ai = true;
                        ar.push([am.call(this._xaxis, ao[an][0]), null])
                    }
                }
            }
        }
        if (ai) {
            this.renderer.smooth = false;
            if (this._type === "line") {
                al.show = false
            }
        }
        if (this._type === "line" && al.show) {
            for (var an = 0, ak = al.hiData.length; an < ak; an++) {
                this.renderer._hiBandGridData.push([am.call(this._xaxis, al.hiData[an][0]), ah.call(this._yaxis, al.hiData[an][1])])
            }
            for (var an = 0, ak = al.lowData.length; an < ak; an++) {
                this.renderer._lowBandGridData.push([am.call(this._xaxis, al.lowData[an][0]), ah.call(this._yaxis, al.lowData[an][1])])
            }
        }
        if (this._type === "line" && this.renderer.smooth && ar.length > 2) {
            var ap;
            if (this.renderer.constrainSmoothing) {
                ap = J.call(this, ar);
                this.renderer._smoothedData = ap[0];
                this.renderer._smoothedPlotData = ap[1];
                if (al.show) {
                    ap = J.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ap[0];
                    ap = J.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ap[0]
                }
                ap = null
            } else {
                ap = F.call(this, ar);
                this.renderer._smoothedData = ap[0];
                this.renderer._smoothedPlotData = ap[1];
                if (al.show) {
                    ap = F.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ap[0];
                    ap = F.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ap[0]
                }
                ap = null
            }
        }
        return ar
    };
    L.jqplot.LineRenderer.prototype.draw = function (ax, aI, ai, aB) {
        var aC;
        var aq = L.extend(true, {}, ai);
        var ak = (aq.shadow != u) ? aq.shadow : this.shadow;
        var aJ = (aq.showLine != u) ? aq.showLine : this.showLine;
        var aA = (aq.fill != u) ? aq.fill : this.fill;
        var ah = (aq.fillAndStroke != u) ? aq.fillAndStroke : this.fillAndStroke;
        var ar, ay, av, aE;
        ax.save();
        if (aI.length) {
            if (aJ) {
                if (aA) {
                    if (this.fillToZero) {
                        var aF = this.negativeColor;
                        if (!this.useNegativeColors) {
                            aF = aq.fillStyle
                        }
                        var ao = false;
                        var ap = aq.fillStyle;
                        if (ah) {
                            var aH = aI.slice(0)
                        }
                        if (this.index == 0 || !this._stack) {
                            var aw = [];
                            var aL = (this.renderer.smooth) ? this.renderer._smoothedPlotData : this._plotData;
                            this._areaPoints = [];
                            var aG = this._yaxis.series_u2p(this.fillToValue);
                            var aj = this._xaxis.series_u2p(this.fillToValue);
                            aq.closePath = true;
                            if (this.fillAxis == "y") {
                                aw.push([aI[0][0], aG]);
                                this._areaPoints.push([aI[0][0], aG]);
                                for (var aC = 0; aC < aI.length - 1; aC++) {
                                    aw.push(aI[aC]);
                                    this._areaPoints.push(aI[aC]);
                                    if (aL[aC][1] * aL[aC + 1][1] <= 0) {
                                        if (aL[aC][1] < 0) {
                                            ao = true;
                                            aq.fillStyle = aF
                                        } else {
                                            ao = false;
                                            aq.fillStyle = ap
                                        }
                                        var an = aI[aC][0] + (aI[aC + 1][0] - aI[aC][0]) * (aG - aI[aC][1]) / (aI[aC + 1][1] - aI[aC][1]);
                                        aw.push([an, aG]);
                                        this._areaPoints.push([an, aG]);
                                        if (ak) {
                                            this.renderer.shadowRenderer.draw(ax, aw, aq)
                                        }
                                        this.renderer.shapeRenderer.draw(ax, aw, aq);
                                        aw = [
                                            [an, aG]
                                        ]
                                    }
                                }
                                if (aL[aI.length - 1][1] < 0) {
                                    ao = true;
                                    aq.fillStyle = aF
                                } else {
                                    ao = false;
                                    aq.fillStyle = ap
                                }
                                aw.push(aI[aI.length - 1]);
                                this._areaPoints.push(aI[aI.length - 1]);
                                aw.push([aI[aI.length - 1][0], aG]);
                                this._areaPoints.push([aI[aI.length - 1][0], aG])
                            }
                            if (ak) {
                                this.renderer.shadowRenderer.draw(ax, aw, aq)
                            }
                            this.renderer.shapeRenderer.draw(ax, aw, aq)
                        } else {
                            var au = this._prevGridData;
                            for (var aC = au.length; aC > 0; aC--) {
                                aI.push(au[aC - 1])
                            }
                            if (ak) {
                                this.renderer.shadowRenderer.draw(ax, aI, aq)
                            }
                            this._areaPoints = aI;
                            this.renderer.shapeRenderer.draw(ax, aI, aq)
                        }
                    } else {
                        if (ah) {
                            var aH = aI.slice(0)
                        }
                        if (this.index == 0 || !this._stack) {
                            var al = ax.canvas.height;
                            aI.unshift([aI[0][0], al]);
                            var aD = aI.length;
                            aI.push([aI[aD - 1][0], al])
                        } else {
                            var au = this._prevGridData;
                            for (var aC = au.length; aC > 0; aC--) {
                                aI.push(au[aC - 1])
                            }
                        }
                        this._areaPoints = aI;
                        if (ak) {
                            this.renderer.shadowRenderer.draw(ax, aI, aq)
                        }
                        this.renderer.shapeRenderer.draw(ax, aI, aq)
                    }
                    if (ah) {
                        var az = L.extend(true, {}, aq, {fill: false, closePath: false});
                        this.renderer.shapeRenderer.draw(ax, aH, az);
                        if (this.markerRenderer.show) {
                            if (this.renderer.smooth) {
                                aH = this.gridData
                            }
                            for (aC = 0; aC < aH.length; aC++) {
                                this.markerRenderer.draw(aH[aC][0], aH[aC][1], ax, aq.markerOptions)
                            }
                        }
                    }
                } else {
                    if (this.renderer.bands.show) {
                        var am;
                        var aK = L.extend(true, {}, aq);
                        if (this.renderer.bands.showLines) {
                            am = (this.renderer.smooth) ? this.renderer._hiBandSmoothedData : this.renderer._hiBandGridData;
                            this.renderer.shapeRenderer.draw(ax, am, aq);
                            am = (this.renderer.smooth) ? this.renderer._lowBandSmoothedData : this.renderer._lowBandGridData;
                            this.renderer.shapeRenderer.draw(ax, am, aK)
                        }
                        if (this.renderer.bands.fill) {
                            if (this.renderer.smooth) {
                                am = this.renderer._hiBandSmoothedData.concat(this.renderer._lowBandSmoothedData.reverse())
                            } else {
                                am = this.renderer._hiBandGridData.concat(this.renderer._lowBandGridData.reverse())
                            }
                            this._areaPoints = am;
                            aK.closePath = true;
                            aK.fill = true;
                            aK.fillStyle = this.renderer.bands.fillColor;
                            this.renderer.shapeRenderer.draw(ax, am, aK)
                        }
                    }
                    if (ak) {
                        this.renderer.shadowRenderer.draw(ax, aI, aq)
                    }
                    this.renderer.shapeRenderer.draw(ax, aI, aq)
                }
            }
            var ar = av = ay = aE = null;
            for (aC = 0; aC < this._areaPoints.length; aC++) {
                var at = this._areaPoints[aC];
                if (ar > at[0] || ar == null) {
                    ar = at[0]
                }
                if (aE < at[1] || aE == null) {
                    aE = at[1]
                }
                if (av < at[0] || av == null) {
                    av = at[0]
                }
                if (ay > at[1] || ay == null) {
                    ay = at[1]
                }
            }
            if (this.type === "line" && this.renderer.bands.show) {
                aE = this._yaxis.series_u2p(this.renderer.bands._min);
                ay = this._yaxis.series_u2p(this.renderer.bands._max)
            }
            this._boundingBox = [
                [ar, aE],
                [av, ay]
            ];
            if (this.markerRenderer.show && !aA) {
                if (this.renderer.smooth) {
                    aI = this.gridData
                }
                for (aC = 0; aC < aI.length; aC++) {
                    if (aI[aC][0] != null && aI[aC][1] != null) {
                        this.markerRenderer.draw(aI[aC][0], aI[aC][1], ax, aq.markerOptions)
                    }
                }
            }
        }
        ax.restore()
    };
    L.jqplot.LineRenderer.prototype.drawShadow = function (ah, aj, ai) {
    };
    function z(ak, aj, ah) {
        for (var ai = 0; ai < this.series.length; ai++) {
            if (this.series[ai].renderer.constructor == L.jqplot.LineRenderer) {
                if (this.series[ai].highlightMouseOver) {
                    this.series[ai].highlightMouseDown = false
                }
            }
        }
    }

    function af() {
        if (this.plugins.lineRenderer && this.plugins.lineRenderer.highlightCanvas) {
            this.plugins.lineRenderer.highlightCanvas.resetCanvas();
            this.plugins.lineRenderer.highlightCanvas = null
        }
        this.plugins.lineRenderer.highlightedSeriesIndex = null;
        this.plugins.lineRenderer.highlightCanvas = new L.jqplot.GenericCanvas();
        this.eventCanvas._elem.before(this.plugins.lineRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-lineRenderer-highlight-canvas", this._plotDimensions, this));
        this.plugins.lineRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind("mouseleave", {plot: this}, function (ah) {
            aa(ah.data.plot)
        })
    }

    function ac(an, am, ak, aj) {
        var ai = an.series[am];
        var ah = an.plugins.lineRenderer.highlightCanvas;
        ah._ctx.clearRect(0, 0, ah._ctx.canvas.width, ah._ctx.canvas.height);
        ai._highlightedPoint = ak;
        an.plugins.lineRenderer.highlightedSeriesIndex = am;
        var al = {fillStyle: ai.highlightColor};
        if (ai.type === "line" && ai.renderer.bands.show) {
            al.fill = true;
            al.closePath = true
        }
        ai.renderer.shapeRenderer.draw(ah._ctx, aj, al);
        ah = null
    }

    function aa(aj) {
        var ah = aj.plugins.lineRenderer.highlightCanvas;
        ah._ctx.clearRect(0, 0, ah._ctx.canvas.width, ah._ctx.canvas.height);
        for (var ai = 0; ai < aj.series.length; ai++) {
            aj.series[ai]._highlightedPoint = null
        }
        aj.plugins.lineRenderer.highlightedSeriesIndex = null;
        aj.target.trigger("jqplotDataUnhighlight");
        ah = null
    }

    function h(al, ak, ao, an, am) {
        if (an) {
            var aj = [an.seriesIndex, an.pointIndex, an.data];
            var ai = jQuery.Event("jqplotDataMouseOver");
            ai.pageX = al.pageX;
            ai.pageY = al.pageY;
            am.target.trigger(ai, aj);
            if (am.series[aj[0]].highlightMouseOver && !(aj[0] == am.plugins.lineRenderer.highlightedSeriesIndex)) {
                var ah = jQuery.Event("jqplotDataHighlight");
                ah.which = al.which;
                ah.pageX = al.pageX;
                ah.pageY = al.pageY;
                am.target.trigger(ah, aj);
                ac(am, an.seriesIndex, an.pointIndex, an.points)
            }
        } else {
            if (an == null) {
                aa(am)
            }
        }
    }

    function e(ak, aj, an, am, al) {
        if (am) {
            var ai = [am.seriesIndex, am.pointIndex, am.data];
            if (al.series[ai[0]].highlightMouseDown && !(ai[0] == al.plugins.lineRenderer.highlightedSeriesIndex)) {
                var ah = jQuery.Event("jqplotDataHighlight");
                ah.which = ak.which;
                ah.pageX = ak.pageX;
                ah.pageY = ak.pageY;
                al.target.trigger(ah, ai);
                ac(al, am.seriesIndex, am.pointIndex, am.points)
            }
        } else {
            if (am == null) {
                aa(al)
            }
        }
    }

    function ad(aj, ai, am, al, ak) {
        var ah = ak.plugins.lineRenderer.highlightedSeriesIndex;
        if (ah != null && ak.series[ah].highlightMouseDown) {
            aa(ak)
        }
    }

    function g(ak, aj, an, am, al) {
        if (am) {
            var ai = [am.seriesIndex, am.pointIndex, am.data];
            var ah = jQuery.Event("jqplotDataClick");
            ah.which = ak.which;
            ah.pageX = ak.pageX;
            ah.pageY = ak.pageY;
            al.target.trigger(ah, ai)
        }
    }

    function s(al, ak, ao, an, am) {
        if (an) {
            var aj = [an.seriesIndex, an.pointIndex, an.data];
            var ah = am.plugins.lineRenderer.highlightedSeriesIndex;
            if (ah != null && am.series[ah].highlightMouseDown) {
                aa(am)
            }
            var ai = jQuery.Event("jqplotDataRightClick");
            ai.which = al.which;
            ai.pageX = al.pageX;
            ai.pageY = al.pageY;
            am.target.trigger(ai, aj)
        }
    }

    L.jqplot.LinearAxisRenderer = function () {
    };
    L.jqplot.LinearAxisRenderer.prototype.init = function (ah) {
        this.breakPoints = null;
        this.breakTickLabel = "&asymp;";
        this.drawBaseline = true;
        this.baselineWidth = null;
        this.baselineColor = null;
        this.forceTickAt0 = false;
        this.forceTickAt100 = false;
        this.tickInset = 0;
        this.minorTicks = 0;
        this.alignTicks = false;
        this._autoFormatString = "";
        this._overrideFormatString = false;
        this._scalefact = 1;
        L.extend(true, this, ah);
        if (this.breakPoints) {
            if (!L.isArray(this.breakPoints)) {
                this.breakPoints = null
            } else {
                if (this.breakPoints.length < 2 || this.breakPoints[1] <= this.breakPoints[0]) {
                    this.breakPoints = null
                }
            }
        }
        if (this.numberTicks != null && this.numberTicks < 2) {
            this.numberTicks = 2
        }
        this.resetDataBounds()
    };
    L.jqplot.LinearAxisRenderer.prototype.draw = function (ah, ao) {
        if (this.show) {
            this.renderer.createTicks.call(this, ao);
            var an = 0;
            var ai;
            if (this._elem) {
                this._elem.emptyForce();
                this._elem = null
            }
            this._elem = L(document.createElement("div"));
            this._elem.addClass("jqplot-axis jqplot-" + this.name);
            this._elem.css("position", "absolute");
            if (this.name == "xaxis" || this.name == "x2axis") {
                this._elem.width(this._plotDimensions.width)
            } else {
                this._elem.height(this._plotDimensions.height)
            }
            this.labelOptions.axis = this.name;
            this._label = new this.labelRenderer(this.labelOptions);
            if (this._label.show) {
                var am = this._label.draw(ah, ao);
                am.appendTo(this._elem);
                am = null
            }
            var al = this._ticks;
            var ak;
            for (var aj = 0; aj < al.length; aj++) {
                ak = al[aj];
                if (ak.show && ak.showLabel && (!ak.isMinorTick || this.showMinorTicks)) {
                    this._elem.append(ak.draw(ah, ao))
                }
            }
            ak = null;
            al = null
        }
        return this._elem
    };
    L.jqplot.LinearAxisRenderer.prototype.reset = function () {
        this.min = this._options.min;
        this.max = this._options.max;
        this.tickInterval = this._options.tickInterval;
        this.numberTicks = this._options.numberTicks;
        this._autoFormatString = "";
        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {
            this.tickOptions.formatString = ""
        }
    };
    L.jqplot.LinearAxisRenderer.prototype.set = function () {
        var ao = 0;
        var aj;
        var ai = 0;
        var an = 0;
        var ah = (this._label == null) ? false : this._label.show;
        if (this.show) {
            var am = this._ticks;
            var al;
            for (var ak = 0; ak < am.length; ak++) {
                al = am[ak];
                if (!al._breakTick && al.show && al.showLabel && (!al.isMinorTick || this.showMinorTicks)) {
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        aj = al._elem.outerHeight(true)
                    } else {
                        aj = al._elem.outerWidth(true)
                    }
                    if (aj > ao) {
                        ao = aj
                    }
                }
            }
            al = null;
            am = null;
            if (ah) {
                ai = this._label._elem.outerWidth(true);
                an = this._label._elem.outerHeight(true)
            }
            if (this.name == "xaxis") {
                ao = ao + an;
                this._elem.css({height: ao + "px", left: "0px", bottom: "0px"})
            } else {
                if (this.name == "x2axis") {
                    ao = ao + an;
                    this._elem.css({height: ao + "px", left: "0px", top: "0px"})
                } else {
                    if (this.name == "yaxis") {
                        ao = ao + ai;
                        this._elem.css({width: ao + "px", left: "0px", top: "0px"});
                        if (ah && this._label.constructor == L.jqplot.AxisLabelRenderer) {
                            this._label._elem.css("width", ai + "px")
                        }
                    } else {
                        ao = ao + ai;
                        this._elem.css({width: ao + "px", right: "0px", top: "0px"});
                        if (ah && this._label.constructor == L.jqplot.AxisLabelRenderer) {
                            this._label._elem.css("width", ai + "px")
                        }
                    }
                }
            }
        }
    };
    L.jqplot.LinearAxisRenderer.prototype.createTicks = function (aj) {
        var aT = this._ticks;
        var aK = this.ticks;
        var az = this.name;
        var aB = this._dataBounds;
        var ah = (this.name.charAt(0) === "x") ? this._plotDimensions.width : this._plotDimensions.height;
        var an;
        var a6, aI;
        var ap, ao;
        var a4, a0;
        var aH = this.min;
        var a5 = this.max;
        var aW = this.numberTicks;
        var ba = this.tickInterval;
        var am = 30;
        this._scalefact = (Math.max(ah, am + 1) - am) / 300;
        if (aK.length) {
            for (a0 = 0; a0 < aK.length; a0++) {
                var aO = aK[a0];
                var aU = new this.tickRenderer(this.tickOptions);
                if (L.isArray(aO)) {
                    aU.value = aO[0];
                    if (this.breakPoints) {
                        if (aO[0] == this.breakPoints[0]) {
                            aU.label = this.breakTickLabel;
                            aU._breakTick = true;
                            aU.showGridline = false;
                            aU.showMark = false
                        } else {
                            if (aO[0] > this.breakPoints[0] && aO[0] <= this.breakPoints[1]) {
                                aU.show = false;
                                aU.showGridline = false;
                                aU.label = aO[1]
                            } else {
                                aU.label = aO[1]
                            }
                        }
                    } else {
                        aU.label = aO[1]
                    }
                    aU.setTick(aO[0], this.name);
                    this._ticks.push(aU)
                } else {
                    if (L.isPlainObject(aO)) {
                        L.extend(true, aU, aO);
                        aU.axis = this.name;
                        this._ticks.push(aU)
                    } else {
                        aU.value = aO;
                        if (this.breakPoints) {
                            if (aO == this.breakPoints[0]) {
                                aU.label = this.breakTickLabel;
                                aU._breakTick = true;
                                aU.showGridline = false;
                                aU.showMark = false
                            } else {
                                if (aO > this.breakPoints[0] && aO <= this.breakPoints[1]) {
                                    aU.show = false;
                                    aU.showGridline = false
                                }
                            }
                        }
                        aU.setTick(aO, this.name);
                        this._ticks.push(aU)
                    }
                }
            }
            this.numberTicks = aK.length;
            this.min = this._ticks[0].value;
            this.max = this._ticks[this.numberTicks - 1].value;
            this.tickInterval = (this.max - this.min) / (this.numberTicks - 1)
        } else {
            if (az == "xaxis" || az == "x2axis") {
                ah = this._plotDimensions.width
            } else {
                ah = this._plotDimensions.height
            }
            var ax = this.numberTicks;
            if (this.alignTicks) {
                if (this.name === "x2axis" && aj.axes.xaxis.show) {
                    ax = aj.axes.xaxis.numberTicks
                } else {
                    if (this.name.charAt(0) === "y" && this.name !== "yaxis" && this.name !== "yMidAxis" && aj.axes.yaxis.show) {
                        ax = aj.axes.yaxis.numberTicks
                    }
                }
            }
            a6 = ((this.min != null) ? this.min : aB.min);
            aI = ((this.max != null) ? this.max : aB.max);
            var av = aI - a6;
            var aS, ay;
            var at;
            if (this.tickOptions == null || !this.tickOptions.formatString) {
                this._overrideFormatString = true
            }
            if (this.min == null || this.max == null && this.tickInterval == null && !this.autoscale) {
                if (this.forceTickAt0) {
                    if (a6 > 0) {
                        a6 = 0
                    }
                    if (aI < 0) {
                        aI = 0
                    }
                }
                if (this.forceTickAt100) {
                    if (a6 > 100) {
                        a6 = 100
                    }
                    if (aI < 100) {
                        aI = 100
                    }
                }
                var aE = false, a1 = false;
                if (this.min != null) {
                    aE = true
                } else {
                    if (this.max != null) {
                        a1 = true
                    }
                }
                var aP = L.jqplot.LinearTickGenerator(a6, aI, this._scalefact, ax, aE, a1);
                var aw = (this.min != null) ? a6 : a6 + av * (this.padMin - 1);
                var aQ = (this.max != null) ? aI : aI - av * (this.padMax - 1);
                if (a6 < aw || aI > aQ) {
                    aw = (this.min != null) ? a6 : a6 - av * (this.padMin - 1);
                    aQ = (this.max != null) ? aI : aI + av * (this.padMax - 1);
                    aP = L.jqplot.LinearTickGenerator(aw, aQ, this._scalefact, ax, aE, a1)
                }
                this.min = aP[0];
                this.max = aP[1];
                this.numberTicks = aP[2];
                this._autoFormatString = aP[3];
                this.tickInterval = aP[4]
            } else {
                if (a6 == aI) {
                    var ai = 0.05;
                    if (a6 > 0) {
                        ai = Math.max(Math.log(a6) / Math.LN10, 0.05)
                    }
                    a6 -= ai;
                    aI += ai
                }
                if (this.autoscale && this.min == null && this.max == null) {
                    var ak, al, ar;
                    var aC = false;
                    var aN = false;
                    var aA = {min: null, max: null, average: null, stddev: null};
                    for (var a0 = 0; a0 < this._series.length; a0++) {
                        var aV = this._series[a0];
                        var aD = (aV.fillAxis == "x") ? aV._xaxis.name : aV._yaxis.name;
                        if (this.name == aD) {
                            var aR = aV._plotValues[aV.fillAxis];
                            var aG = aR[0];
                            var a2 = aR[0];
                            for (var aZ = 1; aZ < aR.length; aZ++) {
                                if (aR[aZ] < aG) {
                                    aG = aR[aZ]
                                } else {
                                    if (aR[aZ] > a2) {
                                        a2 = aR[aZ]
                                    }
                                }
                            }
                            var au = (a2 - aG) / a2;
                            if (aV.renderer.constructor == L.jqplot.BarRenderer) {
                                if (aG >= 0 && (aV.fillToZero || au > 0.1)) {
                                    aC = true
                                } else {
                                    aC = false;
                                    if (aV.fill && aV.fillToZero && aG < 0 && a2 > 0) {
                                        aN = true
                                    } else {
                                        aN = false
                                    }
                                }
                            } else {
                                if (aV.fill) {
                                    if (aG >= 0 && (aV.fillToZero || au > 0.1)) {
                                        aC = true
                                    } else {
                                        if (aG < 0 && a2 > 0 && aV.fillToZero) {
                                            aC = false;
                                            aN = true
                                        } else {
                                            aC = false;
                                            aN = false
                                        }
                                    }
                                } else {
                                    if (aG < 0) {
                                        aC = false
                                    }
                                }
                            }
                        }
                    }
                    if (aC) {
                        this.numberTicks = 2 + Math.ceil((ah - (this.tickSpacing - 1)) / this.tickSpacing);
                        this.min = 0;
                        aH = 0;
                        al = aI / (this.numberTicks - 1);
                        at = Math.pow(10, Math.abs(Math.floor(Math.log(al) / Math.LN10)));
                        if (al / at == parseInt(al / at, 10)) {
                            al += at
                        }
                        this.tickInterval = Math.ceil(al / at) * at;
                        this.max = this.tickInterval * (this.numberTicks - 1)
                    } else {
                        if (aN) {
                            this.numberTicks = 2 + Math.ceil((ah - (this.tickSpacing - 1)) / this.tickSpacing);
                            var aJ = Math.ceil(Math.abs(a6) / av * (this.numberTicks - 1));
                            var a9 = this.numberTicks - 1 - aJ;
                            al = Math.max(Math.abs(a6 / aJ), Math.abs(aI / a9));
                            at = Math.pow(10, Math.abs(Math.floor(Math.log(al) / Math.LN10)));
                            this.tickInterval = Math.ceil(al / at) * at;
                            this.max = this.tickInterval * a9;
                            this.min = -this.tickInterval * aJ
                        } else {
                            if (this.numberTicks == null) {
                                if (this.tickInterval) {
                                    this.numberTicks = 3 + Math.ceil(av / this.tickInterval)
                                } else {
                                    this.numberTicks = 2 + Math.ceil((ah - (this.tickSpacing - 1)) / this.tickSpacing)
                                }
                            }
                            if (this.tickInterval == null) {
                                al = av / (this.numberTicks - 1);
                                if (al < 1) {
                                    at = Math.pow(10, Math.abs(Math.floor(Math.log(al) / Math.LN10)))
                                } else {
                                    at = 1
                                }
                                this.tickInterval = Math.ceil(al * at * this.pad) / at
                            } else {
                                at = 1 / this.tickInterval
                            }
                            ak = this.tickInterval * (this.numberTicks - 1);
                            ar = (ak - av) / 2;
                            if (this.min == null) {
                                this.min = Math.floor(at * (a6 - ar)) / at
                            }
                            if (this.max == null) {
                                this.max = this.min + ak
                            }
                        }
                    }
                    var aF = L.jqplot.getSignificantFigures(this.tickInterval);
                    var aM;
                    if (aF.digitsLeft >= aF.significantDigits) {
                        aM = "%d"
                    } else {
                        var at = Math.max(0, 5 - aF.digitsLeft);
                        at = Math.min(at, aF.digitsRight);
                        aM = "%." + at + "f"
                    }
                    this._autoFormatString = aM
                } else {
                    aS = (this.min != null) ? this.min : a6 - av * (this.padMin - 1);
                    ay = (this.max != null) ? this.max : aI + av * (this.padMax - 1);
                    av = ay - aS;
                    if (this.numberTicks == null) {
                        if (this.tickInterval != null) {
                            this.numberTicks = Math.ceil((ay - aS) / this.tickInterval) + 1
                        } else {
                            if (ah > 100) {
                                this.numberTicks = parseInt(3 + (ah - 100) / 75, 10)
                            } else {
                                this.numberTicks = 2
                            }
                        }
                    }
                    if (this.tickInterval == null) {
                        this.tickInterval = av / (this.numberTicks - 1)
                    }
                    if (this.max == null) {
                        ay = aS + this.tickInterval * (this.numberTicks - 1)
                    }
                    if (this.min == null) {
                        aS = ay - this.tickInterval * (this.numberTicks - 1)
                    }
                    var aF = L.jqplot.getSignificantFigures(this.tickInterval);
                    var aM;
                    if (aF.digitsLeft >= aF.significantDigits) {
                        aM = "%d"
                    } else {
                        var at = Math.max(0, 5 - aF.digitsLeft);
                        at = Math.min(at, aF.digitsRight);
                        aM = "%." + at + "f"
                    }
                    this._autoFormatString = aM;
                    this.min = aS;
                    this.max = ay
                }
                if (this.renderer.constructor == L.jqplot.LinearAxisRenderer && this._autoFormatString == "") {
                    av = this.max - this.min;
                    var a7 = new this.tickRenderer(this.tickOptions);
                    var aL = a7.formatString || L.jqplot.config.defaultTickFormatString;
                    var aL = aL.match(L.jqplot.sprintf.regex)[0];
                    var a3 = 0;
                    if (aL) {
                        if (aL.search(/[fFeEgGpP]/) > -1) {
                            var aY = aL.match(/\%\.(\d{0,})?[eEfFgGpP]/);
                            if (aY) {
                                a3 = parseInt(aY[1], 10)
                            } else {
                                a3 = 6
                            }
                        } else {
                            if (aL.search(/[di]/) > -1) {
                                a3 = 0
                            }
                        }
                        var aq = Math.pow(10, -a3);
                        if (this.tickInterval < aq) {
                            if (aW == null && ba == null) {
                                this.tickInterval = aq;
                                if (a5 == null && aH == null) {
                                    this.min = Math.floor(this._dataBounds.min / aq) * aq;
                                    if (this.min == this._dataBounds.min) {
                                        this.min = this._dataBounds.min - this.tickInterval
                                    }
                                    this.max = Math.ceil(this._dataBounds.max / aq) * aq;
                                    if (this.max == this._dataBounds.max) {
                                        this.max = this._dataBounds.max + this.tickInterval
                                    }
                                    var aX = (this.max - this.min) / this.tickInterval;
                                    aX = aX.toFixed(11);
                                    aX = Math.ceil(aX);
                                    this.numberTicks = aX + 1
                                } else {
                                    if (a5 == null) {
                                        var aX = (this._dataBounds.max - this.min) / this.tickInterval;
                                        aX = aX.toFixed(11);
                                        this.numberTicks = Math.ceil(aX) + 2;
                                        this.max = this.min + this.tickInterval * (this.numberTicks - 1)
                                    } else {
                                        if (aH == null) {
                                            var aX = (this.max - this._dataBounds.min) / this.tickInterval;
                                            aX = aX.toFixed(11);
                                            this.numberTicks = Math.ceil(aX) + 2;
                                            this.min = this.max - this.tickInterval * (this.numberTicks - 1)
                                        } else {
                                            this.numberTicks = Math.ceil((a5 - aH) / this.tickInterval) + 1;
                                            this.min = Math.floor(aH * Math.pow(10, a3)) / Math.pow(10, a3);
                                            this.max = Math.ceil(a5 * Math.pow(10, a3)) / Math.pow(10, a3);
                                            this.numberTicks = Math.ceil((this.max - this.min) / this.tickInterval) + 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this._overrideFormatString && this._autoFormatString != "") {
                this.tickOptions = this.tickOptions || {};
                this.tickOptions.formatString = this._autoFormatString
            }
            var aU, a8;
            for (var a0 = 0; a0 < this.numberTicks; a0++) {
                a4 = this.min + a0 * this.tickInterval;
                aU = new this.tickRenderer(this.tickOptions);
                aU.setTick(a4, this.name);
                this._ticks.push(aU);
                if (a0 < this.numberTicks - 1) {
                    for (var aZ = 0; aZ < this.minorTicks; aZ++) {
                        a4 += this.tickInterval / (this.minorTicks + 1);
                        a8 = L.extend(true, {}, this.tickOptions, {name: this.name, value: a4, label: "", isMinorTick: true});
                        aU = new this.tickRenderer(a8);
                        this._ticks.push(aU)
                    }
                }
                aU = null
            }
        }
        if (this.tickInset) {
            this.min = this.min - this.tickInset * this.tickInterval;
            this.max = this.max + this.tickInset * this.tickInterval
        }
        aT = null
    };
    L.jqplot.LinearAxisRenderer.prototype.resetTickValues = function (aj) {
        if (L.isArray(aj) && aj.length == this._ticks.length) {
            var ai;
            for (var ah = 0; ah < aj.length; ah++) {
                ai = this._ticks[ah];
                ai.value = aj[ah];
                ai.label = ai.formatter(ai.formatString, aj[ah]);
                ai.label = ai.prefix + ai.label;
                ai._elem.html(ai.label)
            }
            ai = null;
            this.min = L.jqplot.arrayMin(aj);
            this.max = L.jqplot.arrayMax(aj);
            this.pack()
        }
    };
    L.jqplot.LinearAxisRenderer.prototype.pack = function (aj, ai) {
        aj = aj || {};
        ai = ai || this._offsets;
        var ay = this._ticks;
        var au = this.max;
        var at = this.min;
        var ao = ai.max;
        var am = ai.min;
        var aq = (this._label == null) ? false : this._label.show;
        for (var ar in aj) {
            this._elem.css(ar, aj[ar])
        }
        this._offsets = ai;
        var ak = ao - am;
        var al = au - at;
        if (this.breakPoints) {
            al = al - this.breakPoints[1] + this.breakPoints[0];
            this.p2u = function (aA) {
                return(aA - am) * al / ak + at
            };
            this.u2p = function (aA) {
                if (aA > this.breakPoints[0] && aA < this.breakPoints[1]) {
                    aA = this.breakPoints[0]
                }
                if (aA <= this.breakPoints[0]) {
                    return(aA - at) * ak / al + am
                } else {
                    return(aA - this.breakPoints[1] + this.breakPoints[0] - at) * ak / al + am
                }
            };
            if (this.name.charAt(0) == "x") {
                this.series_u2p = function (aA) {
                    if (aA > this.breakPoints[0] && aA < this.breakPoints[1]) {
                        aA = this.breakPoints[0]
                    }
                    if (aA <= this.breakPoints[0]) {
                        return(aA - at) * ak / al
                    } else {
                        return(aA - this.breakPoints[1] + this.breakPoints[0] - at) * ak / al
                    }
                };
                this.series_p2u = function (aA) {
                    return aA * al / ak + at
                }
            } else {
                this.series_u2p = function (aA) {
                    if (aA > this.breakPoints[0] && aA < this.breakPoints[1]) {
                        aA = this.breakPoints[0]
                    }
                    if (aA >= this.breakPoints[1]) {
                        return(aA - au) * ak / al
                    } else {
                        return(aA + this.breakPoints[1] - this.breakPoints[0] - au) * ak / al
                    }
                };
                this.series_p2u = function (aA) {
                    return aA * al / ak + au
                }
            }
        } else {
            this.p2u = function (aA) {
                return(aA - am) * al / ak + at
            };
            this.u2p = function (aA) {
                return(aA - at) * ak / al + am
            };
            if (this.name == "xaxis" || this.name == "x2axis") {
                this.series_u2p = function (aA) {
                    return(aA - at) * ak / al
                };
                this.series_p2u = function (aA) {
                    return aA * al / ak + at
                }
            } else {
                this.series_u2p = function (aA) {
                    return(aA - au) * ak / al
                };
                this.series_p2u = function (aA) {
                    return aA * al / ak + au
                }
            }
        }
        if (this.show) {
            if (this.name == "xaxis" || this.name == "x2axis") {
                for (var av = 0; av < ay.length; av++) {
                    var ap = ay[av];
                    if (ap.show && ap.showLabel) {
                        var ah;
                        if (ap.constructor == L.jqplot.CanvasAxisTickRenderer && ap.angle) {
                            var ax = (this.name == "xaxis") ? 1 : -1;
                            switch (ap.labelPosition) {
                                case"auto":
                                    if (ax * ap.angle < 0) {
                                        ah = -ap.getWidth() + ap._textRenderer.height * Math.sin(-ap._textRenderer.angle) / 2
                                    } else {
                                        ah = -ap._textRenderer.height * Math.sin(ap._textRenderer.angle) / 2
                                    }
                                    break;
                                case"end":
                                    ah = -ap.getWidth() + ap._textRenderer.height * Math.sin(-ap._textRenderer.angle) / 2;
                                    break;
                                case"start":
                                    ah = -ap._textRenderer.height * Math.sin(ap._textRenderer.angle) / 2;
                                    break;
                                case"middle":
                                    ah = -ap.getWidth() / 2 + ap._textRenderer.height * Math.sin(-ap._textRenderer.angle) / 2;
                                    break;
                                default:
                                    ah = -ap.getWidth() / 2 + ap._textRenderer.height * Math.sin(-ap._textRenderer.angle) / 2;
                                    break
                            }
                        } else {
                            ah = -ap.getWidth() / 2
                        }
                        var az = this.u2p(ap.value) + ah + "px";
                        ap._elem.css("left", az);
                        ap.pack()
                    }
                }
                if (aq) {
                    var an = this._label._elem.outerWidth(true);
                    this._label._elem.css("left", am + ak / 2 - an / 2 + "px");
                    if (this.name == "xaxis") {
                        this._label._elem.css("bottom", "0px")
                    } else {
                        this._label._elem.css("top", "0px")
                    }
                    this._label.pack()
                }
            } else {
                for (var av = 0; av < ay.length; av++) {
                    var ap = ay[av];
                    if (ap.show && ap.showLabel) {
                        var ah;
                        if (ap.constructor == L.jqplot.CanvasAxisTickRenderer && ap.angle) {
                            var ax = (this.name == "yaxis") ? 1 : -1;
                            switch (ap.labelPosition) {
                                case"auto":
                                case"end":
                                    if (ax * ap.angle < 0) {
                                        ah = -ap._textRenderer.height * Math.cos(-ap._textRenderer.angle) / 2
                                    } else {
                                        ah = -ap.getHeight() + ap._textRenderer.height * Math.cos(ap._textRenderer.angle) / 2
                                    }
                                    break;
                                case"start":
                                    if (ap.angle > 0) {
                                        ah = -ap._textRenderer.height * Math.cos(-ap._textRenderer.angle) / 2
                                    } else {
                                        ah = -ap.getHeight() + ap._textRenderer.height * Math.cos(ap._textRenderer.angle) / 2
                                    }
                                    break;
                                case"middle":
                                    ah = -ap.getHeight() / 2;
                                    break;
                                default:
                                    ah = -ap.getHeight() / 2;
                                    break
                            }
                        } else {
                            ah = -ap.getHeight() / 2
                        }
                        var az = this.u2p(ap.value) + ah + "px";
                        ap._elem.css("top", az);
                        ap.pack()
                    }
                }
                if (aq) {
                    var aw = this._label._elem.outerHeight(true);
                    this._label._elem.css("top", ao - ak / 2 - aw / 2 + "px");
                    if (this.name == "yaxis") {
                        this._label._elem.css("left", "0px")
                    } else {
                        this._label._elem.css("right", "0px")
                    }
                    this._label.pack()
                }
            }
        }
        ay = null
    };
    function i(ai) {
        var ah;
        ai = Math.abs(ai);
        if (ai >= 10) {
            ah = "%d"
        } else {
            if (ai > 1) {
                if (ai === parseInt(ai, 10)) {
                    ah = "%d"
                } else {
                    ah = "%.1f"
                }
            } else {
                var aj = -Math.floor(Math.log(ai) / Math.LN10);
                ah = "%." + aj + "f"
            }
        }
        return ah
    }

    var b = [0.1, 0.2, 0.3, 0.4, 0.5, 0.8, 1, 2, 3, 4, 5];
    var c = function (ai) {
        var ah = b.indexOf(ai);
        if (ah > 0) {
            return b[ah - 1]
        } else {
            return b[b.length - 1] / 100
        }
    };
    var k = function (ai) {
        var ah = b.indexOf(ai);
        if (ah < b.length - 1) {
            return b[ah + 1]
        } else {
            return b[0] * 100
        }
    };

    function d(al, au, at) {
        var aq = Math.floor(at / 2);
        var ai = Math.ceil(at * 1.5);
        var ak = Number.MAX_VALUE;
        var ah = (au - al);
        var ax;
        var ap;
        var ar;
        var ay = L.jqplot.getSignificantFigures;
        var aw;
        var an;
        var ao;
        var av;
        for (var am = 0, aj = ai - aq + 1; am < aj; am++) {
            ao = aq + am;
            ax = ah / (ao - 1);
            ap = ay(ax);
            ax = Math.abs(at - ao) + ap.digitsRight;
            if (ax < ak) {
                ak = ax;
                ar = ao;
                av = ap.digitsRight
            } else {
                if (ax === ak) {
                    if (ap.digitsRight < av) {
                        ar = ao;
                        av = ap.digitsRight
                    }
                }
            }
        }
        aw = Math.max(av, Math.max(ay(al).digitsRight, ay(au).digitsRight));
        if (aw === 0) {
            an = "%d"
        } else {
            an = "%." + aw + "f"
        }
        ax = ah / (ar - 1);
        return[al, au, ar, an, ax]
    }

    function W(ai, al) {
        al = al || 7;
        var ak = ai / (al - 1);
        var aj = Math.pow(10, Math.floor(Math.log(ak) / Math.LN10));
        var am = ak / aj;
        var ah;
        if (aj < 1) {
            if (am > 5) {
                ah = 10 * aj
            } else {
                if (am > 2) {
                    ah = 5 * aj
                } else {
                    if (am > 1) {
                        ah = 2 * aj
                    } else {
                        ah = aj
                    }
                }
            }
        } else {
            if (am > 5) {
                ah = 10 * aj
            } else {
                if (am > 4) {
                    ah = 5 * aj
                } else {
                    if (am > 3) {
                        ah = 4 * aj
                    } else {
                        if (am > 2) {
                            ah = 3 * aj
                        } else {
                            if (am > 1) {
                                ah = 2 * aj
                            } else {
                                ah = aj
                            }
                        }
                    }
                }
            }
        }
        return ah
    }

    function Q(ai, ah) {
        ah = ah || 1;
        var ak = Math.floor(Math.log(ai) / Math.LN10);
        var am = Math.pow(10, ak);
        var al = ai / am;
        var aj;
        al = al / ah;
        if (al <= 0.38) {
            aj = 0.1
        } else {
            if (al <= 1.6) {
                aj = 0.2
            } else {
                if (al <= 4) {
                    aj = 0.5
                } else {
                    if (al <= 8) {
                        aj = 1
                    } else {
                        if (al <= 16) {
                            aj = 2
                        } else {
                            aj = 5
                        }
                    }
                }
            }
        }
        return aj * am
    }

    function x(aj, ai) {
        var al = Math.floor(Math.log(aj) / Math.LN10);
        var an = Math.pow(10, al);
        var am = aj / an;
        var ah;
        var ak;
        am = am / ai;
        if (am <= 0.38) {
            ak = 0.1
        } else {
            if (am <= 1.6) {
                ak = 0.2
            } else {
                if (am <= 4) {
                    ak = 0.5
                } else {
                    if (am <= 8) {
                        ak = 1
                    } else {
                        if (am <= 16) {
                            ak = 2
                        } else {
                            ak = 5
                        }
                    }
                }
            }
        }
        ah = ak * an;
        return[ah, ak, an]
    }

    L.jqplot.LinearTickGenerator = function (an, aq, aj, ak, ao, ar) {
        ao = (ao === null) ? false : ao;
        ar = (ar === null || ao) ? false : ar;
        if (an === aq) {
            aq = (aq) ? 0 : 1
        }
        aj = aj || 1;
        if (aq < an) {
            var at = aq;
            aq = an;
            an = at
        }
        var ai = [];
        var aw = Q(aq - an, aj);
        var av = L.jqplot.getSignificantFigures;
        if (ak == null) {
            if (!ao && !ar) {
                ai[0] = Math.floor(an / aw) * aw;
                ai[1] = Math.ceil(aq / aw) * aw;
                ai[2] = Math.round((ai[1] - ai[0]) / aw + 1);
                ai[3] = i(aw);
                ai[4] = aw
            } else {
                if (ao) {
                    ai[0] = an;
                    ai[2] = Math.ceil((aq - an) / aw + 1);
                    ai[1] = an + (ai[2] - 1) * aw;
                    var au = av(an).digitsRight;
                    var ap = av(aw).digitsRight;
                    if (au < ap) {
                        ai[3] = i(aw)
                    } else {
                        ai[3] = "%." + au + "f"
                    }
                    ai[4] = aw
                } else {
                    if (ar) {
                        ai[1] = aq;
                        ai[2] = Math.ceil((aq - an) / aw + 1);
                        ai[0] = aq - (ai[2] - 1) * aw;
                        var al = av(aq).digitsRight;
                        var ap = av(aw).digitsRight;
                        if (al < ap) {
                            ai[3] = i(aw)
                        } else {
                            ai[3] = "%." + al + "f"
                        }
                        ai[4] = aw
                    }
                }
            }
        } else {
            var am = [];
            am[0] = Math.floor(an / aw) * aw;
            am[1] = Math.ceil(aq / aw) * aw;
            am[2] = Math.round((am[1] - am[0]) / aw + 1);
            am[3] = i(aw);
            am[4] = aw;
            if (am[2] === ak) {
                ai = am
            } else {
                var ah = W(am[1] - am[0], ak);
                ai[0] = am[0];
                ai[2] = ak;
                ai[4] = ah;
                ai[3] = i(ah);
                ai[1] = ai[0] + (ai[2] - 1) * ai[4]
            }
        }
        return ai
    };
    L.jqplot.LinearTickGenerator.bestLinearInterval = Q;
    L.jqplot.LinearTickGenerator.bestInterval = W;
    L.jqplot.LinearTickGenerator.bestLinearComponents = x;
    L.jqplot.LinearTickGenerator.bestConstrainedInterval = d;
    L.jqplot.MarkerRenderer = function (ah) {
        this.show = true;
        this.style = "filledCircle";
        this.lineWidth = 2;
        this.size = 9;
        this.color = "#666666";
        this.shadow = true;
        this.shadowAngle = 45;
        this.shadowOffset = 1;
        this.shadowDepth = 3;
        this.shadowAlpha = "0.07";
        this.shadowRenderer = new L.jqplot.ShadowRenderer();
        this.shapeRenderer = new L.jqplot.ShapeRenderer();
        L.extend(true, this, ah)
    };
    L.jqplot.MarkerRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah);
        var aj = {angle: this.shadowAngle, offset: this.shadowOffset, alpha: this.shadowAlpha, lineWidth: this.lineWidth, depth: this.shadowDepth, closePath: true};
        if (this.style.indexOf("filled") != -1) {
            aj.fill = true
        }
        if (this.style.indexOf("ircle") != -1) {
            aj.isarc = true;
            aj.closePath = false
        }
        this.shadowRenderer.init(aj);
        var ai = {fill: false, isarc: false, strokeStyle: this.color, fillStyle: this.color, lineWidth: this.lineWidth, closePath: true};
        if (this.style.indexOf("filled") != -1) {
            ai.fill = true
        }
        if (this.style.indexOf("ircle") != -1) {
            ai.isarc = true;
            ai.closePath = false
        }
        this.shapeRenderer.init(ai)
    };
    L.jqplot.MarkerRenderer.prototype.drawDiamond = function (aj, ai, am, al, ao) {
        var ah = 1.2;
        var ap = this.size / 2 / ah;
        var an = this.size / 2 * ah;
        var ak = [
            [aj - ap, ai],
            [aj, ai + an],
            [aj + ap, ai],
            [aj, ai - an]
        ];
        if (this.shadow) {
            this.shadowRenderer.draw(am, ak)
        }
        this.shapeRenderer.draw(am, ak, ao)
    };
    L.jqplot.MarkerRenderer.prototype.drawPlus = function (ak, aj, an, am, aq) {
        var ai = 1;
        var ar = this.size / 2 * ai;
        var ao = this.size / 2 * ai;
        var ap = [
            [ak, aj - ao],
            [ak, aj + ao]
        ];
        var al = [
            [ak + ar, aj],
            [ak - ar, aj]
        ];
        var ah = L.extend(true, {}, this.options, {closePath: false});
        if (this.shadow) {
            this.shadowRenderer.draw(an, ap, {closePath: false});
            this.shadowRenderer.draw(an, al, {closePath: false})
        }
        this.shapeRenderer.draw(an, ap, ah);
        this.shapeRenderer.draw(an, al, ah)
    };
    L.jqplot.MarkerRenderer.prototype.drawX = function (ak, aj, an, am, aq) {
        var ai = 1;
        var ar = this.size / 2 * ai;
        var ao = this.size / 2 * ai;
        var ah = L.extend(true, {}, this.options, {closePath: false});
        var ap = [
            [ak - ar, aj - ao],
            [ak + ar, aj + ao]
        ];
        var al = [
            [ak - ar, aj + ao],
            [ak + ar, aj - ao]
        ];
        if (this.shadow) {
            this.shadowRenderer.draw(an, ap, {closePath: false});
            this.shadowRenderer.draw(an, al, {closePath: false})
        }
        this.shapeRenderer.draw(an, ap, ah);
        this.shapeRenderer.draw(an, al, ah)
    };
    L.jqplot.MarkerRenderer.prototype.drawDash = function (aj, ai, am, al, ao) {
        var ah = 1;
        var ap = this.size / 2 * ah;
        var an = this.size / 2 * ah;
        var ak = [
            [aj - ap, ai],
            [aj + ap, ai]
        ];
        if (this.shadow) {
            this.shadowRenderer.draw(am, ak)
        }
        this.shapeRenderer.draw(am, ak, ao)
    };
    L.jqplot.MarkerRenderer.prototype.drawLine = function (am, al, ah, ak, ai) {
        var aj = [am, al];
        if (this.shadow) {
            this.shadowRenderer.draw(ah, aj)
        }
        this.shapeRenderer.draw(ah, aj, ai)
    };
    L.jqplot.MarkerRenderer.prototype.drawSquare = function (aj, ai, am, al, ao) {
        var ah = 1;
        var ap = this.size / 2 / ah;
        var an = this.size / 2 * ah;
        var ak = [
            [aj - ap, ai - an],
            [aj - ap, ai + an],
            [aj + ap, ai + an],
            [aj + ap, ai - an]
        ];
        if (this.shadow) {
            this.shadowRenderer.draw(am, ak)
        }
        this.shapeRenderer.draw(am, ak, ao)
    };
    L.jqplot.MarkerRenderer.prototype.drawCircle = function (ai, ao, ak, an, al) {
        var ah = this.size / 2;
        var aj = 2 * Math.PI;
        var am = [ai, ao, ah, 0, aj, true];
        if (this.shadow) {
            this.shadowRenderer.draw(ak, am)
        }
        this.shapeRenderer.draw(ak, am, al)
    };
    L.jqplot.MarkerRenderer.prototype.draw = function (ah, ak, ai, aj) {
        aj = aj || {};
        if (aj.show == null || aj.show != false) {
            if (aj.color && !aj.fillStyle) {
                aj.fillStyle = aj.color
            }
            if (aj.color && !aj.strokeStyle) {
                aj.strokeStyle = aj.color
            }
            switch (this.style) {
                case"diamond":
                    this.drawDiamond(ah, ak, ai, false, aj);
                    break;
                case"filledDiamond":
                    this.drawDiamond(ah, ak, ai, true, aj);
                    break;
                case"circle":
                    this.drawCircle(ah, ak, ai, false, aj);
                    break;
                case"filledCircle":
                    this.drawCircle(ah, ak, ai, true, aj);
                    break;
                case"square":
                    this.drawSquare(ah, ak, ai, false, aj);
                    break;
                case"filledSquare":
                    this.drawSquare(ah, ak, ai, true, aj);
                    break;
                case"x":
                    this.drawX(ah, ak, ai, true, aj);
                    break;
                case"plus":
                    this.drawPlus(ah, ak, ai, true, aj);
                    break;
                case"dash":
                    this.drawDash(ah, ak, ai, true, aj);
                    break;
                case"line":
                    this.drawLine(ah, ak, ai, false, aj);
                    break;
                default:
                    this.drawDiamond(ah, ak, ai, false, aj);
                    break
            }
        }
    };
    L.jqplot.ShadowRenderer = function (ah) {
        this.angle = 45;
        this.offset = 1;
        this.alpha = 0.07;
        this.lineWidth = 1.5;
        this.lineJoin = "miter";
        this.lineCap = "round";
        this.closePath = false;
        this.fill = false;
        this.depth = 3;
        this.strokeStyle = "rgba(0,0,0,0.1)";
        this.isarc = false;
        L.extend(true, this, ah)
    };
    L.jqplot.ShadowRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.ShadowRenderer.prototype.draw = function (av, at, ax) {
        av.save();
        var ah = (ax != null) ? ax : {};
        var au = (ah.fill != null) ? ah.fill : this.fill;
        var ap = (ah.fillRect != null) ? ah.fillRect : this.fillRect;
        var ao = (ah.closePath != null) ? ah.closePath : this.closePath;
        var al = (ah.offset != null) ? ah.offset : this.offset;
        var aj = (ah.alpha != null) ? ah.alpha : this.alpha;
        var an = (ah.depth != null) ? ah.depth : this.depth;
        var aw = (ah.isarc != null) ? ah.isarc : this.isarc;
        var aq = (ah.linePattern != null) ? ah.linePattern : this.linePattern;
        av.lineWidth = (ah.lineWidth != null) ? ah.lineWidth : this.lineWidth;
        av.lineJoin = (ah.lineJoin != null) ? ah.lineJoin : this.lineJoin;
        av.lineCap = (ah.lineCap != null) ? ah.lineCap : this.lineCap;
        av.strokeStyle = ah.strokeStyle || this.strokeStyle || "rgba(0,0,0," + aj + ")";
        av.fillStyle = ah.fillStyle || this.fillStyle || "rgba(0,0,0," + aj + ")";
        for (var ak = 0; ak < an; ak++) {
            var ar = L.jqplot.LinePattern(av, aq);
            av.translate(Math.cos(this.angle * Math.PI / 180) * al, Math.sin(this.angle * Math.PI / 180) * al);
            ar.beginPath();
            if (aw) {
                av.arc(at[0], at[1], at[2], at[3], at[4], true)
            } else {
                if (ap) {
                    if (ap) {
                        av.fillRect(at[0], at[1], at[2], at[3])
                    }
                } else {
                    if (at && at.length) {
                        var ai = true;
                        for (var am = 0; am < at.length; am++) {
                            if (at[am][0] != null && at[am][1] != null) {
                                if (ai) {
                                    ar.moveTo(at[am][0], at[am][1]);
                                    ai = false
                                } else {
                                    ar.lineTo(at[am][0], at[am][1])
                                }
                            } else {
                                ai = true
                            }
                        }
                    }
                }
            }
            if (ao) {
                ar.closePath()
            }
            if (au) {
                av.fill()
            } else {
                av.stroke()
            }
        }
        av.restore()
    };
    L.jqplot.ShapeRenderer = function (ah) {
        this.lineWidth = 1.5;
        this.linePattern = "solid";
        this.lineJoin = "miter";
        this.lineCap = "round";
        this.closePath = false;
        this.fill = false;
        this.isarc = false;
        this.fillRect = false;
        this.strokeRect = false;
        this.clearRect = false;
        this.strokeStyle = "#999999";
        this.fillStyle = "#999999";
        L.extend(true, this, ah)
    };
    L.jqplot.ShapeRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.ShapeRenderer.prototype.draw = function (at, aq, av) {
        at.save();
        var ah = (av != null) ? av : {};
        var ar = (ah.fill != null) ? ah.fill : this.fill;
        var am = (ah.closePath != null) ? ah.closePath : this.closePath;
        var an = (ah.fillRect != null) ? ah.fillRect : this.fillRect;
        var ak = (ah.strokeRect != null) ? ah.strokeRect : this.strokeRect;
        var ai = (ah.clearRect != null) ? ah.clearRect : this.clearRect;
        var au = (ah.isarc != null) ? ah.isarc : this.isarc;
        var ao = (ah.linePattern != null) ? ah.linePattern : this.linePattern;
        var ap = L.jqplot.LinePattern(at, ao);
        at.lineWidth = ah.lineWidth || this.lineWidth;
        at.lineJoin = ah.lineJoin || this.lineJoin;
        at.lineCap = ah.lineCap || this.lineCap;
        at.strokeStyle = (ah.strokeStyle || ah.color) || this.strokeStyle;
        at.fillStyle = ah.fillStyle || this.fillStyle;
        at.beginPath();
        if (au) {
            at.arc(aq[0], aq[1], aq[2], aq[3], aq[4], true);
            if (am) {
                at.closePath()
            }
            if (ar) {
                at.fill()
            } else {
                at.stroke()
            }
            at.restore();
            return
        } else {
            if (ai) {
                at.clearRect(aq[0], aq[1], aq[2], aq[3]);
                at.restore();
                return
            } else {
                if (an || ak) {
                    if (an) {
                        at.fillRect(aq[0], aq[1], aq[2], aq[3])
                    }
                    if (ak) {
                        at.strokeRect(aq[0], aq[1], aq[2], aq[3]);
                        at.restore();
                        return
                    }
                } else {
                    if (aq && aq.length) {
                        var aj = true;
                        for (var al = 0; al < aq.length; al++) {
                            if (aq[al][0] != null && aq[al][1] != null) {
                                if (aj) {
                                    ap.moveTo(aq[al][0], aq[al][1]);
                                    aj = false
                                } else {
                                    ap.lineTo(aq[al][0], aq[al][1])
                                }
                            } else {
                                aj = true
                            }
                        }
                        if (am) {
                            ap.closePath()
                        }
                        if (ar) {
                            at.fill()
                        } else {
                            at.stroke()
                        }
                    }
                }
            }
        }
        at.restore()
    };
    L.jqplot.TableLegendRenderer = function () {
    };
    L.jqplot.TableLegendRenderer.prototype.init = function (ah) {
        L.extend(true, this, ah)
    };
    L.jqplot.TableLegendRenderer.prototype.addrow = function (aq, ak, ah, ao) {
        var al = (ah) ? this.rowSpacing + "px" : "0px";
        var ap;
        var aj;
        var ai;
        var an;
        var am;
        ai = document.createElement("tr");
        ap = L(ai);
        ap.addClass("jqplot-table-legend");
        ai = null;
        if (ao) {
            ap.prependTo(this._elem)
        } else {
            ap.appendTo(this._elem)
        }
        if (this.showSwatches) {
            aj = L(document.createElement("td"));
            aj.addClass("jqplot-table-legend jqplot-table-legend-swatch");
            aj.css({textAlign: "center", paddingTop: al});
            an = L(document.createElement("div"));
            an.addClass("jqplot-table-legend-swatch-outline");
            am = L(document.createElement("div"));
            am.addClass("jqplot-table-legend-swatch");
            am.css({backgroundColor: ak, borderColor: ak});
            ap.append(aj.append(an.append(am)))
        }
        if (this.showLabels) {
            aj = L(document.createElement("td"));
            aj.addClass("jqplot-table-legend jqplot-table-legend-label");
            aj.css("paddingTop", al);
            ap.append(aj);
            if (this.escapeHtml) {
                aj.text(aq)
            } else {
                aj.html(aq)
            }
        }
        aj = null;
        an = null;
        am = null;
        ap = null;
        ai = null
    };
    L.jqplot.TableLegendRenderer.prototype.draw = function () {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null
        }
        if (this.show) {
            var am = this._series;
            var ai = document.createElement("table");
            this._elem = L(ai);
            this._elem.addClass("jqplot-table-legend");
            var ar = {position: "absolute"};
            if (this.background) {
                ar.background = this.background
            }
            if (this.border) {
                ar.border = this.border
            }
            if (this.fontSize) {
                ar.fontSize = this.fontSize
            }
            if (this.fontFamily) {
                ar.fontFamily = this.fontFamily
            }
            if (this.textColor) {
                ar.textColor = this.textColor
            }
            if (this.marginTop != null) {
                ar.marginTop = this.marginTop
            }
            if (this.marginBottom != null) {
                ar.marginBottom = this.marginBottom
            }
            if (this.marginLeft != null) {
                ar.marginLeft = this.marginLeft
            }
            if (this.marginRight != null) {
                ar.marginRight = this.marginRight
            }
            var ah = false, ao = false, aq;
            for (var an = 0; an < am.length; an++) {
                aq = am[an];
                if (aq._stack || aq.renderer.constructor == L.jqplot.BezierCurveRenderer) {
                    ao = true
                }
                if (aq.show && aq.showLabel) {
                    var al = this.labels[an] || aq.label.toString();
                    if (al) {
                        var aj = aq.color;
                        if (ao && an < am.length - 1) {
                            ah = true
                        } else {
                            if (ao && an == am.length - 1) {
                                ah = false
                            }
                        }
                        this.renderer.addrow.call(this, al, aj, ah, ao);
                        ah = true
                    }
                    for (var ak = 0; ak < L.jqplot.addLegendRowHooks.length; ak++) {
                        var ap = L.jqplot.addLegendRowHooks[ak].call(this, aq);
                        if (ap) {
                            this.renderer.addrow.call(this, ap.label, ap.color, ah);
                            ah = true
                        }
                    }
                    al = null
                }
            }
        }
        return this._elem
    };
    L.jqplot.TableLegendRenderer.prototype.pack = function (aj) {
        if (this.show) {
            if (this.placement == "insideGrid") {
                switch (this.location) {
                    case"nw":
                        var ai = aj.left;
                        var ah = aj.top;
                        this._elem.css("left", ai);
                        this._elem.css("top", ah);
                        break;
                    case"n":
                        var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                        var ah = aj.top;
                        this._elem.css("left", ai);
                        this._elem.css("top", ah);
                        break;
                    case"ne":
                        var ai = aj.right;
                        var ah = aj.top;
                        this._elem.css({right: ai, top: ah});
                        break;
                    case"e":
                        var ai = aj.right;
                        var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                        this._elem.css({right: ai, top: ah});
                        break;
                    case"se":
                        var ai = aj.right;
                        var ah = aj.bottom;
                        this._elem.css({right: ai, bottom: ah});
                        break;
                    case"s":
                        var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                        var ah = aj.bottom;
                        this._elem.css({left: ai, bottom: ah});
                        break;
                    case"sw":
                        var ai = aj.left;
                        var ah = aj.bottom;
                        this._elem.css({left: ai, bottom: ah});
                        break;
                    case"w":
                        var ai = aj.left;
                        var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                        this._elem.css({left: ai, top: ah});
                        break;
                    default:
                        var ai = aj.right;
                        var ah = aj.bottom;
                        this._elem.css({right: ai, bottom: ah});
                        break
                }
            } else {
                if (this.placement == "outside") {
                    switch (this.location) {
                        case"nw":
                            var ai = this._plotDimensions.width - aj.left;
                            var ah = aj.top;
                            this._elem.css("right", ai);
                            this._elem.css("top", ah);
                            break;
                        case"n":
                            var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                            var ah = this._plotDimensions.height - aj.top;
                            this._elem.css("left", ai);
                            this._elem.css("bottom", ah);
                            break;
                        case"ne":
                            var ai = this._plotDimensions.width - aj.right;
                            var ah = aj.top;
                            this._elem.css({left: ai, top: ah});
                            break;
                        case"e":
                            var ai = this._plotDimensions.width - aj.right;
                            var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                            this._elem.css({left: ai, top: ah});
                            break;
                        case"se":
                            var ai = this._plotDimensions.width - aj.right;
                            var ah = aj.bottom;
                            this._elem.css({left: ai, bottom: ah});
                            break;
                        case"s":
                            var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                            var ah = this._plotDimensions.height - aj.bottom;
                            this._elem.css({left: ai, top: ah});
                            break;
                        case"sw":
                            var ai = this._plotDimensions.width - aj.left;
                            var ah = aj.bottom;
                            this._elem.css({right: ai, bottom: ah});
                            break;
                        case"w":
                            var ai = this._plotDimensions.width - aj.left;
                            var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                            this._elem.css({right: ai, top: ah});
                            break;
                        default:
                            var ai = aj.right;
                            var ah = aj.bottom;
                            this._elem.css({right: ai, bottom: ah});
                            break
                    }
                } else {
                    switch (this.location) {
                        case"nw":
                            this._elem.css({left: 0, top: aj.top});
                            break;
                        case"n":
                            var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                            this._elem.css({left: ai, top: aj.top});
                            break;
                        case"ne":
                            this._elem.css({right: 0, top: aj.top});
                            break;
                        case"e":
                            var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                            this._elem.css({right: aj.right, top: ah});
                            break;
                        case"se":
                            this._elem.css({right: aj.right, bottom: aj.bottom});
                            break;
                        case"s":
                            var ai = (aj.left + (this._plotDimensions.width - aj.right)) / 2 - this.getWidth() / 2;
                            this._elem.css({left: ai, bottom: aj.bottom});
                            break;
                        case"sw":
                            this._elem.css({left: aj.left, bottom: aj.bottom});
                            break;
                        case"w":
                            var ah = (aj.top + (this._plotDimensions.height - aj.bottom)) / 2 - this.getHeight() / 2;
                            this._elem.css({left: aj.left, top: ah});
                            break;
                        default:
                            this._elem.css({right: aj.right, bottom: aj.bottom});
                            break
                    }
                }
            }
        }
    };
    L.jqplot.ThemeEngine = function () {
        this.themes = {};
        this.activeTheme = null
    };
    L.jqplot.ThemeEngine.prototype.init = function () {
        var ak = new L.jqplot.Theme({_name: "Default"});
        var an, ai, am;
        for (an in ak.target) {
            if (an == "textColor") {
                ak.target[an] = this.target.css("color")
            } else {
                ak.target[an] = this.target.css(an)
            }
        }
        if (this.title.show && this.title._elem) {
            for (an in ak.title) {
                if (an == "textColor") {
                    ak.title[an] = this.title._elem.css("color")
                } else {
                    ak.title[an] = this.title._elem.css(an)
                }
            }
        }
        for (an in ak.grid) {
            ak.grid[an] = this.grid[an]
        }
        if (ak.grid.backgroundColor == null && this.grid.background != null) {
            ak.grid.backgroundColor = this.grid.background
        }
        if (this.legend.show && this.legend._elem) {
            for (an in ak.legend) {
                if (an == "textColor") {
                    ak.legend[an] = this.legend._elem.css("color")
                } else {
                    ak.legend[an] = this.legend._elem.css(an)
                }
            }
        }
        var aj;
        for (ai = 0; ai < this.series.length; ai++) {
            aj = this.series[ai];
            if (aj.renderer.constructor == L.jqplot.LineRenderer) {
                ak.series.push(new p())
            } else {
                if (aj.renderer.constructor == L.jqplot.BarRenderer) {
                    ak.series.push(new T())
                } else {
                    if (aj.renderer.constructor == L.jqplot.PieRenderer) {
                        ak.series.push(new f())
                    } else {
                        if (aj.renderer.constructor == L.jqplot.DonutRenderer) {
                            ak.series.push(new G())
                        } else {
                            if (aj.renderer.constructor == L.jqplot.FunnelRenderer) {
                                ak.series.push(new Z())
                            } else {
                                if (aj.renderer.constructor == L.jqplot.MeterGaugeRenderer) {
                                    ak.series.push(new D())
                                } else {
                                    ak.series.push({})
                                }
                            }
                        }
                    }
                }
            }
            for (an in ak.series[ai]) {
                ak.series[ai][an] = aj[an]
            }
        }
        var ah, al;
        for (an in this.axes) {
            al = this.axes[an];
            ah = ak.axes[an] = new P();
            ah.borderColor = al.borderColor;
            ah.borderWidth = al.borderWidth;
            if (al._ticks && al._ticks[0]) {
                for (am in ah.ticks) {
                    if (al._ticks[0].hasOwnProperty(am)) {
                        ah.ticks[am] = al._ticks[0][am]
                    } else {
                        if (al._ticks[0]._elem) {
                            ah.ticks[am] = al._ticks[0]._elem.css(am)
                        }
                    }
                }
            }
            if (al._label && al._label.show) {
                for (am in ah.label) {
                    if (al._label[am]) {
                        ah.label[am] = al._label[am]
                    } else {
                        if (al._label._elem) {
                            if (am == "textColor") {
                                ah.label[am] = al._label._elem.css("color")
                            } else {
                                ah.label[am] = al._label._elem.css(am)
                            }
                        }
                    }
                }
            }
        }
        this.themeEngine._add(ak);
        this.themeEngine.activeTheme = this.themeEngine.themes[ak._name]
    };
    L.jqplot.ThemeEngine.prototype.get = function (ah) {
        if (!ah) {
            return this.activeTheme
        } else {
            return this.themes[ah]
        }
    };
    function O(ai, ah) {
        return ai - ah
    }

    L.jqplot.ThemeEngine.prototype.getThemeNames = function () {
        var ah = [];
        for (var ai in this.themes) {
            ah.push(ai)
        }
        return ah.sort(O)
    };
    L.jqplot.ThemeEngine.prototype.getThemes = function () {
        var ai = [];
        var ah = [];
        for (var ak in this.themes) {
            ai.push(ak)
        }
        ai.sort(O);
        for (var aj = 0; aj < ai.length; aj++) {
            ah.push(this.themes[ai[aj]])
        }
        return ah
    };
    L.jqplot.ThemeEngine.prototype.activate = function (av, aB) {
        var ah = false;
        if (!aB && this.activeTheme && this.activeTheme._name) {
            aB = this.activeTheme._name
        }
        if (!this.themes.hasOwnProperty(aB)) {
            throw new Error("No theme of that name")
        } else {
            var am = this.themes[aB];
            this.activeTheme = am;
            var aA, at = false, ar = false;
            var ai = ["xaxis", "x2axis", "yaxis", "y2axis"];
            for (aw = 0; aw < ai.length; aw++) {
                var an = ai[aw];
                if (am.axesStyles.borderColor != null) {
                    av.axes[an].borderColor = am.axesStyles.borderColor
                }
                if (am.axesStyles.borderWidth != null) {
                    av.axes[an].borderWidth = am.axesStyles.borderWidth
                }
            }
            for (var az in av.axes) {
                var ak = av.axes[az];
                if (ak.show) {
                    var aq = am.axes[az] || {};
                    var ao = am.axesStyles;
                    var al = L.jqplot.extend(true, {}, aq, ao);
                    aA = (am.axesStyles.borderColor != null) ? am.axesStyles.borderColor : al.borderColor;
                    if (al.borderColor != null) {
                        ak.borderColor = al.borderColor;
                        ah = true
                    }
                    aA = (am.axesStyles.borderWidth != null) ? am.axesStyles.borderWidth : al.borderWidth;
                    if (al.borderWidth != null) {
                        ak.borderWidth = al.borderWidth;
                        ah = true
                    }
                    if (ak._ticks && ak._ticks[0]) {
                        for (var aj in al.ticks) {
                            aA = al.ticks[aj];
                            if (aA != null) {
                                ak.tickOptions[aj] = aA;
                                ak._ticks = [];
                                ah = true
                            }
                        }
                    }
                    if (ak._label && ak._label.show) {
                        for (var aj in al.label) {
                            aA = al.label[aj];
                            if (aA != null) {
                                ak.labelOptions[aj] = aA;
                                ah = true
                            }
                        }
                    }
                }
            }
            for (var au in am.grid) {
                if (am.grid[au] != null) {
                    av.grid[au] = am.grid[au]
                }
            }
            if (!ah) {
                av.grid.draw()
            }
            if (av.legend.show) {
                for (au in am.legend) {
                    if (am.legend[au] != null) {
                        av.legend[au] = am.legend[au]
                    }
                }
            }
            if (av.title.show) {
                for (au in am.title) {
                    if (am.title[au] != null) {
                        av.title[au] = am.title[au]
                    }
                }
            }
            var aw;
            for (aw = 0; aw < am.series.length; aw++) {
                var ap = {};
                var ay = false;
                for (au in am.series[aw]) {
                    aA = (am.seriesStyles[au] != null) ? am.seriesStyles[au] : am.series[aw][au];
                    if (aA != null) {
                        ap[au] = aA;
                        if (au == "color") {
                            av.series[aw].renderer.shapeRenderer.fillStyle = aA;
                            av.series[aw].renderer.shapeRenderer.strokeStyle = aA;
                            av.series[aw][au] = aA
                        } else {
                            if ((au == "lineWidth") || (au == "linePattern")) {
                                av.series[aw].renderer.shapeRenderer[au] = aA;
                                av.series[aw][au] = aA
                            } else {
                                if (au == "markerOptions") {
                                    V(av.series[aw].markerOptions, aA);
                                    V(av.series[aw].markerRenderer, aA)
                                } else {
                                    av.series[aw][au] = aA
                                }
                            }
                        }
                        ah = true
                    }
                }
            }
            if (ah) {
                av.target.empty();
                av.draw()
            }
            for (au in am.target) {
                if (am.target[au] != null) {
                    av.target.css(au, am.target[au])
                }
            }
        }
    };
    L.jqplot.ThemeEngine.prototype._add = function (ai, ah) {
        if (ah) {
            ai._name = ah
        }
        if (!ai._name) {
            ai._name = Date.parse(new Date())
        }
        if (!this.themes.hasOwnProperty(ai._name)) {
            this.themes[ai._name] = ai
        } else {
            throw new Error("jqplot.ThemeEngine Error: Theme already in use")
        }
    };
    L.jqplot.ThemeEngine.prototype.remove = function (ah) {
        if (ah == "Default") {
            return false
        }
        return delete this.themes[ah]
    };
    L.jqplot.ThemeEngine.prototype.newTheme = function (ah, aj) {
        if (typeof(ah) == "object") {
            aj = aj || ah;
            ah = null
        }
        if (aj && aj._name) {
            ah = aj._name
        } else {
            ah = ah || Date.parse(new Date())
        }
        var ai = this.copy(this.themes.Default._name, ah);
        L.jqplot.extend(ai, aj);
        return ai
    };
    function B(aj) {
        if (aj == null || typeof(aj) != "object") {
            return aj
        }
        var ah = new aj.constructor();
        for (var ai in aj) {
            ah[ai] = B(aj[ai])
        }
        return ah
    }

    L.jqplot.clone = B;
    function V(aj, ai) {
        if (ai == null || typeof(ai) != "object") {
            return
        }
        for (var ah in ai) {
            if (ah == "highlightColors") {
                aj[ah] = B(ai[ah])
            }
            if (ai[ah] != null && typeof(ai[ah]) == "object") {
                if (!aj.hasOwnProperty(ah)) {
                    aj[ah] = {}
                }
                V(aj[ah], ai[ah])
            } else {
                aj[ah] = ai[ah]
            }
        }
    }

    L.jqplot.merge = V;
    L.jqplot.extend = function () {
        var am = arguments[0] || {}, ak = 1, al = arguments.length, ah = false, aj;
        if (typeof am === "boolean") {
            ah = am;
            am = arguments[1] || {};
            ak = 2
        }
        if (typeof am !== "object" && !toString.call(am) === "[object Function]") {
            am = {}
        }
        for (; ak < al; ak++) {
            if ((aj = arguments[ak]) != null) {
                for (var ai in aj) {
                    var an = am[ai], ao = aj[ai];
                    if (am === ao) {
                        continue
                    }
                    if (ah && ao && typeof ao === "object" && !ao.nodeType) {
                        am[ai] = L.jqplot.extend(ah, an || (ao.length != null ? [] : {}), ao)
                    } else {
                        if (ao !== u) {
                            am[ai] = ao
                        }
                    }
                }
            }
        }
        return am
    };
    L.jqplot.ThemeEngine.prototype.rename = function (ai, ah) {
        if (ai == "Default" || ah == "Default") {
            throw new Error("jqplot.ThemeEngine Error: Cannot rename from/to Default")
        }
        if (this.themes.hasOwnProperty(ah)) {
            throw new Error("jqplot.ThemeEngine Error: New name already in use.")
        } else {
            if (this.themes.hasOwnProperty(ai)) {
                var aj = this.copy(ai, ah);
                this.remove(ai);
                return aj
            }
        }
        throw new Error("jqplot.ThemeEngine Error: Old name or new name invalid")
    };
    L.jqplot.ThemeEngine.prototype.copy = function (ah, aj, al) {
        if (aj == "Default") {
            throw new Error("jqplot.ThemeEngine Error: Cannot copy over Default theme")
        }
        if (!this.themes.hasOwnProperty(ah)) {
            var ai = "jqplot.ThemeEngine Error: Source name invalid";
            throw new Error(ai)
        }
        if (this.themes.hasOwnProperty(aj)) {
            var ai = "jqplot.ThemeEngine Error: Target name invalid";
            throw new Error(ai)
        } else {
            var ak = B(this.themes[ah]);
            ak._name = aj;
            L.jqplot.extend(true, ak, al);
            this._add(ak);
            return ak
        }
    };
    L.jqplot.Theme = function (ah, ai) {
        if (typeof(ah) == "object") {
            ai = ai || ah;
            ah = null
        }
        ah = ah || Date.parse(new Date());
        this._name = ah;
        this.target = {backgroundColor: null};
        this.legend = {textColor: null, fontFamily: null, fontSize: null, border: null, background: null};
        this.title = {textColor: null, fontFamily: null, fontSize: null, textAlign: null};
        this.seriesStyles = {};
        this.series = [];
        this.grid = {drawGridlines: null, gridLineColor: null, gridLineWidth: null, backgroundColor: null, borderColor: null, borderWidth: null, shadow: null};
        this.axesStyles = {label: {}, ticks: {}};
        this.axes = {};
        if (typeof(ai) == "string") {
            this._name = ai
        } else {
            if (typeof(ai) == "object") {
                L.jqplot.extend(true, this, ai)
            }
        }
    };
    var P = function () {
        this.borderColor = null;
        this.borderWidth = null;
        this.ticks = new o();
        this.label = new t()
    };
    var o = function () {
        this.show = null;
        this.showGridline = null;
        this.showLabel = null;
        this.showMark = null;
        this.size = null;
        this.textColor = null;
        this.whiteSpace = null;
        this.fontSize = null;
        this.fontFamily = null
    };
    var t = function () {
        this.textColor = null;
        this.whiteSpace = null;
        this.fontSize = null;
        this.fontFamily = null;
        this.fontWeight = null
    };
    var p = function () {
        this.color = null;
        this.lineWidth = null;
        this.linePattern = null;
        this.shadow = null;
        this.fillColor = null;
        this.showMarker = null;
        this.markerOptions = new I()
    };
    var I = function () {
        this.show = null;
        this.style = null;
        this.lineWidth = null;
        this.size = null;
        this.color = null;
        this.shadow = null
    };
    var T = function () {
        this.color = null;
        this.seriesColors = null;
        this.lineWidth = null;
        this.shadow = null;
        this.barPadding = null;
        this.barMargin = null;
        this.barWidth = null;
        this.highlightColors = null
    };
    var f = function () {
        this.seriesColors = null;
        this.padding = null;
        this.sliceMargin = null;
        this.fill = null;
        this.shadow = null;
        this.startAngle = null;
        this.lineWidth = null;
        this.highlightColors = null
    };
    var G = function () {
        this.seriesColors = null;
        this.padding = null;
        this.sliceMargin = null;
        this.fill = null;
        this.shadow = null;
        this.startAngle = null;
        this.lineWidth = null;
        this.innerDiameter = null;
        this.thickness = null;
        this.ringMargin = null;
        this.highlightColors = null
    };
    var Z = function () {
        this.color = null;
        this.lineWidth = null;
        this.shadow = null;
        this.padding = null;
        this.sectionMargin = null;
        this.seriesColors = null;
        this.highlightColors = null
    };
    var D = function () {
        this.padding = null;
        this.backgroundColor = null;
        this.ringColor = null;
        this.tickColor = null;
        this.ringWidth = null;
        this.intervalColors = null;
        this.intervalInnerRadius = null;
        this.intervalOuterRadius = null;
        this.hubRadius = null;
        this.needleThickness = null;
        this.needlePad = null
    };
    L.fn.jqplotChildText = function () {
        return L(this).contents().filter(function () {
            return this.nodeType == 3
        }).text()
    };
    L.fn.jqplotGetComputedFontStyle = function () {
        var ak = window.getComputedStyle ? window.getComputedStyle(this[0], "") : this[0].currentStyle;
        var ai = ak["font-style"] ? ["font-style", "font-weight", "font-size", "font-family"] : ["fontStyle", "fontWeight", "fontSize", "fontFamily"];
        var al = [];
        for (var aj = 0; aj < ai.length; ++aj) {
            var ah = String(ak[ai[aj]]);
            if (ah && ah != "normal") {
                al.push(ah)
            }
        }
        return al.join(" ")
    };
    L.fn.jqplotToImageCanvas = function (aj) {
        aj = aj || {};
        var av = (aj.x_offset == null) ? 0 : aj.x_offset;
        var ax = (aj.y_offset == null) ? 0 : aj.y_offset;
        var al = (aj.backgroundColor == null) ? "rgb(255,255,255)" : aj.backgroundColor;
        if (L(this).width() == 0 || L(this).height() == 0) {
            return null
        }
        if (L.jqplot.use_excanvas) {
            return null
        }
        var an = document.createElement("canvas");
        var aA = L(this).outerHeight(true);
        var at = L(this).outerWidth(true);
        var am = L(this).offset();
        var ao = am.left;
        var aq = am.top;
        var au = 0, ar = 0;
        var ay = ["jqplot-table-legend", "jqplot-xaxis-tick", "jqplot-x2axis-tick", "jqplot-yaxis-tick", "jqplot-y2axis-tick", "jqplot-y3axis-tick", "jqplot-y4axis-tick", "jqplot-y5axis-tick", "jqplot-y6axis-tick", "jqplot-y7axis-tick", "jqplot-y8axis-tick", "jqplot-y9axis-tick", "jqplot-xaxis-label", "jqplot-x2axis-label", "jqplot-yaxis-label", "jqplot-y2axis-label", "jqplot-y3axis-label", "jqplot-y4axis-label", "jqplot-y5axis-label", "jqplot-y6axis-label", "jqplot-y7axis-label", "jqplot-y8axis-label", "jqplot-y9axis-label"];
        var ap, ah, ai, aB;
        for (var az = 0; az < ay.length; az++) {
            L(this).find("." + ay[az]).each(function () {
                ap = L(this).offset().top - aq;
                ah = L(this).offset().left - ao;
                aB = ah + L(this).outerWidth(true) + au;
                ai = ap + L(this).outerHeight(true) + ar;
                if (ah < -au) {
                    at = at - au - ah;
                    au = -ah
                }
                if (ap < -ar) {
                    aA = aA - ar - ap;
                    ar = -ap
                }
                if (aB > at) {
                    at = aB
                }
                if (ai > aA) {
                    aA = ai
                }
            })
        }
        an.width = at + Number(av);
        an.height = aA + Number(ax);
        var ak = an.getContext("2d");
        ak.save();
        ak.fillStyle = al;
        ak.fillRect(0, 0, an.width, an.height);
        ak.restore();
        ak.translate(au, ar);
        ak.textAlign = "left";
        ak.textBaseline = "top";
        function aC(aE) {
            var aF = parseInt(L(aE).css("line-height"), 10);
            if (isNaN(aF)) {
                aF = parseInt(L(aE).css("font-size"), 10) * 1.2
            }
            return aF
        }

        function aD(aF, aE, aS, aG, aO, aH) {
            var aQ = aC(aF);
            var aK = L(aF).innerWidth();
            var aL = L(aF).innerHeight();
            var aN = aS.split(/\s+/);
            var aR = aN.length;
            var aP = "";
            var aM = [];
            var aU = aO;
            var aT = aG;
            for (var aJ = 0; aJ < aR; aJ++) {
                aP += aN[aJ];
                if (aE.measureText(aP).width > aK) {
                    aM.push(aJ);
                    aP = "";
                    aJ--
                }
            }
            if (aM.length === 0) {
                if (L(aF).css("textAlign") === "center") {
                    aT = aG + (aH - aE.measureText(aP).width) / 2 - au
                }
                aE.fillText(aS, aT, aO)
            } else {
                aP = aN.slice(0, aM[0]).join(" ");
                if (L(aF).css("textAlign") === "center") {
                    aT = aG + (aH - aE.measureText(aP).width) / 2 - au
                }
                aE.fillText(aP, aT, aU);
                aU += aQ;
                for (var aJ = 1, aI = aM.length; aJ < aI; aJ++) {
                    aP = aN.slice(aM[aJ - 1], aM[aJ]).join(" ");
                    if (L(aF).css("textAlign") === "center") {
                        aT = aG + (aH - aE.measureText(aP).width) / 2 - au
                    }
                    aE.fillText(aP, aT, aU);
                    aU += aQ
                }
                aP = aN.slice(aM[aJ - 1], aN.length).join(" ");
                if (L(aF).css("textAlign") === "center") {
                    aT = aG + (aH - aE.measureText(aP).width) / 2 - au
                }
                aE.fillText(aP, aT, aU)
            }
        }

        function aw(aG, aJ, aE) {
            var aN = aG.tagName.toLowerCase();
            var aF = L(aG).position();
            var aK = window.getComputedStyle ? window.getComputedStyle(aG, "") : aG.currentStyle;
            var aI = aJ + aF.left + parseInt(aK.marginLeft, 10) + parseInt(aK.borderLeftWidth, 10) + parseInt(aK.paddingLeft, 10);
            var aL = aE + aF.top + parseInt(aK.marginTop, 10) + parseInt(aK.borderTopWidth, 10) + parseInt(aK.paddingTop, 10);
            var aM = an.width;
            if ((aN == "div" || aN == "span") && !L(aG).hasClass("jqplot-highlighter-tooltip")) {
                L(aG).children().each(function () {
                    aw(this, aI, aL)
                });
                var aO = L(aG).jqplotChildText();
                if (aO) {
                    ak.font = L(aG).jqplotGetComputedFontStyle();
                    ak.fillStyle = L(aG).css("color");
                    aD(aG, ak, aO, aI, aL, aM)
                }
            } else {
                if (aN === "table" && L(aG).hasClass("jqplot-table-legend")) {
                    ak.strokeStyle = L(aG).css("border-top-color");
                    ak.fillStyle = L(aG).css("background-color");
                    ak.fillRect(aI, aL, L(aG).innerWidth(), L(aG).innerHeight());
                    if (parseInt(L(aG).css("border-top-width"), 10) > 0) {
                        ak.strokeRect(aI, aL, L(aG).innerWidth(), L(aG).innerHeight())
                    }
                    L(aG).find("div.jqplot-table-legend-swatch-outline").each(function () {
                        var aU = L(this);
                        ak.strokeStyle = aU.css("border-top-color");
                        var aQ = aI + aU.position().left;
                        var aR = aL + aU.position().top;
                        ak.strokeRect(aQ, aR, aU.innerWidth(), aU.innerHeight());
                        aQ += parseInt(aU.css("padding-left"), 10);
                        aR += parseInt(aU.css("padding-top"), 10);
                        var aT = aU.innerHeight() - 2 * parseInt(aU.css("padding-top"), 10);
                        var aP = aU.innerWidth() - 2 * parseInt(aU.css("padding-left"), 10);
                        var aS = aU.children("div.jqplot-table-legend-swatch");
                        ak.fillStyle = aS.css("background-color");
                        ak.fillRect(aQ, aR, aP, aT)
                    });
                    L(aG).find("td.jqplot-table-legend-label").each(function () {
                        var aR = L(this);
                        var aP = aI + aR.position().left;
                        var aQ = aL + aR.position().top + parseInt(aR.css("padding-top"), 10);
                        ak.font = aR.jqplotGetComputedFontStyle();
                        ak.fillStyle = aR.css("color");
                        aD(aR, ak, aR.text(), aP, aQ, aM)
                    });
                    var aH = null
                } else {
                    if (aN == "canvas") {
                        ak.drawImage(aG, aI, aL)
                    }
                }
            }
        }

        L(this).children().each(function () {
            aw(this, av, ax)
        });
        return an
    };
    L.fn.jqplotToImageStr = function (ai) {
        var ah = L(this).jqplotToImageCanvas(ai);
        if (ah) {
            return ah.toDataURL("image/png")
        } else {
            return null
        }
    };
    L.fn.jqplotToImageElem = function (ah) {
        var ai = document.createElement("img");
        var aj = L(this).jqplotToImageStr(ah);
        ai.src = aj;
        return ai
    };
    L.fn.jqplotToImageElemStr = function (ah) {
        var ai = "<img src=" + L(this).jqplotToImageStr(ah) + " />";
        return ai
    };
    L.fn.jqplotSaveImage = function () {
        var ah = L(this).jqplotToImageStr({});
        if (ah) {
            window.location.href = ah.replace("image/png", "image/octet-stream")
        }
    };
    L.fn.jqplotViewImage = function () {
        var ai = L(this).jqplotToImageElemStr({});
        var aj = L(this).jqplotToImageStr({});
        if (ai) {
            var ah = window.open("");
            ah.document.open("image/png");
            ah.document.write(ai);
            ah.document.close();
            ah = null
        }
    };
    var ag = function () {
        this.syntax = ag.config.syntax;
        this._type = "jsDate";
        this.proxy = new Date();
        this.options = {};
        this.locale = ag.regional.getLocale();
        this.formatString = "";
        this.defaultCentury = ag.config.defaultCentury;
        switch (arguments.length) {
            case 0:
                break;
            case 1:
                if (l(arguments[0]) == "[object Object]" && arguments[0]._type != "jsDate") {
                    var aj = this.options = arguments[0];
                    this.syntax = aj.syntax || this.syntax;
                    this.defaultCentury = aj.defaultCentury || this.defaultCentury;
                    this.proxy = ag.createDate(aj.date)
                } else {
                    this.proxy = ag.createDate(arguments[0])
                }
                break;
            default:
                var ah = [];
                for (var ai = 0; ai < arguments.length; ai++) {
                    ah.push(arguments[ai])
                }
                this.proxy = new Date();
                this.proxy.setFullYear.apply(this.proxy, ah.slice(0, 3));
                if (ah.slice(3).length) {
                    this.proxy.setHours.apply(this.proxy, ah.slice(3))
                }
                break
        }
    };
    ag.config = {defaultLocale: "en", syntax: "perl", defaultCentury: 1900};
    ag.prototype.add = function (aj, ai) {
        var ah = E[ai] || E.day;
        if (typeof ah == "number") {
            this.proxy.setTime(this.proxy.getTime() + (ah * aj))
        } else {
            ah.add(this, aj)
        }
        return this
    };
    ag.prototype.clone = function () {
        return new ag(this.proxy.getTime())
    };
    ag.prototype.getUtcOffset = function () {
        return this.proxy.getTimezoneOffset() * 60000
    };
    ag.prototype.diff = function (ai, al, ah) {
        ai = new ag(ai);
        if (ai === null) {
            return null
        }
        var aj = E[al] || E.day;
        if (typeof aj == "number") {
            var ak = (this.proxy.getTime() - ai.proxy.getTime()) / aj
        } else {
            var ak = aj.diff(this.proxy, ai.proxy)
        }
        return(ah ? ak : Math[ak > 0 ? "floor" : "ceil"](ak))
    };
    ag.prototype.getAbbrDayName = function () {
        return ag.regional[this.locale]["dayNamesShort"][this.proxy.getDay()]
    };
    ag.prototype.getAbbrMonthName = function () {
        return ag.regional[this.locale]["monthNamesShort"][this.proxy.getMonth()]
    };
    ag.prototype.getAMPM = function () {
        return this.proxy.getHours() >= 12 ? "PM" : "AM"
    };
    ag.prototype.getAmPm = function () {
        return this.proxy.getHours() >= 12 ? "pm" : "am"
    };
    ag.prototype.getCentury = function () {
        return parseInt(this.proxy.getFullYear() / 100, 10)
    };
    ag.prototype.getDate = function () {
        return this.proxy.getDate()
    };
    ag.prototype.getDay = function () {
        return this.proxy.getDay()
    };
    ag.prototype.getDayOfWeek = function () {
        var ah = this.proxy.getDay();
        return ah === 0 ? 7 : ah
    };
    ag.prototype.getDayOfYear = function () {
        var ai = this.proxy;
        var ah = ai - new Date("" + ai.getFullYear() + "/1/1 GMT");
        ah += ai.getTimezoneOffset() * 60000;
        ai = null;
        return parseInt(ah / 60000 / 60 / 24, 10) + 1
    };
    ag.prototype.getDayName = function () {
        return ag.regional[this.locale]["dayNames"][this.proxy.getDay()]
    };
    ag.prototype.getFullWeekOfYear = function () {
        var ak = this.proxy;
        var ah = this.getDayOfYear();
        var aj = 6 - ak.getDay();
        var ai = parseInt((ah + aj) / 7, 10);
        return ai
    };
    ag.prototype.getFullYear = function () {
        return this.proxy.getFullYear()
    };
    ag.prototype.getGmtOffset = function () {
        var ah = this.proxy.getTimezoneOffset() / 60;
        var ai = ah < 0 ? "+" : "-";
        ah = Math.abs(ah);
        return ai + N(Math.floor(ah), 2) + ":" + N((ah % 1) * 60, 2)
    };
    ag.prototype.getHours = function () {
        return this.proxy.getHours()
    };
    ag.prototype.getHours12 = function () {
        var ah = this.proxy.getHours();
        return ah > 12 ? ah - 12 : (ah == 0 ? 12 : ah)
    };
    ag.prototype.getIsoWeek = function () {
        var ak = this.proxy;
        var aj = this.getWeekOfYear();
        var ah = (new Date("" + ak.getFullYear() + "/1/1")).getDay();
        var ai = aj + (ah > 4 || ah <= 1 ? 0 : 1);
        if (ai == 53 && (new Date("" + ak.getFullYear() + "/12/31")).getDay() < 4) {
            ai = 1
        } else {
            if (ai === 0) {
                ak = new ag(new Date("" + (ak.getFullYear() - 1) + "/12/31"));
                ai = ak.getIsoWeek()
            }
        }
        ak = null;
        return ai
    };
    ag.prototype.getMilliseconds = function () {
        return this.proxy.getMilliseconds()
    };
    ag.prototype.getMinutes = function () {
        return this.proxy.getMinutes()
    };
    ag.prototype.getMonth = function () {
        return this.proxy.getMonth()
    };
    ag.prototype.getMonthName = function () {
        return ag.regional[this.locale]["monthNames"][this.proxy.getMonth()]
    };
    ag.prototype.getMonthNumber = function () {
        return this.proxy.getMonth() + 1
    };
    ag.prototype.getSeconds = function () {
        return this.proxy.getSeconds()
    };
    ag.prototype.getShortYear = function () {
        return this.proxy.getYear() % 100
    };
    ag.prototype.getTime = function () {
        return this.proxy.getTime()
    };
    ag.prototype.getTimezoneAbbr = function () {
        return this.proxy.toString().replace(/^.*\(([^)]+)\)$/, "$1")
    };
    ag.prototype.getTimezoneName = function () {
        var ah = /(?:\((.+)\)$| ([A-Z]{3}) )/.exec(this.toString());
        return ah[1] || ah[2] || "GMT" + this.getGmtOffset()
    };
    ag.prototype.getTimezoneOffset = function () {
        return this.proxy.getTimezoneOffset()
    };
    ag.prototype.getWeekOfYear = function () {
        var ah = this.getDayOfYear();
        var aj = 7 - this.getDayOfWeek();
        var ai = parseInt((ah + aj) / 7, 10);
        return ai
    };
    ag.prototype.getUnix = function () {
        return Math.round(this.proxy.getTime() / 1000, 0)
    };
    ag.prototype.getYear = function () {
        return this.proxy.getYear()
    };
    ag.prototype.next = function (ah) {
        ah = ah || "day";
        return this.clone().add(1, ah)
    };
    ag.prototype.set = function () {
        switch (arguments.length) {
            case 0:
                this.proxy = new Date();
                break;
            case 1:
                if (l(arguments[0]) == "[object Object]" && arguments[0]._type != "jsDate") {
                    var aj = this.options = arguments[0];
                    this.syntax = aj.syntax || this.syntax;
                    this.defaultCentury = aj.defaultCentury || this.defaultCentury;
                    this.proxy = ag.createDate(aj.date)
                } else {
                    this.proxy = ag.createDate(arguments[0])
                }
                break;
            default:
                var ah = [];
                for (var ai = 0; ai < arguments.length; ai++) {
                    ah.push(arguments[ai])
                }
                this.proxy = new Date();
                this.proxy.setFullYear.apply(this.proxy, ah.slice(0, 3));
                if (ah.slice(3).length) {
                    this.proxy.setHours.apply(this.proxy, ah.slice(3))
                }
                break
        }
        return this
    };
    ag.prototype.setDate = function (ah) {
        this.proxy.setDate(ah);
        return this
    };
    ag.prototype.setFullYear = function () {
        this.proxy.setFullYear.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.setHours = function () {
        this.proxy.setHours.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.setMilliseconds = function (ah) {
        this.proxy.setMilliseconds(ah);
        return this
    };
    ag.prototype.setMinutes = function () {
        this.proxy.setMinutes.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.setMonth = function () {
        this.proxy.setMonth.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.setSeconds = function () {
        this.proxy.setSeconds.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.setTime = function (ah) {
        this.proxy.setTime(ah);
        return this
    };
    ag.prototype.setYear = function () {
        this.proxy.setYear.apply(this.proxy, arguments);
        return this
    };
    ag.prototype.strftime = function (ah) {
        ah = ah || this.formatString || ag.regional[this.locale]["formatString"];
        return ag.strftime(this, ah, this.syntax)
    };
    ag.prototype.toString = function () {
        return this.proxy.toString()
    };
    ag.prototype.toYmdInt = function () {
        return(this.proxy.getFullYear() * 10000) + (this.getMonthNumber() * 100) + this.proxy.getDate()
    };
    ag.regional = {en: {monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], formatString: "%Y-%m-%d %H:%M:%S"}, fr: {monthNames: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"], monthNamesShort: ["Jan", "Fév", "Mar", "Avr", "Mai", "Jun", "Jul", "Aoû", "Sep", "Oct", "Nov", "Déc"], dayNames: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"], dayNamesShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"], formatString: "%Y-%m-%d %H:%M:%S"}, de: {monthNames: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], monthNamesShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], dayNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], dayNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], formatString: "%Y-%m-%d %H:%M:%S"}, es: {monthNames: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], monthNamesShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"], dayNames: ["Domingo", "Lunes", "Martes", "Mi&eacute;rcoles", "Jueves", "Viernes", "S&aacute;bado"], dayNamesShort: ["Dom", "Lun", "Mar", "Mi&eacute;", "Juv", "Vie", "S&aacute;b"], formatString: "%Y-%m-%d %H:%M:%S"}, ru: {monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"], dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"], formatString: "%Y-%m-%d %H:%M:%S"}, ar: {monthNames: ["كانون الثاني", "شباط", "آذار", "نيسان", "آذار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["السبت", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة"], dayNamesShort: ["سبت", "أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة"], formatString: "%Y-%m-%d %H:%M:%S"}, pt: {monthNames: ["Janeiro", "Fevereiro", "Mar&ccedil;o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], dayNames: ["Domingo", "Segunda-feira", "Ter&ccedil;a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S&aacute;bado"], dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S&aacute;b"], formatString: "%Y-%m-%d %H:%M:%S"}, "pt-BR": {monthNames: ["Janeiro", "Fevereiro", "Mar&ccedil;o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], dayNames: ["Domingo", "Segunda-feira", "Ter&ccedil;a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S&aacute;bado"], dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S&aacute;b"], formatString: "%Y-%m-%d %H:%M:%S"}, pl: {monthNames: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"], monthNamesShort: ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"], dayNames: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"], dayNamesShort: ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "Sb"], formatString: "%Y-%m-%d %H:%M:%S"}, nl: {monthNames: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "July", "Augustus", "September", "Oktober", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], dayNames: ","["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"], dayNamesShort: ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"], formatString: "%Y-%m-%d %H:%M:%S"}, sv: {monthNames: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"], monthNamesShort: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], dayNames: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"], dayNamesShort: ["sön", "mån", "tis", "ons", "tor", "fre", "lör"], formatString: "%Y-%m-%d %H:%M:%S"}};
    ag.regional["en-US"] = ag.regional["en-GB"] = ag.regional.en;
    ag.regional.getLocale = function () {
        var ah = ag.config.defaultLocale;
        if (document && document.getElementsByTagName("html") && document.getElementsByTagName("html")[0].lang) {
            ah = document.getElementsByTagName("html")[0].lang;
            if (!ag.regional.hasOwnProperty(ah)) {
                ah = ag.config.defaultLocale
            }
        }
        return ah
    };
    var C = 24 * 60 * 60 * 1000;
    var N = function (ah, ak) {
        ah = String(ah);
        var ai = ak - ah.length;
        var aj = String(Math.pow(10, ai)).slice(1);
        return aj.concat(ah)
    };
    var E = {millisecond: 1, second: 1000, minute: 60 * 1000, hour: 60 * 60 * 1000, day: C, week: 7 * C, month: {add: function (aj, ah) {
        E.year.add(aj, Math[ah > 0 ? "floor" : "ceil"](ah / 12));
        var ai = aj.getMonth() + (ah % 12);
        if (ai == 12) {
            ai = 0;
            aj.setYear(aj.getFullYear() + 1)
        } else {
            if (ai == -1) {
                ai = 11;
                aj.setYear(aj.getFullYear() - 1)
            }
        }
        aj.setMonth(ai)
    }, diff: function (al, aj) {
        var ah = al.getFullYear() - aj.getFullYear();
        var ai = al.getMonth() - aj.getMonth() + (ah * 12);
        var ak = al.getDate() - aj.getDate();
        return ai + (ak / 30)
    }}, year: {add: function (ai, ah) {
        ai.setYear(ai.getFullYear() + Math[ah > 0 ? "floor" : "ceil"](ah))
    }, diff: function (ai, ah) {
        return E.month.diff(ai, ah) / 12
    }}};
    for (var Y in E) {
        if (Y.substring(Y.length - 1) != "s") {
            E[Y + "s"] = E[Y]
        }
    }
    var H = function (al, ak, ai) {
        if (ag.formats[ai]["shortcuts"][ak]) {
            return ag.strftime(al, ag.formats[ai]["shortcuts"][ak], ai)
        } else {
            var ah = (ag.formats[ai]["codes"][ak] || "").split(".");
            var aj = al["get" + ah[0]] ? al["get" + ah[0]]() : "";
            if (ah[1]) {
                aj = N(aj, ah[1])
            }
            return aj
        }
    };
    ag.strftime = function (an, ak, aj, ao) {
        var ai = "perl";
        var am = ag.regional.getLocale();
        if (aj && ag.formats.hasOwnProperty(aj)) {
            ai = aj
        } else {
            if (aj && ag.regional.hasOwnProperty(aj)) {
                am = aj
            }
        }
        if (ao && ag.formats.hasOwnProperty(ao)) {
            ai = ao
        } else {
            if (ao && ag.regional.hasOwnProperty(ao)) {
                am = ao
            }
        }
        if (l(an) != "[object Object]" || an._type != "jsDate") {
            an = new ag(an);
            an.locale = am
        }
        if (!ak) {
            ak = an.formatString || ag.regional[am]["formatString"]
        }
        var ah = ak || "%Y-%m-%d", ap = "", al;
        while (ah.length > 0) {
            if (al = ah.match(ag.formats[ai].codes.matcher)) {
                ap += ah.slice(0, al.index);
                ap += (al[1] || "") + H(an, al[2], ai);
                ah = ah.slice(al.index + al[0].length)
            } else {
                ap += ah;
                ah = ""
            }
        }
        return ap
    };
    ag.formats = {ISO: "%Y-%m-%dT%H:%M:%S.%N%G", SQL: "%Y-%m-%d %H:%M:%S"};
    ag.formats.perl = {codes: {matcher: /()%(#?(%|[a-z]))/i, Y: "FullYear", y: "ShortYear.2", m: "MonthNumber.2", "#m": "MonthNumber", B: "MonthName", b: "AbbrMonthName", d: "Date.2", "#d": "Date", e: "Date", A: "DayName", a: "AbbrDayName", w: "Day", H: "Hours.2", "#H": "Hours", I: "Hours12.2", "#I": "Hours12", p: "AMPM", M: "Minutes.2", "#M": "Minutes", S: "Seconds.2", "#S": "Seconds", s: "Unix", N: "Milliseconds.3", "#N": "Milliseconds", O: "TimezoneOffset", Z: "TimezoneName", G: "GmtOffset"}, shortcuts: {F: "%Y-%m-%d", T: "%H:%M:%S", X: "%H:%M:%S", x: "%m/%d/%y", D: "%m/%d/%y", "#c": "%a %b %e %H:%M:%S %Y", v: "%e-%b-%Y", R: "%H:%M", r: "%I:%M:%S %p", t: "\t", n: "\n", "%": "%"}};
    ag.formats.php = {codes: {matcher: /()%((%|[a-z]))/i, a: "AbbrDayName", A: "DayName", d: "Date.2", e: "Date", j: "DayOfYear.3", u: "DayOfWeek", w: "Day", U: "FullWeekOfYear.2", V: "IsoWeek.2", W: "WeekOfYear.2", b: "AbbrMonthName", B: "MonthName", m: "MonthNumber.2", h: "AbbrMonthName", C: "Century.2", y: "ShortYear.2", Y: "FullYear", H: "Hours.2", I: "Hours12.2", l: "Hours12", p: "AMPM", P: "AmPm", M: "Minutes.2", S: "Seconds.2", s: "Unix", O: "TimezoneOffset", z: "GmtOffset", Z: "TimezoneAbbr"}, shortcuts: {D: "%m/%d/%y", F: "%Y-%m-%d", T: "%H:%M:%S", X: "%H:%M:%S", x: "%m/%d/%y", R: "%H:%M", r: "%I:%M:%S %p", t: "\t", n: "\n", "%": "%"}};
    ag.createDate = function (aj) {
        if (aj == null) {
            return new Date()
        }
        if (aj instanceof Date) {
            return aj
        }
        if (typeof aj == "number") {
            return new Date(aj)
        }
        var ao = String(aj).replace(/^\s*(.+)\s*$/g, "$1");
        ao = ao.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/, "$1/$2/$3");
        ao = ao.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{4})/i, "$1 $2 $3");
        var an = ao.match(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i);
        if (an && an.length > 3) {
            var at = parseFloat(an[3]);
            var am = ag.config.defaultCentury + at;
            am = String(am);
            ao = ao.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i, an[1] + " " + an[2] + " " + am)
        }
        an = ao.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})[^0-9]/);
        function ar(ax, aw) {
            var aC = parseFloat(aw[1]);
            var aB = parseFloat(aw[2]);
            var aA = parseFloat(aw[3]);
            var az = ag.config.defaultCentury;
            var av, au, aD, ay;
            if (aC > 31) {
                au = aA;
                aD = aB;
                av = az + aC
            } else {
                au = aB;
                aD = aC;
                av = az + aA
            }
            ay = aD + "/" + au + "/" + av;
            return ax.replace(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})/, ay)
        }

        if (an && an.length > 3) {
            ao = ar(ao, an)
        }
        var an = ao.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})$/);
        if (an && an.length > 3) {
            ao = ar(ao, an)
        }
        var al = 0;
        var ai = ag.matchers.length;
        var aq, ah, ap = ao, ak;
        while (al < ai) {
            ah = Date.parse(ap);
            if (!isNaN(ah)) {
                return new Date(ah)
            }
            aq = ag.matchers[al];
            if (typeof aq == "function") {
                ak = aq.call(ag, ap);
                if (ak instanceof Date) {
                    return ak
                }
            } else {
                ap = ao.replace(aq[0], aq[1])
            }
            al++
        }
        return NaN
    };
    ag.daysInMonth = function (ah, ai) {
        if (ai == 2) {
            return new Date(ah, 1, 29).getDate() == 29 ? 29 : 28
        }
        return[u, 31, u, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][ai]
    };
    ag.matchers = [
        [/(3[01]|[0-2]\d)\s*\.\s*(1[0-2]|0\d)\s*\.\s*([1-9]\d{3})/, "$2/$1/$3"],
        [/([1-9]\d{3})\s*-\s*(1[0-2]|0\d)\s*-\s*(3[01]|[0-2]\d)/, "$2/$3/$1"],
        function (ak) {
            var ai = ak.match(/^(?:(.+)\s+)?([012]?\d)(?:\s*\:\s*(\d\d))?(?:\s*\:\s*(\d\d(\.\d*)?))?\s*(am|pm)?\s*$/i);
            if (ai) {
                if (ai[1]) {
                    var aj = this.createDate(ai[1]);
                    if (isNaN(aj)) {
                        return
                    }
                } else {
                    var aj = new Date();
                    aj.setMilliseconds(0)
                }
                var ah = parseFloat(ai[2]);
                if (ai[6]) {
                    ah = ai[6].toLowerCase() == "am" ? (ah == 12 ? 0 : ah) : (ah == 12 ? 12 : ah + 12)
                }
                aj.setHours(ah, parseInt(ai[3] || 0, 10), parseInt(ai[4] || 0, 10), ((parseFloat(ai[5] || 0)) || 0) * 1000);
                return aj
            } else {
                return ak
            }
        },
        function (ak) {
            var ai = ak.match(/^(?:(.+))[T|\s+]([012]\d)(?:\:(\d\d))(?:\:(\d\d))(?:\.\d+)([\+\-]\d\d\:\d\d)$/i);
            if (ai) {
                if (ai[1]) {
                    var aj = this.createDate(ai[1]);
                    if (isNaN(aj)) {
                        return
                    }
                } else {
                    var aj = new Date();
                    aj.setMilliseconds(0)
                }
                var ah = parseFloat(ai[2]);
                aj.setHours(ah, parseInt(ai[3], 10), parseInt(ai[4], 10), parseFloat(ai[5]) * 1000);
                return aj
            } else {
                return ak
            }
        },
        function (al) {
            var aj = al.match(/^([0-3]?\d)\s*[-\/.\s]{1}\s*([a-zA-Z]{3,9})\s*[-\/.\s]{1}\s*([0-3]?\d)$/);
            if (aj) {
                var ak = new Date();
                var am = ag.config.defaultCentury;
                var ao = parseFloat(aj[1]);
                var an = parseFloat(aj[3]);
                var ai, ah, ap;
                if (ao > 31) {
                    ah = an;
                    ai = am + ao
                } else {
                    ah = ao;
                    ai = am + an
                }
                var ap = ab(aj[2], ag.regional[ag.regional.getLocale()]["monthNamesShort"]);
                if (ap == -1) {
                    ap = ab(aj[2], ag.regional[ag.regional.getLocale()]["monthNames"])
                }
                ak.setFullYear(ai, ap, ah);
                ak.setHours(0, 0, 0, 0);
                return ak
            } else {
                return al
            }
        }
    ];
    function ab(aj, ak) {
        if (ak.indexOf) {
            return ak.indexOf(aj)
        }
        for (var ah = 0, ai = ak.length; ah < ai; ah++) {
            if (ak[ah] === aj) {
                return ah
            }
        }
        return -1
    }

    function l(ah) {
        if (ah === null) {
            return"[object Null]"
        }
        return Object.prototype.toString.call(ah)
    }

    L.jsDate = ag;
    L.jqplot.sprintf = function () {
        function an(au, ap, aq, at) {
            var ar = (au.length >= ap) ? "" : Array(1 + ap - au.length >>> 0).join(aq);
            return at ? au + ar : ar + au
        }

        function ak(ar) {
            var aq = new String(ar);
            for (var ap = 10; ap > 0; ap--) {
                if (aq == (aq = aq.replace(/^(\d+)(\d{3})/, "$1" + L.jqplot.sprintf.thousandsSeparator + "$2"))) {
                    break
                }
            }
            return aq
        }

        function aj(av, au, ax, ar, at, aq) {
            var aw = ar - av.length;
            if (aw > 0) {
                var ap = " ";
                if (aq) {
                    ap = "&nbsp;"
                }
                if (ax || !at) {
                    av = an(av, ar, ap, ax)
                } else {
                    av = av.slice(0, au.length) + an("", aw, "0", true) + av.slice(au.length)
                }
            }
            return av
        }

        function ao(ay, aq, aw, ar, ap, av, ax, au) {
            var at = ay >>> 0;
            aw = aw && at && {"2": "0b", "8": "0", "16": "0x"}[aq] || "";
            ay = aw + an(at.toString(aq), av || 0, "0", false);
            return aj(ay, aw, ar, ap, ax, au)
        }

        function ah(au, av, ar, ap, at, aq) {
            if (ap != null) {
                au = au.slice(0, ap)
            }
            return aj(au, "", av, ar, at, aq)
        }

        var ai = arguments, al = 0, am = ai[al++];
        return am.replace(L.jqplot.sprintf.regex, function (aM, ax, ay, aB, aO, aJ, av) {
            if (aM == "%%") {
                return"%"
            }
            var aD = false, az = "", aA = false, aL = false, aw = false, au = false;
            for (var aI = 0; ay && aI < ay.length; aI++) {
                switch (ay.charAt(aI)) {
                    case" ":
                        az = " ";
                        break;
                    case"+":
                        az = "+";
                        break;
                    case"-":
                        aD = true;
                        break;
                    case"0":
                        aA = true;
                        break;
                    case"#":
                        aL = true;
                        break;
                    case"&":
                        aw = true;
                        break;
                    case"'":
                        au = true;
                        break
                }
            }
            if (!aB) {
                aB = 0
            } else {
                if (aB == "*") {
                    aB = +ai[al++]
                } else {
                    if (aB.charAt(0) == "*") {
                        aB = +ai[aB.slice(1, -1)]
                    } else {
                        aB = +aB
                    }
                }
            }
            if (aB < 0) {
                aB = -aB;
                aD = true
            }
            if (!isFinite(aB)) {
                throw new Error("$.jqplot.sprintf: (minimum-)width must be finite")
            }
            if (!aJ) {
                aJ = "fFeE".indexOf(av) > -1 ? 6 : (av == "d") ? 0 : void (0)
            } else {
                if (aJ == "*") {
                    aJ = +ai[al++]
                } else {
                    if (aJ.charAt(0) == "*") {
                        aJ = +ai[aJ.slice(1, -1)]
                    } else {
                        aJ = +aJ
                    }
                }
            }
            var aF = ax ? ai[ax.slice(0, -1)] : ai[al++];
            switch (av) {
                case"s":
                    if (aF == null) {
                        return""
                    }
                    return ah(String(aF), aD, aB, aJ, aA, aw);
                case"c":
                    return ah(String.fromCharCode(+aF), aD, aB, aJ, aA, aw);
                case"b":
                    return ao(aF, 2, aL, aD, aB, aJ, aA, aw);
                case"o":
                    return ao(aF, 8, aL, aD, aB, aJ, aA, aw);
                case"x":
                    return ao(aF, 16, aL, aD, aB, aJ, aA, aw);
                case"X":
                    return ao(aF, 16, aL, aD, aB, aJ, aA, aw).toUpperCase();
                case"u":
                    return ao(aF, 10, aL, aD, aB, aJ, aA, aw);
                case"i":
                    var ar = parseInt(+aF, 10);
                    if (isNaN(ar)) {
                        return""
                    }
                    var aH = ar < 0 ? "-" : az;
                    var aK = au ? ak(String(Math.abs(ar))) : String(Math.abs(ar));
                    aF = aH + an(aK, aJ, "0", false);
                    return aj(aF, aH, aD, aB, aA, aw);
                case"d":
                    var ar = Math.round(+aF);
                    if (isNaN(ar)) {
                        return""
                    }
                    var aH = ar < 0 ? "-" : az;
                    var aK = au ? ak(String(Math.abs(ar))) : String(Math.abs(ar));
                    aF = aH + an(aK, aJ, "0", false);
                    return aj(aF, aH, aD, aB, aA, aw);
                case"e":
                case"E":
                case"f":
                case"F":
                case"g":
                case"G":
                    var ar = +aF;
                    if (isNaN(ar)) {
                        return""
                    }
                    var aH = ar < 0 ? "-" : az;
                    var at = ["toExponential", "toFixed", "toPrecision"]["efg".indexOf(av.toLowerCase())];
                    var aN = ["toString", "toUpperCase"]["eEfFgG".indexOf(av) % 2];
                    var aK = Math.abs(ar)[at](aJ);
                    var aE = aK.toString().split(".");
                    aE[0] = au ? ak(aE[0]) : aE[0];
                    aK = aE.join(L.jqplot.sprintf.decimalMark);
                    aF = aH + aK;
                    var aC = aj(aF, aH, aD, aB, aA, aw)[aN]();
                    return aC;
                case"p":
                case"P":
                    var ar = +aF;
                    if (isNaN(ar)) {
                        return""
                    }
                    var aH = ar < 0 ? "-" : az;
                    var aE = String(Number(Math.abs(ar)).toExponential()).split(/e|E/);
                    var aq = (aE[0].indexOf(".") != -1) ? aE[0].length - 1 : String(ar).length;
                    var aG = (aE[1] < 0) ? -aE[1] - 1 : 0;
                    if (Math.abs(ar) < 1) {
                        if (aq + aG <= aJ) {
                            aF = aH + Math.abs(ar).toPrecision(aq)
                        } else {
                            if (aq <= aJ - 1) {
                                aF = aH + Math.abs(ar).toExponential(aq - 1)
                            } else {
                                aF = aH + Math.abs(ar).toExponential(aJ - 1)
                            }
                        }
                    } else {
                        var ap = (aq <= aJ) ? aq : aJ;
                        aF = aH + Math.abs(ar).toPrecision(ap)
                    }
                    var aN = ["toString", "toUpperCase"]["pP".indexOf(av) % 2];
                    return aj(aF, aH, aD, aB, aA, aw)[aN]();
                case"n":
                    return"";
                default:
                    return aM
            }
        })
    };
    L.jqplot.sprintf.thousandsSeparator = ",";
    L.jqplot.sprintf.decimalMark = ".";
    L.jqplot.sprintf.regex = /%%|%(\d+\$)?([-+#0&\' ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([nAscboxXuidfegpEGP])/g;
    L.jqplot.getSignificantFigures = function (al) {
        var an = String(Number(Math.abs(al)).toExponential()).split(/e|E/);
        var am = (an[0].indexOf(".") != -1) ? an[0].length - 1 : an[0].length;
        var ai = (an[1] < 0) ? -an[1] - 1 : 0;
        var ah = parseInt(an[1], 10);
        var aj = (ah + 1 > 0) ? ah + 1 : 0;
        var ak = (am <= aj) ? 0 : am - ah - 1;
        return{significantDigits: am, digitsLeft: aj, digitsRight: ak, zeros: ai, exponent: ah}
    };
    L.jqplot.getPrecision = function (ah) {
        return L.jqplot.getSignificantFigures(ah).digitsRight
    };
    var X = L.uiBackCompat !== false;
    L.jqplot.effects = {effect: {}};
    var m = "jqplot.storage.";
    L.extend(L.jqplot.effects, {version: "1.9pre", save: function (ai, aj) {
        for (var ah = 0; ah < aj.length; ah++) {
            if (aj[ah] !== null) {
                ai.data(m + aj[ah], ai[0].style[aj[ah]])
            }
        }
    }, restore: function (ai, aj) {
        for (var ah = 0; ah < aj.length; ah++) {
            if (aj[ah] !== null) {
                ai.css(aj[ah], ai.data(m + aj[ah]))
            }
        }
    }, setMode: function (ah, ai) {
        if (ai === "toggle") {
            ai = ah.is(":hidden") ? "show" : "hide"
        }
        return ai
    }, createWrapper: function (ai) {
        if (ai.parent().is(".ui-effects-wrapper")) {
            return ai.parent()
        }
        var aj = {width: ai.outerWidth(true), height: ai.outerHeight(true), "float": ai.css("float")}, al = L("<div></div>").addClass("ui-effects-wrapper").css({fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0}), ah = {width: ai.width(), height: ai.height()}, ak = document.activeElement;
        ai.wrap(al);
        if (ai[0] === ak || L.contains(ai[0], ak)) {
            L(ak).focus()
        }
        al = ai.parent();
        if (ai.css("position") === "static") {
            al.css({position: "relative"});
            ai.css({position: "relative"})
        } else {
            L.extend(aj, {position: ai.css("position"), zIndex: ai.css("z-index")});
            L.each(["top", "left", "bottom", "right"], function (am, an) {
                aj[an] = ai.css(an);
                if (isNaN(parseInt(aj[an], 10))) {
                    aj[an] = "auto"
                }
            });
            ai.css({position: "relative", top: 0, left: 0, right: "auto", bottom: "auto"})
        }
        ai.css(ah);
        return al.css(aj).show()
    }, removeWrapper: function (ah) {
        var ai = document.activeElement;
        if (ah.parent().is(".ui-effects-wrapper")) {
            ah.parent().replaceWith(ah);
            if (ah[0] === ai || L.contains(ah[0], ai)) {
                L(ai).focus()
            }
        }
        return ah
    }});
    function j(ai, ah, aj, ak) {
        if (L.isPlainObject(ai)) {
            return ai
        }
        ai = {effect: ai};
        if (ah === u) {
            ah = {}
        }
        if (L.isFunction(ah)) {
            ak = ah;
            aj = null;
            ah = {}
        }
        if (L.type(ah) === "number" || L.fx.speeds[ah]) {
            ak = aj;
            aj = ah;
            ah = {}
        }
        if (L.isFunction(aj)) {
            ak = aj;
            aj = null
        }
        if (ah) {
            L.extend(ai, ah)
        }
        aj = aj || ah.duration;
        ai.duration = L.fx.off ? 0 : typeof aj === "number" ? aj : aj in L.fx.speeds ? L.fx.speeds[aj] : L.fx.speeds._default;
        ai.complete = ak || ah.complete;
        return ai
    }

    function ae(ah) {
        if (!ah || typeof ah === "number" || L.fx.speeds[ah]) {
            return true
        }
        if (typeof ah === "string" && !L.jqplot.effects.effect[ah]) {
            if (X && L.jqplot.effects[ah]) {
                return false
            }
            return true
        }
        return false
    }

    L.fn.extend({jqplotEffect: function (ap, aq, ai, ao) {
        var an = j.apply(this, arguments), ak = an.mode, al = an.queue, am = L.jqplot.effects.effect[an.effect], ah = !am && X && L.jqplot.effects[an.effect];
        if (L.fx.off || !(am || ah)) {
            if (ak) {
                return this[ak](an.duration, an.complete)
            } else {
                return this.each(function () {
                    if (an.complete) {
                        an.complete.call(this)
                    }
                })
            }
        }
        function aj(au) {
            var av = L(this), at = an.complete, aw = an.mode;

            function ar() {
                if (L.isFunction(at)) {
                    at.call(av[0])
                }
                if (L.isFunction(au)) {
                    au()
                }
            }

            if (av.is(":hidden") ? aw === "hide" : aw === "show") {
                ar()
            } else {
                am.call(av[0], an, ar)
            }
        }

        if (am) {
            return al === false ? this.each(aj) : this.queue(al || "fx", aj)
        } else {
            return ah.call(this, {options: an, duration: an.duration, callback: an.complete, mode: an.mode})
        }
    }});
    var a = /up|down|vertical/, v = /up|left|vertical|horizontal/;
    L.jqplot.effects.effect.blind = function (aj, ao) {
        var ak = L(this), ar = ["position", "top", "bottom", "left", "right", "height", "width"], ap = L.jqplot.effects.setMode(ak, aj.mode || "hide"), au = aj.direction || "up", am = a.test(au), al = am ? "height" : "width", aq = am ? "top" : "left", aw = v.test(au), an = {}, av = ap === "show", ai, ah, at;
        if (ak.parent().is(".ui-effects-wrapper")) {
            L.jqplot.effects.save(ak.parent(), ar)
        } else {
            L.jqplot.effects.save(ak, ar)
        }
        ak.show();
        at = parseInt(ak.css("top"), 10);
        ai = L.jqplot.effects.createWrapper(ak).css({overflow: "hidden"});
        ah = am ? ai[al]() + at : ai[al]();
        an[al] = av ? String(ah) : "0";
        if (!aw) {
            ak.css(am ? "bottom" : "right", 0).css(am ? "top" : "left", "").css({position: "absolute"});
            an[aq] = av ? "0" : String(ah)
        }
        if (av) {
            ai.css(al, 0);
            if (!aw) {
                ai.css(aq, ah)
            }
        }
        ai.animate(an, {duration: aj.duration, easing: aj.easing, queue: false, complete: function () {
            if (ap === "hide") {
                ak.hide()
            }
            L.jqplot.effects.restore(ak, ar);
            L.jqplot.effects.removeWrapper(ak);
            ao()
        }})
    }
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (a) {
    a.jqplot.CanvasTextRenderer = function (b) {
        this.fontStyle = "normal";
        this.fontVariant = "normal";
        this.fontWeight = "normal";
        this.fontSize = "10px";
        this.fontFamily = "sans-serif";
        this.fontStretch = 1;
        this.fillStyle = "#666666";
        this.angle = 0;
        this.textAlign = "start";
        this.textBaseline = "alphabetic";
        this.text;
        this.width;
        this.height;
        this.pt2px = 1.28;
        a.extend(true, this, b);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight()
    };
    a.jqplot.CanvasTextRenderer.prototype.init = function (b) {
        a.extend(true, this, b);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight()
    };
    a.jqplot.CanvasTextRenderer.prototype.normalizeFontSize = function (b) {
        b = String(b);
        var c = parseFloat(b);
        if (b.indexOf("px") > -1) {
            return c / this.pt2px
        } else {
            if (b.indexOf("pt") > -1) {
                return c
            } else {
                if (b.indexOf("em") > -1) {
                    return c * 12
                } else {
                    if (b.indexOf("%") > -1) {
                        return c * 12 / 100
                    } else {
                        return c / this.pt2px
                    }
                }
            }
        }
    };
    a.jqplot.CanvasTextRenderer.prototype.fontWeight2Float = function (b) {
        if (Number(b)) {
            return b / 400
        } else {
            switch (b) {
                case"normal":
                    return 1;
                    break;
                case"bold":
                    return 1.75;
                    break;
                case"bolder":
                    return 2.25;
                    break;
                case"lighter":
                    return 0.75;
                    break;
                default:
                    return 1;
                    break
            }
        }
    };
    a.jqplot.CanvasTextRenderer.prototype.getText = function () {
        return this.text
    };
    a.jqplot.CanvasTextRenderer.prototype.setText = function (c, b) {
        this.text = c;
        this.setWidth(b);
        return this
    };
    a.jqplot.CanvasTextRenderer.prototype.getWidth = function (b) {
        return this.width
    };
    a.jqplot.CanvasTextRenderer.prototype.setWidth = function (c, b) {
        if (!b) {
            this.width = this.measure(c, this.text)
        } else {
            this.width = b
        }
        return this
    };
    a.jqplot.CanvasTextRenderer.prototype.getHeight = function (b) {
        return this.height
    };
    a.jqplot.CanvasTextRenderer.prototype.setHeight = function (b) {
        if (!b) {
            this.height = this.normalizedFontSize * this.pt2px
        } else {
            this.height = b
        }
        return this
    };
    a.jqplot.CanvasTextRenderer.prototype.letter = function (b) {
        return this.letters[b]
    };
    a.jqplot.CanvasTextRenderer.prototype.ascent = function () {
        return this.normalizedFontSize
    };
    a.jqplot.CanvasTextRenderer.prototype.descent = function () {
        return 7 * this.normalizedFontSize / 25
    };
    a.jqplot.CanvasTextRenderer.prototype.measure = function (d, g) {
        var f = 0;
        var b = g.length;
        for (var e = 0; e < b; e++) {
            var h = this.letter(g.charAt(e));
            if (h) {
                f += h.width * this.normalizedFontSize / 25 * this.fontStretch
            }
        }
        return f
    };
    a.jqplot.CanvasTextRenderer.prototype.draw = function (s, n) {
        var r = 0;
        var o = this.height * 0.72;
        var p = 0;
        var l = n.length;
        var k = this.normalizedFontSize / 25;
        s.save();
        var h, f;
        if ((-Math.PI / 2 <= this.angle && this.angle <= 0) || (Math.PI * 3 / 2 <= this.angle && this.angle <= Math.PI * 2)) {
            h = 0;
            f = -Math.sin(this.angle) * this.width
        } else {
            if ((0 < this.angle && this.angle <= Math.PI / 2) || (-Math.PI * 2 <= this.angle && this.angle <= -Math.PI * 3 / 2)) {
                h = Math.sin(this.angle) * this.height;
                f = 0
            } else {
                if ((-Math.PI < this.angle && this.angle < -Math.PI / 2) || (Math.PI <= this.angle && this.angle <= Math.PI * 3 / 2)) {
                    h = -Math.cos(this.angle) * this.width;
                    f = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height
                } else {
                    if ((-Math.PI * 3 / 2 < this.angle && this.angle < Math.PI) || (Math.PI / 2 < this.angle && this.angle < Math.PI)) {
                        h = Math.sin(this.angle) * this.height - Math.cos(this.angle) * this.width;
                        f = -Math.cos(this.angle) * this.height
                    }
                }
            }
        }
        s.strokeStyle = this.fillStyle;
        s.fillStyle = this.fillStyle;
        s.translate(h, f);
        s.rotate(this.angle);
        s.lineCap = "round";
        var t = (this.normalizedFontSize > 30) ? 2 : 2 + (30 - this.normalizedFontSize) / 20;
        s.lineWidth = t * k * this.fontWeight2Float(this.fontWeight);
        for (var g = 0; g < l; g++) {
            var m = this.letter(n.charAt(g));
            if (!m) {
                continue
            }
            s.beginPath();
            var e = 1;
            var b = 0;
            for (var d = 0; d < m.points.length; d++) {
                var q = m.points[d];
                if (q[0] == -1 && q[1] == -1) {
                    e = 1;
                    continue
                }
                if (e) {
                    s.moveTo(r + q[0] * k * this.fontStretch, o - q[1] * k);
                    e = false
                } else {
                    s.lineTo(r + q[0] * k * this.fontStretch, o - q[1] * k)
                }
            }
            s.stroke();
            r += m.width * k * this.fontStretch
        }
        s.restore();
        return p
    };
    a.jqplot.CanvasTextRenderer.prototype.letters = {" ": {width: 16, points: []}, "!": {width: 10, points: [
        [5, 21],
        [5, 7],
        [-1, -1],
        [5, 2],
        [4, 1],
        [5, 0],
        [6, 1],
        [5, 2]
    ]}, '"': {width: 16, points: [
        [4, 21],
        [4, 14],
        [-1, -1],
        [12, 21],
        [12, 14]
    ]}, "#": {width: 21, points: [
        [11, 25],
        [4, -7],
        [-1, -1],
        [17, 25],
        [10, -7],
        [-1, -1],
        [4, 12],
        [18, 12],
        [-1, -1],
        [3, 6],
        [17, 6]
    ]}, "$": {width: 20, points: [
        [8, 25],
        [8, -4],
        [-1, -1],
        [12, 25],
        [12, -4],
        [-1, -1],
        [17, 18],
        [15, 20],
        [12, 21],
        [8, 21],
        [5, 20],
        [3, 18],
        [3, 16],
        [4, 14],
        [5, 13],
        [7, 12],
        [13, 10],
        [15, 9],
        [16, 8],
        [17, 6],
        [17, 3],
        [15, 1],
        [12, 0],
        [8, 0],
        [5, 1],
        [3, 3]
    ]}, "%": {width: 24, points: [
        [21, 21],
        [3, 0],
        [-1, -1],
        [8, 21],
        [10, 19],
        [10, 17],
        [9, 15],
        [7, 14],
        [5, 14],
        [3, 16],
        [3, 18],
        [4, 20],
        [6, 21],
        [8, 21],
        [10, 20],
        [13, 19],
        [16, 19],
        [19, 20],
        [21, 21],
        [-1, -1],
        [17, 7],
        [15, 6],
        [14, 4],
        [14, 2],
        [16, 0],
        [18, 0],
        [20, 1],
        [21, 3],
        [21, 5],
        [19, 7],
        [17, 7]
    ]}, "&": {width: 26, points: [
        [23, 12],
        [23, 13],
        [22, 14],
        [21, 14],
        [20, 13],
        [19, 11],
        [17, 6],
        [15, 3],
        [13, 1],
        [11, 0],
        [7, 0],
        [5, 1],
        [4, 2],
        [3, 4],
        [3, 6],
        [4, 8],
        [5, 9],
        [12, 13],
        [13, 14],
        [14, 16],
        [14, 18],
        [13, 20],
        [11, 21],
        [9, 20],
        [8, 18],
        [8, 16],
        [9, 13],
        [11, 10],
        [16, 3],
        [18, 1],
        [20, 0],
        [22, 0],
        [23, 1],
        [23, 2]
    ]}, "'": {width: 10, points: [
        [5, 19],
        [4, 20],
        [5, 21],
        [6, 20],
        [6, 18],
        [5, 16],
        [4, 15]
    ]}, "(": {width: 14, points: [
        [11, 25],
        [9, 23],
        [7, 20],
        [5, 16],
        [4, 11],
        [4, 7],
        [5, 2],
        [7, -2],
        [9, -5],
        [11, -7]
    ]}, ")": {width: 14, points: [
        [3, 25],
        [5, 23],
        [7, 20],
        [9, 16],
        [10, 11],
        [10, 7],
        [9, 2],
        [7, -2],
        [5, -5],
        [3, -7]
    ]}, "*": {width: 16, points: [
        [8, 21],
        [8, 9],
        [-1, -1],
        [3, 18],
        [13, 12],
        [-1, -1],
        [13, 18],
        [3, 12]
    ]}, "+": {width: 26, points: [
        [13, 18],
        [13, 0],
        [-1, -1],
        [4, 9],
        [22, 9]
    ]}, ",": {width: 10, points: [
        [6, 1],
        [5, 0],
        [4, 1],
        [5, 2],
        [6, 1],
        [6, -1],
        [5, -3],
        [4, -4]
    ]}, "-": {width: 18, points: [
        [6, 9],
        [12, 9]
    ]}, ".": {width: 10, points: [
        [5, 2],
        [4, 1],
        [5, 0],
        [6, 1],
        [5, 2]
    ]}, "/": {width: 22, points: [
        [20, 25],
        [2, -7]
    ]}, "0": {width: 20, points: [
        [9, 21],
        [6, 20],
        [4, 17],
        [3, 12],
        [3, 9],
        [4, 4],
        [6, 1],
        [9, 0],
        [11, 0],
        [14, 1],
        [16, 4],
        [17, 9],
        [17, 12],
        [16, 17],
        [14, 20],
        [11, 21],
        [9, 21]
    ]}, "1": {width: 20, points: [
        [6, 17],
        [8, 18],
        [11, 21],
        [11, 0]
    ]}, "2": {width: 20, points: [
        [4, 16],
        [4, 17],
        [5, 19],
        [6, 20],
        [8, 21],
        [12, 21],
        [14, 20],
        [15, 19],
        [16, 17],
        [16, 15],
        [15, 13],
        [13, 10],
        [3, 0],
        [17, 0]
    ]}, "3": {width: 20, points: [
        [5, 21],
        [16, 21],
        [10, 13],
        [13, 13],
        [15, 12],
        [16, 11],
        [17, 8],
        [17, 6],
        [16, 3],
        [14, 1],
        [11, 0],
        [8, 0],
        [5, 1],
        [4, 2],
        [3, 4]
    ]}, "4": {width: 20, points: [
        [13, 21],
        [3, 7],
        [18, 7],
        [-1, -1],
        [13, 21],
        [13, 0]
    ]}, "5": {width: 20, points: [
        [15, 21],
        [5, 21],
        [4, 12],
        [5, 13],
        [8, 14],
        [11, 14],
        [14, 13],
        [16, 11],
        [17, 8],
        [17, 6],
        [16, 3],
        [14, 1],
        [11, 0],
        [8, 0],
        [5, 1],
        [4, 2],
        [3, 4]
    ]}, "6": {width: 20, points: [
        [16, 18],
        [15, 20],
        [12, 21],
        [10, 21],
        [7, 20],
        [5, 17],
        [4, 12],
        [4, 7],
        [5, 3],
        [7, 1],
        [10, 0],
        [11, 0],
        [14, 1],
        [16, 3],
        [17, 6],
        [17, 7],
        [16, 10],
        [14, 12],
        [11, 13],
        [10, 13],
        [7, 12],
        [5, 10],
        [4, 7]
    ]}, "7": {width: 20, points: [
        [17, 21],
        [7, 0],
        [-1, -1],
        [3, 21],
        [17, 21]
    ]}, "8": {width: 20, points: [
        [8, 21],
        [5, 20],
        [4, 18],
        [4, 16],
        [5, 14],
        [7, 13],
        [11, 12],
        [14, 11],
        [16, 9],
        [17, 7],
        [17, 4],
        [16, 2],
        [15, 1],
        [12, 0],
        [8, 0],
        [5, 1],
        [4, 2],
        [3, 4],
        [3, 7],
        [4, 9],
        [6, 11],
        [9, 12],
        [13, 13],
        [15, 14],
        [16, 16],
        [16, 18],
        [15, 20],
        [12, 21],
        [8, 21]
    ]}, "9": {width: 20, points: [
        [16, 14],
        [15, 11],
        [13, 9],
        [10, 8],
        [9, 8],
        [6, 9],
        [4, 11],
        [3, 14],
        [3, 15],
        [4, 18],
        [6, 20],
        [9, 21],
        [10, 21],
        [13, 20],
        [15, 18],
        [16, 14],
        [16, 9],
        [15, 4],
        [13, 1],
        [10, 0],
        [8, 0],
        [5, 1],
        [4, 3]
    ]}, ":": {width: 10, points: [
        [5, 14],
        [4, 13],
        [5, 12],
        [6, 13],
        [5, 14],
        [-1, -1],
        [5, 2],
        [4, 1],
        [5, 0],
        [6, 1],
        [5, 2]
    ]}, ";": {width: 10, points: [
        [5, 14],
        [4, 13],
        [5, 12],
        [6, 13],
        [5, 14],
        [-1, -1],
        [6, 1],
        [5, 0],
        [4, 1],
        [5, 2],
        [6, 1],
        [6, -1],
        [5, -3],
        [4, -4]
    ]}, "<": {width: 24, points: [
        [20, 18],
        [4, 9],
        [20, 0]
    ]}, "=": {width: 26, points: [
        [4, 12],
        [22, 12],
        [-1, -1],
        [4, 6],
        [22, 6]
    ]}, ">": {width: 24, points: [
        [4, 18],
        [20, 9],
        [4, 0]
    ]}, "?": {width: 18, points: [
        [3, 16],
        [3, 17],
        [4, 19],
        [5, 20],
        [7, 21],
        [11, 21],
        [13, 20],
        [14, 19],
        [15, 17],
        [15, 15],
        [14, 13],
        [13, 12],
        [9, 10],
        [9, 7],
        [-1, -1],
        [9, 2],
        [8, 1],
        [9, 0],
        [10, 1],
        [9, 2]
    ]}, "@": {width: 27, points: [
        [18, 13],
        [17, 15],
        [15, 16],
        [12, 16],
        [10, 15],
        [9, 14],
        [8, 11],
        [8, 8],
        [9, 6],
        [11, 5],
        [14, 5],
        [16, 6],
        [17, 8],
        [-1, -1],
        [12, 16],
        [10, 14],
        [9, 11],
        [9, 8],
        [10, 6],
        [11, 5],
        [-1, -1],
        [18, 16],
        [17, 8],
        [17, 6],
        [19, 5],
        [21, 5],
        [23, 7],
        [24, 10],
        [24, 12],
        [23, 15],
        [22, 17],
        [20, 19],
        [18, 20],
        [15, 21],
        [12, 21],
        [9, 20],
        [7, 19],
        [5, 17],
        [4, 15],
        [3, 12],
        [3, 9],
        [4, 6],
        [5, 4],
        [7, 2],
        [9, 1],
        [12, 0],
        [15, 0],
        [18, 1],
        [20, 2],
        [21, 3],
        [-1, -1],
        [19, 16],
        [18, 8],
        [18, 6],
        [19, 5]
    ]}, A: {width: 18, points: [
        [9, 21],
        [1, 0],
        [-1, -1],
        [9, 21],
        [17, 0],
        [-1, -1],
        [4, 7],
        [14, 7]
    ]}, B: {width: 21, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [13, 21],
        [16, 20],
        [17, 19],
        [18, 17],
        [18, 15],
        [17, 13],
        [16, 12],
        [13, 11],
        [-1, -1],
        [4, 11],
        [13, 11],
        [16, 10],
        [17, 9],
        [18, 7],
        [18, 4],
        [17, 2],
        [16, 1],
        [13, 0],
        [4, 0]
    ]}, C: {width: 21, points: [
        [18, 16],
        [17, 18],
        [15, 20],
        [13, 21],
        [9, 21],
        [7, 20],
        [5, 18],
        [4, 16],
        [3, 13],
        [3, 8],
        [4, 5],
        [5, 3],
        [7, 1],
        [9, 0],
        [13, 0],
        [15, 1],
        [17, 3],
        [18, 5]
    ]}, D: {width: 21, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [11, 21],
        [14, 20],
        [16, 18],
        [17, 16],
        [18, 13],
        [18, 8],
        [17, 5],
        [16, 3],
        [14, 1],
        [11, 0],
        [4, 0]
    ]}, E: {width: 19, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [17, 21],
        [-1, -1],
        [4, 11],
        [12, 11],
        [-1, -1],
        [4, 0],
        [17, 0]
    ]}, F: {width: 18, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [17, 21],
        [-1, -1],
        [4, 11],
        [12, 11]
    ]}, G: {width: 21, points: [
        [18, 16],
        [17, 18],
        [15, 20],
        [13, 21],
        [9, 21],
        [7, 20],
        [5, 18],
        [4, 16],
        [3, 13],
        [3, 8],
        [4, 5],
        [5, 3],
        [7, 1],
        [9, 0],
        [13, 0],
        [15, 1],
        [17, 3],
        [18, 5],
        [18, 8],
        [-1, -1],
        [13, 8],
        [18, 8]
    ]}, H: {width: 22, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [18, 21],
        [18, 0],
        [-1, -1],
        [4, 11],
        [18, 11]
    ]}, I: {width: 8, points: [
        [4, 21],
        [4, 0]
    ]}, J: {width: 16, points: [
        [12, 21],
        [12, 5],
        [11, 2],
        [10, 1],
        [8, 0],
        [6, 0],
        [4, 1],
        [3, 2],
        [2, 5],
        [2, 7]
    ]}, K: {width: 21, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [18, 21],
        [4, 7],
        [-1, -1],
        [9, 12],
        [18, 0]
    ]}, L: {width: 17, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 0],
        [16, 0]
    ]}, M: {width: 24, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [12, 0],
        [-1, -1],
        [20, 21],
        [12, 0],
        [-1, -1],
        [20, 21],
        [20, 0]
    ]}, N: {width: 22, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [18, 0],
        [-1, -1],
        [18, 21],
        [18, 0]
    ]}, O: {width: 22, points: [
        [9, 21],
        [7, 20],
        [5, 18],
        [4, 16],
        [3, 13],
        [3, 8],
        [4, 5],
        [5, 3],
        [7, 1],
        [9, 0],
        [13, 0],
        [15, 1],
        [17, 3],
        [18, 5],
        [19, 8],
        [19, 13],
        [18, 16],
        [17, 18],
        [15, 20],
        [13, 21],
        [9, 21]
    ]}, P: {width: 21, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [13, 21],
        [16, 20],
        [17, 19],
        [18, 17],
        [18, 14],
        [17, 12],
        [16, 11],
        [13, 10],
        [4, 10]
    ]}, Q: {width: 22, points: [
        [9, 21],
        [7, 20],
        [5, 18],
        [4, 16],
        [3, 13],
        [3, 8],
        [4, 5],
        [5, 3],
        [7, 1],
        [9, 0],
        [13, 0],
        [15, 1],
        [17, 3],
        [18, 5],
        [19, 8],
        [19, 13],
        [18, 16],
        [17, 18],
        [15, 20],
        [13, 21],
        [9, 21],
        [-1, -1],
        [12, 4],
        [18, -2]
    ]}, R: {width: 21, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 21],
        [13, 21],
        [16, 20],
        [17, 19],
        [18, 17],
        [18, 15],
        [17, 13],
        [16, 12],
        [13, 11],
        [4, 11],
        [-1, -1],
        [11, 11],
        [18, 0]
    ]}, S: {width: 20, points: [
        [17, 18],
        [15, 20],
        [12, 21],
        [8, 21],
        [5, 20],
        [3, 18],
        [3, 16],
        [4, 14],
        [5, 13],
        [7, 12],
        [13, 10],
        [15, 9],
        [16, 8],
        [17, 6],
        [17, 3],
        [15, 1],
        [12, 0],
        [8, 0],
        [5, 1],
        [3, 3]
    ]}, T: {width: 16, points: [
        [8, 21],
        [8, 0],
        [-1, -1],
        [1, 21],
        [15, 21]
    ]}, U: {width: 22, points: [
        [4, 21],
        [4, 6],
        [5, 3],
        [7, 1],
        [10, 0],
        [12, 0],
        [15, 1],
        [17, 3],
        [18, 6],
        [18, 21]
    ]}, V: {width: 18, points: [
        [1, 21],
        [9, 0],
        [-1, -1],
        [17, 21],
        [9, 0]
    ]}, W: {width: 24, points: [
        [2, 21],
        [7, 0],
        [-1, -1],
        [12, 21],
        [7, 0],
        [-1, -1],
        [12, 21],
        [17, 0],
        [-1, -1],
        [22, 21],
        [17, 0]
    ]}, X: {width: 20, points: [
        [3, 21],
        [17, 0],
        [-1, -1],
        [17, 21],
        [3, 0]
    ]}, Y: {width: 18, points: [
        [1, 21],
        [9, 11],
        [9, 0],
        [-1, -1],
        [17, 21],
        [9, 11]
    ]}, Z: {width: 20, points: [
        [17, 21],
        [3, 0],
        [-1, -1],
        [3, 21],
        [17, 21],
        [-1, -1],
        [3, 0],
        [17, 0]
    ]}, "[": {width: 14, points: [
        [4, 25],
        [4, -7],
        [-1, -1],
        [5, 25],
        [5, -7],
        [-1, -1],
        [4, 25],
        [11, 25],
        [-1, -1],
        [4, -7],
        [11, -7]
    ]}, "\\": {width: 14, points: [
        [0, 21],
        [14, -3]
    ]}, "]": {width: 14, points: [
        [9, 25],
        [9, -7],
        [-1, -1],
        [10, 25],
        [10, -7],
        [-1, -1],
        [3, 25],
        [10, 25],
        [-1, -1],
        [3, -7],
        [10, -7]
    ]}, "^": {width: 16, points: [
        [6, 15],
        [8, 18],
        [10, 15],
        [-1, -1],
        [3, 12],
        [8, 17],
        [13, 12],
        [-1, -1],
        [8, 17],
        [8, 0]
    ]}, _: {width: 16, points: [
        [0, -2],
        [16, -2]
    ]}, "`": {width: 10, points: [
        [6, 21],
        [5, 20],
        [4, 18],
        [4, 16],
        [5, 15],
        [6, 16],
        [5, 17]
    ]}, a: {width: 19, points: [
        [15, 14],
        [15, 0],
        [-1, -1],
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, b: {width: 19, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 11],
        [6, 13],
        [8, 14],
        [11, 14],
        [13, 13],
        [15, 11],
        [16, 8],
        [16, 6],
        [15, 3],
        [13, 1],
        [11, 0],
        [8, 0],
        [6, 1],
        [4, 3]
    ]}, c: {width: 18, points: [
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, d: {width: 19, points: [
        [15, 21],
        [15, 0],
        [-1, -1],
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, e: {width: 18, points: [
        [3, 8],
        [15, 8],
        [15, 10],
        [14, 12],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, f: {width: 12, points: [
        [10, 21],
        [8, 21],
        [6, 20],
        [5, 17],
        [5, 0],
        [-1, -1],
        [2, 14],
        [9, 14]
    ]}, g: {width: 19, points: [
        [15, 14],
        [15, -2],
        [14, -5],
        [13, -6],
        [11, -7],
        [8, -7],
        [6, -6],
        [-1, -1],
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, h: {width: 19, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [4, 10],
        [7, 13],
        [9, 14],
        [12, 14],
        [14, 13],
        [15, 10],
        [15, 0]
    ]}, i: {width: 8, points: [
        [3, 21],
        [4, 20],
        [5, 21],
        [4, 22],
        [3, 21],
        [-1, -1],
        [4, 14],
        [4, 0]
    ]}, j: {width: 10, points: [
        [5, 21],
        [6, 20],
        [7, 21],
        [6, 22],
        [5, 21],
        [-1, -1],
        [6, 14],
        [6, -3],
        [5, -6],
        [3, -7],
        [1, -7]
    ]}, k: {width: 17, points: [
        [4, 21],
        [4, 0],
        [-1, -1],
        [14, 14],
        [4, 4],
        [-1, -1],
        [8, 8],
        [15, 0]
    ]}, l: {width: 8, points: [
        [4, 21],
        [4, 0]
    ]}, m: {width: 30, points: [
        [4, 14],
        [4, 0],
        [-1, -1],
        [4, 10],
        [7, 13],
        [9, 14],
        [12, 14],
        [14, 13],
        [15, 10],
        [15, 0],
        [-1, -1],
        [15, 10],
        [18, 13],
        [20, 14],
        [23, 14],
        [25, 13],
        [26, 10],
        [26, 0]
    ]}, n: {width: 19, points: [
        [4, 14],
        [4, 0],
        [-1, -1],
        [4, 10],
        [7, 13],
        [9, 14],
        [12, 14],
        [14, 13],
        [15, 10],
        [15, 0]
    ]}, o: {width: 19, points: [
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3],
        [16, 6],
        [16, 8],
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14]
    ]}, p: {width: 19, points: [
        [4, 14],
        [4, -7],
        [-1, -1],
        [4, 11],
        [6, 13],
        [8, 14],
        [11, 14],
        [13, 13],
        [15, 11],
        [16, 8],
        [16, 6],
        [15, 3],
        [13, 1],
        [11, 0],
        [8, 0],
        [6, 1],
        [4, 3]
    ]}, q: {width: 19, points: [
        [15, 14],
        [15, -7],
        [-1, -1],
        [15, 11],
        [13, 13],
        [11, 14],
        [8, 14],
        [6, 13],
        [4, 11],
        [3, 8],
        [3, 6],
        [4, 3],
        [6, 1],
        [8, 0],
        [11, 0],
        [13, 1],
        [15, 3]
    ]}, r: {width: 13, points: [
        [4, 14],
        [4, 0],
        [-1, -1],
        [4, 8],
        [5, 11],
        [7, 13],
        [9, 14],
        [12, 14]
    ]}, s: {width: 17, points: [
        [14, 11],
        [13, 13],
        [10, 14],
        [7, 14],
        [4, 13],
        [3, 11],
        [4, 9],
        [6, 8],
        [11, 7],
        [13, 6],
        [14, 4],
        [14, 3],
        [13, 1],
        [10, 0],
        [7, 0],
        [4, 1],
        [3, 3]
    ]}, t: {width: 12, points: [
        [5, 21],
        [5, 4],
        [6, 1],
        [8, 0],
        [10, 0],
        [-1, -1],
        [2, 14],
        [9, 14]
    ]}, u: {width: 19, points: [
        [4, 14],
        [4, 4],
        [5, 1],
        [7, 0],
        [10, 0],
        [12, 1],
        [15, 4],
        [-1, -1],
        [15, 14],
        [15, 0]
    ]}, v: {width: 16, points: [
        [2, 14],
        [8, 0],
        [-1, -1],
        [14, 14],
        [8, 0]
    ]}, w: {width: 22, points: [
        [3, 14],
        [7, 0],
        [-1, -1],
        [11, 14],
        [7, 0],
        [-1, -1],
        [11, 14],
        [15, 0],
        [-1, -1],
        [19, 14],
        [15, 0]
    ]}, x: {width: 17, points: [
        [3, 14],
        [14, 0],
        [-1, -1],
        [14, 14],
        [3, 0]
    ]}, y: {width: 16, points: [
        [2, 14],
        [8, 0],
        [-1, -1],
        [14, 14],
        [8, 0],
        [6, -4],
        [4, -6],
        [2, -7],
        [1, -7]
    ]}, z: {width: 17, points: [
        [14, 14],
        [3, 0],
        [-1, -1],
        [3, 14],
        [14, 14],
        [-1, -1],
        [3, 0],
        [14, 0]
    ]}, "{": {width: 14, points: [
        [9, 25],
        [7, 24],
        [6, 23],
        [5, 21],
        [5, 19],
        [6, 17],
        [7, 16],
        [8, 14],
        [8, 12],
        [6, 10],
        [-1, -1],
        [7, 24],
        [6, 22],
        [6, 20],
        [7, 18],
        [8, 17],
        [9, 15],
        [9, 13],
        [8, 11],
        [4, 9],
        [8, 7],
        [9, 5],
        [9, 3],
        [8, 1],
        [7, 0],
        [6, -2],
        [6, -4],
        [7, -6],
        [-1, -1],
        [6, 8],
        [8, 6],
        [8, 4],
        [7, 2],
        [6, 1],
        [5, -1],
        [5, -3],
        [6, -5],
        [7, -6],
        [9, -7]
    ]}, "|": {width: 8, points: [
        [4, 25],
        [4, -7]
    ]}, "}": {width: 14, points: [
        [5, 25],
        [7, 24],
        [8, 23],
        [9, 21],
        [9, 19],
        [8, 17],
        [7, 16],
        [6, 14],
        [6, 12],
        [8, 10],
        [-1, -1],
        [7, 24],
        [8, 22],
        [8, 20],
        [7, 18],
        [6, 17],
        [5, 15],
        [5, 13],
        [6, 11],
        [10, 9],
        [6, 7],
        [5, 5],
        [5, 3],
        [6, 1],
        [7, 0],
        [8, -2],
        [8, -4],
        [7, -6],
        [-1, -1],
        [8, 8],
        [6, 6],
        [6, 4],
        [7, 2],
        [8, 1],
        [9, -1],
        [9, -3],
        [8, -5],
        [7, -6],
        [5, -7]
    ]}, "~": {width: 24, points: [
        [3, 6],
        [3, 8],
        [4, 11],
        [6, 12],
        [8, 12],
        [10, 11],
        [14, 8],
        [16, 7],
        [18, 7],
        [20, 8],
        [21, 10],
        [-1, -1],
        [3, 8],
        [4, 10],
        [6, 11],
        [8, 11],
        [10, 10],
        [14, 7],
        [16, 6],
        [18, 6],
        [20, 7],
        [21, 10],
        [21, 12]
    ]}};
    a.jqplot.CanvasFontRenderer = function (b) {
        b = b || {};
        if (!b.pt2px) {
            b.pt2px = 1.5
        }
        a.jqplot.CanvasTextRenderer.call(this, b)
    };
    a.jqplot.CanvasFontRenderer.prototype = new a.jqplot.CanvasTextRenderer({});
    a.jqplot.CanvasFontRenderer.prototype.constructor = a.jqplot.CanvasFontRenderer;
    a.jqplot.CanvasFontRenderer.prototype.measure = function (c, e) {
        var d = this.fontSize + " " + this.fontFamily;
        c.save();
        c.font = d;
        var b = c.measureText(e).width;
        c.restore();
        return b
    };
    a.jqplot.CanvasFontRenderer.prototype.draw = function (e, g) {
        var c = 0;
        var h = this.height * 0.72;
        e.save();
        var d, b;
        if ((-Math.PI / 2 <= this.angle && this.angle <= 0) || (Math.PI * 3 / 2 <= this.angle && this.angle <= Math.PI * 2)) {
            d = 0;
            b = -Math.sin(this.angle) * this.width
        } else {
            if ((0 < this.angle && this.angle <= Math.PI / 2) || (-Math.PI * 2 <= this.angle && this.angle <= -Math.PI * 3 / 2)) {
                d = Math.sin(this.angle) * this.height;
                b = 0
            } else {
                if ((-Math.PI < this.angle && this.angle < -Math.PI / 2) || (Math.PI <= this.angle && this.angle <= Math.PI * 3 / 2)) {
                    d = -Math.cos(this.angle) * this.width;
                    b = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height
                } else {
                    if ((-Math.PI * 3 / 2 < this.angle && this.angle < Math.PI) || (Math.PI / 2 < this.angle && this.angle < Math.PI)) {
                        d = Math.sin(this.angle) * this.height - Math.cos(this.angle) * this.width;
                        b = -Math.cos(this.angle) * this.height
                    }
                }
            }
        }
        e.strokeStyle = this.fillStyle;
        e.fillStyle = this.fillStyle;
        var f = this.fontSize + " " + this.fontFamily;
        e.font = f;
        e.translate(d, b);
        e.rotate(this.angle);
        e.fillText(g, c, h);
        e.restore()
    }
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (a) {
    a.jqplot.CanvasAxisLabelRenderer = function (b) {
        this.angle = 0;
        this.axis;
        this.show = true;
        this.showLabel = true;
        this.label = "";
        this.fontFamily = '"Trebuchet MS", Arial, Helvetica, sans-serif';
        this.fontSize = "11pt";
        this.fontWeight = "normal";
        this.fontStretch = 1;
        this.textColor = "#666666";
        this.enableFontSupport = true;
        this.pt2px = null;
        this._elem;
        this._ctx;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height: null, width: null};
        a.extend(true, this, b);
        if (b.angle == null && this.axis != "xaxis" && this.axis != "x2axis") {
            this.angle = -90
        }
        var c = {fontSize: this.fontSize, fontWeight: this.fontWeight, fontStretch: this.fontStretch, fillStyle: this.textColor, angle: this.getAngleRad(), fontFamily: this.fontFamily};
        if (this.pt2px) {
            c.pt2px = this.pt2px
        }
        if (this.enableFontSupport) {
            if (a.jqplot.support_canvas_text()) {
                this._textRenderer = new a.jqplot.CanvasFontRenderer(c)
            } else {
                this._textRenderer = new a.jqplot.CanvasTextRenderer(c)
            }
        } else {
            this._textRenderer = new a.jqplot.CanvasTextRenderer(c)
        }
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.init = function (b) {
        a.extend(true, this, b);
        this._textRenderer.init({fontSize: this.fontSize, fontWeight: this.fontWeight, fontStretch: this.fontStretch, fillStyle: this.textColor, angle: this.getAngleRad(), fontFamily: this.fontFamily})
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.getWidth = function (d) {
        if (this._elem) {
            return this._elem.outerWidth(true)
        } else {
            var f = this._textRenderer;
            var c = f.getWidth(d);
            var e = f.getHeight(d);
            var b = Math.abs(Math.sin(f.angle) * e) + Math.abs(Math.cos(f.angle) * c);
            return b
        }
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.getHeight = function (d) {
        if (this._elem) {
            return this._elem.outerHeight(true)
        } else {
            var f = this._textRenderer;
            var c = f.getWidth(d);
            var e = f.getHeight(d);
            var b = Math.abs(Math.cos(f.angle) * e) + Math.abs(Math.sin(f.angle) * c);
            return b
        }
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.getAngleRad = function () {
        var b = this.angle * Math.PI / 180;
        return b
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.draw = function (c, f) {
        if (this._elem) {
            if (a.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0))
            }
            this._elem.emptyForce();
            this._elem = null
        }
        var e = f.canvasManager.getCanvas();
        this._textRenderer.setText(this.label, c);
        var b = this.getWidth(c);
        var d = this.getHeight(c);
        e.width = b;
        e.height = d;
        e.style.width = b;
        e.style.height = d;
        e = f.canvasManager.initCanvas(e);
        this._elem = a(e);
        this._elem.css({position: "absolute"});
        this._elem.addClass("jqplot-" + this.axis + "-label");
        e = null;
        return this._elem
    };
    a.jqplot.CanvasAxisLabelRenderer.prototype.pack = function () {
        this._textRenderer.draw(this._elem.get(0).getContext("2d"), this.label)
    }
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (h) {
    h.jqplot.DateAxisRenderer = function () {
        h.jqplot.LinearAxisRenderer.call(this);
        this.date = new h.jsDate()
    };
    var c = 1000;
    var e = 60 * c;
    var f = 60 * e;
    var l = 24 * f;
    var b = 7 * l;
    var j = 30.4368499 * l;
    var k = 365.242199 * l;
    var g = [31, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30];
    var i = ["%M:%S.%#N", "%M:%S.%#N", "%M:%S.%#N", "%M:%S", "%M:%S", "%M:%S", "%M:%S", "%H:%M:%S", "%H:%M:%S", "%H:%M", "%H:%M", "%H:%M", "%H:%M", "%H:%M", "%H:%M", "%a %H:%M", "%a %H:%M", "%b %e %H:%M", "%b %e %H:%M", "%b %e %H:%M", "%b %e %H:%M", "%v", "%v", "%v", "%v", "%v", "%v", "%v"];
    var m = [0.1 * c, 0.2 * c, 0.5 * c, c, 2 * c, 5 * c, 10 * c, 15 * c, 30 * c, e, 2 * e, 5 * e, 10 * e, 15 * e, 30 * e, f, 2 * f, 4 * f, 6 * f, 8 * f, 12 * f, l, 2 * l, 3 * l, 4 * l, 5 * l, b, 2 * b];
    var d = [];

    function a(p, s, t) {
        var o = Number.MAX_VALUE;
        var u, r, v;
        for (var q = 0, n = m.length; q < n; q++) {
            u = Math.abs(t - m[q]);
            if (u < o) {
                o = u;
                r = m[q];
                v = i[q]
            }
        }
        return[r, v]
    }

    h.jqplot.DateAxisRenderer.prototype = new h.jqplot.LinearAxisRenderer();
    h.jqplot.DateAxisRenderer.prototype.constructor = h.jqplot.DateAxisRenderer;
    h.jqplot.DateTickFormatter = function (n, o) {
        if (!n) {
            n = "%Y/%m/%d"
        }
        return h.jsDate.strftime(o, n)
    };
    h.jqplot.DateAxisRenderer.prototype.init = function (E) {
        this.tickOptions.formatter = h.jqplot.DateTickFormatter;
        this.tickInset = 0;
        this.drawBaseline = true;
        this.baselineWidth = null;
        this.baselineColor = null;
        this.daTickInterval = null;
        this._daTickInterval = null;
        h.extend(true, this, E);
        var C = this._dataBounds, u, x, D, y, A, z, o;
        for (var t = 0; t < this._series.length; t++) {
            u = {intervals: [], frequencies: {}, sortedIntervals: [], min: null, max: null, mean: null};
            x = 0;
            D = this._series[t];
            y = D.data;
            A = D._plotData;
            z = D._stackData;
            o = 0;
            for (var r = 0; r < y.length; r++) {
                if (this.name == "xaxis" || this.name == "x2axis") {
                    y[r][0] = new h.jsDate(y[r][0]).getTime();
                    A[r][0] = new h.jsDate(y[r][0]).getTime();
                    z[r][0] = new h.jsDate(y[r][0]).getTime();
                    if ((y[r][0] != null && y[r][0] < C.min) || C.min == null) {
                        C.min = y[r][0]
                    }
                    if ((y[r][0] != null && y[r][0] > C.max) || C.max == null) {
                        C.max = y[r][0]
                    }
                    if (r > 0) {
                        o = Math.abs(y[r][0] - y[r - 1][0]);
                        u.intervals.push(o);
                        if (u.frequencies.hasOwnProperty(o)) {
                            u.frequencies[o] += 1
                        } else {
                            u.frequencies[o] = 1
                        }
                    }
                    x += o
                } else {
                    y[r][1] = new h.jsDate(y[r][1]).getTime();
                    A[r][1] = new h.jsDate(y[r][1]).getTime();
                    z[r][1] = new h.jsDate(y[r][1]).getTime();
                    if ((y[r][1] != null && y[r][1] < C.min) || C.min == null) {
                        C.min = y[r][1]
                    }
                    if ((y[r][1] != null && y[r][1] > C.max) || C.max == null) {
                        C.max = y[r][1]
                    }
                    if (r > 0) {
                        o = Math.abs(y[r][1] - y[r - 1][1]);
                        u.intervals.push(o);
                        if (u.frequencies.hasOwnProperty(o)) {
                            u.frequencies[o] += 1
                        } else {
                            u.frequencies[o] = 1
                        }
                    }
                }
                x += o
            }
            if (D.renderer.bands) {
                if (D.renderer.bands.hiData.length) {
                    var w = D.renderer.bands.hiData;
                    for (var r = 0, q = w.length; r < q; r++) {
                        if (this.name === "xaxis" || this.name === "x2axis") {
                            w[r][0] = new h.jsDate(w[r][0]).getTime();
                            if ((w[r][0] != null && w[r][0] > C.max) || C.max == null) {
                                C.max = w[r][0]
                            }
                        } else {
                            w[r][1] = new h.jsDate(w[r][1]).getTime();
                            if ((w[r][1] != null && w[r][1] > C.max) || C.max == null) {
                                C.max = w[r][1]
                            }
                        }
                    }
                }
                if (D.renderer.bands.lowData.length) {
                    var w = D.renderer.bands.lowData;
                    for (var r = 0, q = w.length; r < q; r++) {
                        if (this.name === "xaxis" || this.name === "x2axis") {
                            w[r][0] = new h.jsDate(w[r][0]).getTime();
                            if ((w[r][0] != null && w[r][0] < C.min) || C.min == null) {
                                C.min = w[r][0]
                            }
                        } else {
                            w[r][1] = new h.jsDate(w[r][1]).getTime();
                            if ((w[r][1] != null && w[r][1] < C.min) || C.min == null) {
                                C.min = w[r][1]
                            }
                        }
                    }
                }
            }
            var B = 0, v = 0;
            for (var p in u.frequencies) {
                u.sortedIntervals.push({interval: p, frequency: u.frequencies[p]})
            }
            u.sortedIntervals.sort(function (s, n) {
                return n.frequency - s.frequency
            });
            u.min = h.jqplot.arrayMin(u.intervals);
            u.max = h.jqplot.arrayMax(u.intervals);
            u.mean = x / y.length;
            this._intervalStats.push(u);
            u = x = D = y = A = z = null
        }
        C = null
    };
    h.jqplot.DateAxisRenderer.prototype.reset = function () {
        this.min = this._options.min;
        this.max = this._options.max;
        this.tickInterval = this._options.tickInterval;
        this.numberTicks = this._options.numberTicks;
        this._autoFormatString = "";
        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {
            this.tickOptions.formatString = ""
        }
        this.daTickInterval = this._daTickInterval
    };
    h.jqplot.DateAxisRenderer.prototype.createTicks = function (p) {
        var X = this._ticks;
        var L = this.ticks;
        var F = this.name;
        var H = this._dataBounds;
        var M = this._intervalStats;
        var n = (this.name.charAt(0) === "x") ? this._plotDimensions.width : this._plotDimensions.height;
        var w;
        var ae, J;
        var y, x;
        var ad, aa;
        var s = 30;
        var O = 1;
        var U = null;
        if (this.tickInterval != null) {
            if (Number(this.tickInterval)) {
                U = [Number(this.tickInterval), "seconds"]
            } else {
                if (typeof this.tickInterval == "string") {
                    var ac = this.tickInterval.split(" ");
                    if (ac.length == 1) {
                        U = [1, ac[0]]
                    } else {
                        if (ac.length == 2) {
                            U = [ac[0], ac[1]]
                        }
                    }
                }
            }
        }
        var v = this.tickInterval;
        ae = new h.jsDate((this.min != null) ? this.min : H.min).getTime();
        J = new h.jsDate((this.max != null) ? this.max : H.max).getTime();
        var A = p.plugins.cursor;
        if (A && A._zoom && A._zoom.zooming) {
            this.min = null;
            this.max = null
        }
        var B = J - ae;
        if (this.tickOptions == null || !this.tickOptions.formatString) {
            this._overrideFormatString = true
        }
        if (L.length) {
            for (aa = 0; aa < L.length; aa++) {
                var P = L[aa];
                var Y = new this.tickRenderer(this.tickOptions);
                if (P.constructor == Array) {
                    Y.value = new h.jsDate(P[0]).getTime();
                    Y.label = P[1];
                    if (!this.showTicks) {
                        Y.showLabel = false;
                        Y.showMark = false
                    } else {
                        if (!this.showTickMarks) {
                            Y.showMark = false
                        }
                    }
                    Y.setTick(Y.value, this.name);
                    this._ticks.push(Y)
                } else {
                    Y.value = new h.jsDate(P).getTime();
                    if (!this.showTicks) {
                        Y.showLabel = false;
                        Y.showMark = false
                    } else {
                        if (!this.showTickMarks) {
                            Y.showMark = false
                        }
                    }
                    Y.setTick(Y.value, this.name);
                    this._ticks.push(Y)
                }
            }
            this.numberTicks = L.length;
            this.min = this._ticks[0].value;
            this.max = this._ticks[this.numberTicks - 1].value;
            this.daTickInterval = [(this.max - this.min) / (this.numberTicks - 1) / 1000, "seconds"]
        } else {
            if (this.min == null && this.max == null && H.min == H.max) {
                var E = h.extend(true, {}, this.tickOptions, {name: this.name, value: null});
                var T = 300000;
                this.min = H.min - T;
                this.max = H.max + T;
                this.numberTicks = 3;
                for (var aa = this.min; aa <= this.max; aa += T) {
                    E.value = aa;
                    var Y = new this.tickRenderer(E);
                    if (this._overrideFormatString && this._autoFormatString != "") {
                        Y.formatString = this._autoFormatString
                    }
                    Y.showLabel = false;
                    Y.showMark = false;
                    this._ticks.push(Y)
                }
                if (this.showTicks) {
                    this._ticks[1].showLabel = true
                }
                if (this.showTickMarks) {
                    this._ticks[1].showTickMarks = true
                }
            } else {
                if (this.min == null && this.max == null) {
                    var N = h.extend(true, {}, this.tickOptions, {name: this.name, value: null});
                    var ab, I;
                    if (!this.tickInterval && !this.numberTicks) {
                        var R = Math.max(n, s + 1);
                        var Z = 115;
                        if (this.tickRenderer === h.jqplot.CanvasAxisTickRenderer && this.tickOptions.angle) {
                            Z = 115 - 40 * Math.abs(Math.sin(this.tickOptions.angle / 180 * Math.PI))
                        }
                        ab = Math.ceil((R - s) / Z + 1);
                        I = (J - ae) / (ab - 1)
                    } else {
                        if (this.tickInterval) {
                            I = new h.jsDate(0).add(U[0], U[1]).getTime()
                        } else {
                            if (this.numberTicks) {
                                ab = this.numberTicks;
                                I = (J - ae) / (ab - 1)
                            }
                        }
                    }
                    if (I <= 19 * l) {
                        var Q = a(ae, J, I);
                        var r = Q[0];
                        this._autoFormatString = Q[1];
                        ae = new h.jsDate(ae);
                        ae = Math.floor((ae.getTime() - ae.getUtcOffset()) / r) * r + ae.getUtcOffset();
                        ab = Math.ceil((J - ae) / r) + 1;
                        this.min = ae;
                        this.max = ae + (ab - 1) * r;
                        if (this.max < J) {
                            this.max += r;
                            ab += 1
                        }
                        this.tickInterval = r;
                        this.numberTicks = ab;
                        for (var aa = 0; aa < ab; aa++) {
                            N.value = this.min + aa * r;
                            Y = new this.tickRenderer(N);
                            if (this._overrideFormatString && this._autoFormatString != "") {
                                Y.formatString = this._autoFormatString
                            }
                            if (!this.showTicks) {
                                Y.showLabel = false;
                                Y.showMark = false
                            } else {
                                if (!this.showTickMarks) {
                                    Y.showMark = false
                                }
                            }
                            this._ticks.push(Y)
                        }
                        O = this.tickInterval
                    } else {
                        if (I <= 9 * j) {
                            this._autoFormatString = "%v";
                            var D = Math.round(I / j);
                            if (D < 1) {
                                D = 1
                            } else {
                                if (D > 6) {
                                    D = 6
                                }
                            }
                            var V = new h.jsDate(ae).setDate(1).setHours(0, 0, 0, 0);
                            var q = new h.jsDate(J);
                            var z = new h.jsDate(J).setDate(1).setHours(0, 0, 0, 0);
                            if (q.getTime() !== z.getTime()) {
                                z = z.add(1, "month")
                            }
                            var S = z.diff(V, "month");
                            ab = Math.ceil(S / D) + 1;
                            this.min = V.getTime();
                            this.max = V.clone().add((ab - 1) * D, "month").getTime();
                            this.numberTicks = ab;
                            for (var aa = 0; aa < ab; aa++) {
                                if (aa === 0) {
                                    N.value = V.getTime()
                                } else {
                                    N.value = V.add(D, "month").getTime()
                                }
                                Y = new this.tickRenderer(N);
                                if (this._overrideFormatString && this._autoFormatString != "") {
                                    Y.formatString = this._autoFormatString
                                }
                                if (!this.showTicks) {
                                    Y.showLabel = false;
                                    Y.showMark = false
                                } else {
                                    if (!this.showTickMarks) {
                                        Y.showMark = false
                                    }
                                }
                                this._ticks.push(Y)
                            }
                            O = D * j
                        } else {
                            this._autoFormatString = "%v";
                            var D = Math.round(I / k);
                            if (D < 1) {
                                D = 1
                            }
                            var V = new h.jsDate(ae).setMonth(0, 1).setHours(0, 0, 0, 0);
                            var z = new h.jsDate(J).add(1, "year").setMonth(0, 1).setHours(0, 0, 0, 0);
                            var K = z.diff(V, "year");
                            ab = Math.ceil(K / D) + 1;
                            this.min = V.getTime();
                            this.max = V.clone().add((ab - 1) * D, "year").getTime();
                            this.numberTicks = ab;
                            for (var aa = 0; aa < ab; aa++) {
                                if (aa === 0) {
                                    N.value = V.getTime()
                                } else {
                                    N.value = V.add(D, "year").getTime()
                                }
                                Y = new this.tickRenderer(N);
                                if (this._overrideFormatString && this._autoFormatString != "") {
                                    Y.formatString = this._autoFormatString
                                }
                                if (!this.showTicks) {
                                    Y.showLabel = false;
                                    Y.showMark = false
                                } else {
                                    if (!this.showTickMarks) {
                                        Y.showMark = false
                                    }
                                }
                                this._ticks.push(Y)
                            }
                            O = D * k
                        }
                    }
                } else {
                    if (F == "xaxis" || F == "x2axis") {
                        n = this._plotDimensions.width
                    } else {
                        n = this._plotDimensions.height
                    }
                    if (this.min != null && this.max != null && this.numberTicks != null) {
                        this.tickInterval = null
                    }
                    if (this.tickInterval != null && U != null) {
                        this.daTickInterval = U
                    }
                    if (ae == J) {
                        var o = 24 * 60 * 60 * 500;
                        ae -= o;
                        J += o
                    }
                    B = J - ae;
                    var G = 2 + parseInt(Math.max(0, n - 100) / 100, 10);
                    var W, C;
                    W = (this.min != null) ? new h.jsDate(this.min).getTime() : ae - B / 2 * (this.padMin - 1);
                    C = (this.max != null) ? new h.jsDate(this.max).getTime() : J + B / 2 * (this.padMax - 1);
                    this.min = W;
                    this.max = C;
                    B = this.max - this.min;
                    if (this.numberTicks == null) {
                        if (this.daTickInterval != null) {
                            var u = new h.jsDate(this.max).diff(this.min, this.daTickInterval[1], true);
                            this.numberTicks = Math.ceil(u / this.daTickInterval[0]) + 1;
                            this.max = new h.jsDate(this.min).add((this.numberTicks - 1) * this.daTickInterval[0], this.daTickInterval[1]).getTime()
                        } else {
                            if (n > 200) {
                                this.numberTicks = parseInt(3 + (n - 200) / 100, 10)
                            } else {
                                this.numberTicks = 2
                            }
                        }
                    }
                    O = B / (this.numberTicks - 1) / 1000;
                    if (this.daTickInterval == null) {
                        this.daTickInterval = [O, "seconds"]
                    }
                    for (var aa = 0; aa < this.numberTicks; aa++) {
                        var ae = new h.jsDate(this.min);
                        ad = ae.add(aa * this.daTickInterval[0], this.daTickInterval[1]).getTime();
                        var Y = new this.tickRenderer(this.tickOptions);
                        if (!this.showTicks) {
                            Y.showLabel = false;
                            Y.showMark = false
                        } else {
                            if (!this.showTickMarks) {
                                Y.showMark = false
                            }
                        }
                        Y.setTick(ad, this.name);
                        this._ticks.push(Y)
                    }
                }
            }
        }
        if (this.tickInset) {
            this.min = this.min - this.tickInset * O;
            this.max = this.max + this.tickInset * O
        }
        if (this._daTickInterval == null) {
            this._daTickInterval = this.daTickInterval
        }
        X = null
    }
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (a) {
    a.jqplot.CategoryAxisRenderer = function (b) {
        a.jqplot.LinearAxisRenderer.call(this);
        this.sortMergedLabels = false
    };
    a.jqplot.CategoryAxisRenderer.prototype = new a.jqplot.LinearAxisRenderer();
    a.jqplot.CategoryAxisRenderer.prototype.constructor = a.jqplot.CategoryAxisRenderer;
    a.jqplot.CategoryAxisRenderer.prototype.init = function (e) {
        this.groups = 1;
        this.groupLabels = [];
        this._groupLabels = [];
        this._grouped = false;
        this._barsPerGroup = null;
        this.reverse = false;
        a.extend(true, this, {tickOptions: {formatString: "%d"}}, e);
        var b = this._dataBounds;
        for (var f = 0; f < this._series.length; f++) {
            var g = this._series[f];
            if (g.groups) {
                this.groups = g.groups
            }
            var h = g.data;
            for (var c = 0; c < h.length; c++) {
                if (this.name == "xaxis" || this.name == "x2axis") {
                    if (h[c][0] < b.min || b.min == null) {
                        b.min = h[c][0]
                    }
                    if (h[c][0] > b.max || b.max == null) {
                        b.max = h[c][0]
                    }
                } else {
                    if (h[c][1] < b.min || b.min == null) {
                        b.min = h[c][1]
                    }
                    if (h[c][1] > b.max || b.max == null) {
                        b.max = h[c][1]
                    }
                }
            }
        }
        if (this.groupLabels.length) {
            this.groups = this.groupLabels.length
        }
    };
    a.jqplot.CategoryAxisRenderer.prototype.createTicks = function () {
        var D = this._ticks;
        var z = this.ticks;
        var F = this.name;
        var C = this._dataBounds;
        var v, A;
        var q, w;
        var d, c;
        var b, x;
        if (z.length) {
            if (this.groups > 1 && !this._grouped) {
                var r = z.length;
                var p = parseInt(r / this.groups, 10);
                var e = 0;
                for (var x = p; x < r; x += p) {
                    z.splice(x + e, 0, " ");
                    e++
                }
                this._grouped = true
            }
            this.min = 0.5;
            this.max = z.length + 0.5;
            var m = this.max - this.min;
            this.numberTicks = 2 * z.length + 1;
            for (x = 0; x < z.length; x++) {
                b = this.min + 2 * x * m / (this.numberTicks - 1);
                var h = new this.tickRenderer(this.tickOptions);
                h.showLabel = false;
                h.setTick(b, this.name);
                this._ticks.push(h);
                var h = new this.tickRenderer(this.tickOptions);
                h.label = z[x];
                h.showMark = false;
                h.showGridline = false;
                h.setTick(b + 0.5, this.name);
                this._ticks.push(h)
            }
            var h = new this.tickRenderer(this.tickOptions);
            h.showLabel = false;
            h.setTick(b + 1, this.name);
            this._ticks.push(h)
        } else {
            if (F == "xaxis" || F == "x2axis") {
                v = this._plotDimensions.width
            } else {
                v = this._plotDimensions.height
            }
            if (this.min != null && this.max != null && this.numberTicks != null) {
                this.tickInterval = null
            }
            if (this.min != null && this.max != null && this.tickInterval != null) {
                if (parseInt((this.max - this.min) / this.tickInterval, 10) != (this.max - this.min) / this.tickInterval) {
                    this.tickInterval = null
                }
            }
            var y = [];
            var B = 0;
            var q = 0.5;
            var w, E;
            var f = false;
            for (var x = 0; x < this._series.length; x++) {
                var k = this._series[x];
                for (var u = 0; u < k.data.length; u++) {
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        E = k.data[u][0]
                    } else {
                        E = k.data[u][1]
                    }
                    if (a.inArray(E, y) == -1) {
                        f = true;
                        B += 1;
                        y.push(E)
                    }
                }
            }
            if (f && this.sortMergedLabels) {
                if (typeof y[0] == "string") {
                    y.sort()
                } else {
                    y.sort(function (j, i) {
                        return j - i
                    })
                }
            }
            this.ticks = y;
            for (var x = 0; x < this._series.length; x++) {
                var k = this._series[x];
                for (var u = 0; u < k.data.length; u++) {
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        E = k.data[u][0]
                    } else {
                        E = k.data[u][1]
                    }
                    var n = a.inArray(E, y) + 1;
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        k.data[u][0] = n
                    } else {
                        k.data[u][1] = n
                    }
                }
            }
            if (this.groups > 1 && !this._grouped) {
                var r = y.length;
                var p = parseInt(r / this.groups, 10);
                var e = 0;
                for (var x = p; x < r; x += p + 1) {
                    y[x] = " "
                }
                this._grouped = true
            }
            w = B + 0.5;
            if (this.numberTicks == null) {
                this.numberTicks = 2 * B + 1
            }
            var m = w - q;
            this.min = q;
            this.max = w;
            var o = 0;
            var g = parseInt(3 + v / 10, 10);
            var p = parseInt(B / g, 10);
            if (this.tickInterval == null) {
                this.tickInterval = m / (this.numberTicks - 1)
            }
            for (var x = 0; x < this.numberTicks; x++) {
                b = this.min + x * this.tickInterval;
                var h = new this.tickRenderer(this.tickOptions);
                if (x / 2 == parseInt(x / 2, 10)) {
                    h.showLabel = false;
                    h.showMark = true
                } else {
                    if (p > 0 && o < p) {
                        h.showLabel = false;
                        o += 1
                    } else {
                        h.showLabel = true;
                        o = 0
                    }
                    h.label = h.formatter(h.formatString, y[(x - 1) / 2]);
                    h.showMark = false;
                    h.showGridline = false
                }
                h.setTick(b, this.name);
                this._ticks.push(h)
            }
        }
    };
    a.jqplot.CategoryAxisRenderer.prototype.draw = function (b, j) {
        if (this.show) {
            this.renderer.createTicks.call(this);
            var h = 0;
            var c;
            if (this._elem) {
                this._elem.emptyForce()
            }
            this._elem = this._elem || a('<div class="jqplot-axis jqplot-' + this.name + '" style="position:absolute;"></div>');
            if (this.name == "xaxis" || this.name == "x2axis") {
                this._elem.width(this._plotDimensions.width)
            } else {
                this._elem.height(this._plotDimensions.height)
            }
            this.labelOptions.axis = this.name;
            this._label = new this.labelRenderer(this.labelOptions);
            if (this._label.show) {
                var g = this._label.draw(b, j);
                g.appendTo(this._elem)
            }
            var f = this._ticks;
            for (var e = 0; e < f.length; e++) {
                var d = f[e];
                if (d.showLabel && (!d.isMinorTick || this.showMinorTicks)) {
                    var g = d.draw(b, j);
                    g.appendTo(this._elem)
                }
            }
            this._groupLabels = [];
            for (var e = 0; e < this.groupLabels.length; e++) {
                var g = a('<div style="position:absolute;" class="jqplot-' + this.name + '-groupLabel"></div>');
                g.html(this.groupLabels[e]);
                this._groupLabels.push(g);
                g.appendTo(this._elem)
            }
        }
        return this._elem
    };
    a.jqplot.CategoryAxisRenderer.prototype.set = function () {
        var e = 0;
        var m;
        var k = 0;
        var f = 0;
        var d = (this._label == null) ? false : this._label.show;
        if (this.show) {
            var n = this._ticks;
            for (var c = 0; c < n.length; c++) {
                var g = n[c];
                if (g.showLabel && (!g.isMinorTick || this.showMinorTicks)) {
                    if (this.name == "xaxis" || this.name == "x2axis") {
                        m = g._elem.outerHeight(true)
                    } else {
                        m = g._elem.outerWidth(true)
                    }
                    if (m > e) {
                        e = m
                    }
                }
            }
            var j = 0;
            for (var c = 0; c < this._groupLabels.length; c++) {
                var b = this._groupLabels[c];
                if (this.name == "xaxis" || this.name == "x2axis") {
                    m = b.outerHeight(true)
                } else {
                    m = b.outerWidth(true)
                }
                if (m > j) {
                    j = m
                }
            }
            if (d) {
                k = this._label._elem.outerWidth(true);
                f = this._label._elem.outerHeight(true)
            }
            if (this.name == "xaxis") {
                e += j + f;
                this._elem.css({height: e + "px", left: "0px", bottom: "0px"})
            } else {
                if (this.name == "x2axis") {
                    e += j + f;
                    this._elem.css({height: e + "px", left: "0px", top: "0px"})
                } else {
                    if (this.name == "yaxis") {
                        e += j + k;
                        this._elem.css({width: e + "px", left: "0px", top: "0px"});
                        if (d && this._label.constructor == a.jqplot.AxisLabelRenderer) {
                            this._label._elem.css("width", k + "px")
                        }
                    } else {
                        e += j + k;
                        this._elem.css({width: e + "px", right: "0px", top: "0px"});
                        if (d && this._label.constructor == a.jqplot.AxisLabelRenderer) {
                            this._label._elem.css("width", k + "px")
                        }
                    }
                }
            }
        }
    };
    a.jqplot.CategoryAxisRenderer.prototype.pack = function (e, c) {
        var C = this._ticks;
        var v = this.max;
        var s = this.min;
        var n = c.max;
        var l = c.min;
        var q = (this._label == null) ? false : this._label.show;
        var x;
        for (var r in e) {
            this._elem.css(r, e[r])
        }
        this._offsets = c;
        var g = n - l;
        var k = v - s;
        if (!this.reverse) {
            this.u2p = function (h) {
                return(h - s) * g / k + l
            };
            this.p2u = function (h) {
                return(h - l) * k / g + s
            };
            if (this.name == "xaxis" || this.name == "x2axis") {
                this.series_u2p = function (h) {
                    return(h - s) * g / k
                };
                this.series_p2u = function (h) {
                    return h * k / g + s
                }
            } else {
                this.series_u2p = function (h) {
                    return(h - v) * g / k
                };
                this.series_p2u = function (h) {
                    return h * k / g + v
                }
            }
        } else {
            this.u2p = function (h) {
                return l + (v - h) * g / k
            };
            this.p2u = function (h) {
                return s + (h - l) * k / g
            };
            if (this.name == "xaxis" || this.name == "x2axis") {
                this.series_u2p = function (h) {
                    return(v - h) * g / k
                };
                this.series_p2u = function (h) {
                    return h * k / g + v
                }
            } else {
                this.series_u2p = function (h) {
                    return(s - h) * g / k
                };
                this.series_p2u = function (h) {
                    return h * k / g + s
                }
            }
        }
        if (this.show) {
            if (this.name == "xaxis" || this.name == "x2axis") {
                for (x = 0; x < C.length; x++) {
                    var o = C[x];
                    if (o.show && o.showLabel) {
                        var b;
                        if (o.constructor == a.jqplot.CanvasAxisTickRenderer && o.angle) {
                            var A = (this.name == "xaxis") ? 1 : -1;
                            switch (o.labelPosition) {
                                case"auto":
                                    if (A * o.angle < 0) {
                                        b = -o.getWidth() + o._textRenderer.height * Math.sin(-o._textRenderer.angle) / 2
                                    } else {
                                        b = -o._textRenderer.height * Math.sin(o._textRenderer.angle) / 2
                                    }
                                    break;
                                case"end":
                                    b = -o.getWidth() + o._textRenderer.height * Math.sin(-o._textRenderer.angle) / 2;
                                    break;
                                case"start":
                                    b = -o._textRenderer.height * Math.sin(o._textRenderer.angle) / 2;
                                    break;
                                case"middle":
                                    b = -o.getWidth() / 2 + o._textRenderer.height * Math.sin(-o._textRenderer.angle) / 2;
                                    break;
                                default:
                                    b = -o.getWidth() / 2 + o._textRenderer.height * Math.sin(-o._textRenderer.angle) / 2;
                                    break
                            }
                        } else {
                            b = -o.getWidth() / 2
                        }
                        var D = this.u2p(o.value) + b + "px";
                        o._elem.css("left", D);
                        o.pack()
                    }
                }
                var z = ["bottom", 0];
                if (q) {
                    var m = this._label._elem.outerWidth(true);
                    this._label._elem.css("left", l + g / 2 - m / 2 + "px");
                    if (this.name == "xaxis") {
                        this._label._elem.css("bottom", "0px");
                        z = ["bottom", this._label._elem.outerHeight(true)]
                    } else {
                        this._label._elem.css("top", "0px");
                        z = ["top", this._label._elem.outerHeight(true)]
                    }
                    this._label.pack()
                }
                var d = parseInt(this._ticks.length / this.groups, 10) + 1;
                for (x = 0; x < this._groupLabels.length; x++) {
                    var B = 0;
                    var f = 0;
                    for (var u = x * d; u < (x + 1) * d; u++) {
                        if (u >= this._ticks.length - 1) {
                            continue
                        }
                        if (this._ticks[u]._elem && this._ticks[u].label != " ") {
                            var o = this._ticks[u]._elem;
                            var r = o.position();
                            B += r.left + o.outerWidth(true) / 2;
                            f++
                        }
                    }
                    B = B / f;
                    this._groupLabels[x].css({left: (B - this._groupLabels[x].outerWidth(true) / 2)});
                    this._groupLabels[x].css(z[0], z[1])
                }
            } else {
                for (x = 0; x < C.length; x++) {
                    var o = C[x];
                    if (o.show && o.showLabel) {
                        var b;
                        if (o.constructor == a.jqplot.CanvasAxisTickRenderer && o.angle) {
                            var A = (this.name == "yaxis") ? 1 : -1;
                            switch (o.labelPosition) {
                                case"auto":
                                case"end":
                                    if (A * o.angle < 0) {
                                        b = -o._textRenderer.height * Math.cos(-o._textRenderer.angle) / 2
                                    } else {
                                        b = -o.getHeight() + o._textRenderer.height * Math.cos(o._textRenderer.angle) / 2
                                    }
                                    break;
                                case"start":
                                    if (o.angle > 0) {
                                        b = -o._textRenderer.height * Math.cos(-o._textRenderer.angle) / 2
                                    } else {
                                        b = -o.getHeight() + o._textRenderer.height * Math.cos(o._textRenderer.angle) / 2
                                    }
                                    break;
                                case"middle":
                                    b = -o.getHeight() / 2;
                                    break;
                                default:
                                    b = -o.getHeight() / 2;
                                    break
                            }
                        } else {
                            b = -o.getHeight() / 2
                        }
                        var D = this.u2p(o.value) + b + "px";
                        o._elem.css("top", D);
                        o.pack()
                    }
                }
                var z = ["left", 0];
                if (q) {
                    var y = this._label._elem.outerHeight(true);
                    this._label._elem.css("top", n - g / 2 - y / 2 + "px");
                    if (this.name == "yaxis") {
                        this._label._elem.css("left", "0px");
                        z = ["left", this._label._elem.outerWidth(true)]
                    } else {
                        this._label._elem.css("right", "0px");
                        z = ["right", this._label._elem.outerWidth(true)]
                    }
                    this._label.pack()
                }
                var d = parseInt(this._ticks.length / this.groups, 10) + 1;
                for (x = 0; x < this._groupLabels.length; x++) {
                    var B = 0;
                    var f = 0;
                    for (var u = x * d; u < (x + 1) * d; u++) {
                        if (u >= this._ticks.length - 1) {
                            continue
                        }
                        if (this._ticks[u]._elem && this._ticks[u].label != " ") {
                            var o = this._ticks[u]._elem;
                            var r = o.position();
                            B += r.top + o.outerHeight() / 2;
                            f++
                        }
                    }
                    B = B / f;
                    this._groupLabels[x].css({top: B - this._groupLabels[x].outerHeight() / 2});
                    this._groupLabels[x].css(z[0], z[1])
                }
            }
        }
    }
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (c) {
    c.jqplot.PointLabels = function (e) {
        this.show = c.jqplot.config.enablePlugins;
        this.location = "n";
        this.labelsFromSeries = false;
        this.seriesLabelIndex = null;
        this.labels = [];
        this._labels = [];
        this.stackedValue = false;
        this.ypadding = 6;
        this.xpadding = 6;
        this.escapeHTML = true;
        this.edgeTolerance = -5;
        this.formatter = c.jqplot.DefaultTickFormatter;
        this.formatString = "";
        this.hideZeros = false;
        this._elems = [];
        c.extend(true, this, e)
    };
    var a = ["nw", "n", "ne", "e", "se", "s", "sw", "w"];
    var d = {nw: 0, n: 1, ne: 2, e: 3, se: 4, s: 5, sw: 6, w: 7};
    var b = ["se", "s", "sw", "w", "nw", "n", "ne", "e"];
    c.jqplot.PointLabels.init = function (j, h, f, g, i) {
        var e = c.extend(true, {}, f, g);
        e.pointLabels = e.pointLabels || {};
        if (this.renderer.constructor === c.jqplot.BarRenderer && this.barDirection === "horizontal" && !e.pointLabels.location) {
            e.pointLabels.location = "e"
        }
        this.plugins.pointLabels = new c.jqplot.PointLabels(e.pointLabels);
        this.plugins.pointLabels.setLabels.call(this)
    };
    c.jqplot.PointLabels.prototype.setLabels = function () {
        var f = this.plugins.pointLabels;
        var h;
        if (f.seriesLabelIndex != null) {
            h = f.seriesLabelIndex
        } else {
            if (this.renderer.constructor === c.jqplot.BarRenderer && this.barDirection === "horizontal") {
                h = (this._plotData[0].length < 3) ? 0 : this._plotData[0].length - 1
            } else {
                h = (this._plotData.length === 0) ? 0 : this._plotData[0].length - 1
            }
        }
        f._labels = [];
        if (f.labels.length === 0 || f.labelsFromSeries) {
            if (f.stackedValue) {
                if (this._plotData.length && this._plotData[0].length) {
                    for (var e = 0; e < this._plotData.length; e++) {
                        f._labels.push(this._plotData[e][h])
                    }
                }
            } else {
                var g = this.data;
                if (this.renderer.constructor === c.jqplot.BarRenderer && this.waterfall) {
                    g = this._data
                }
                if (g.length && g[0].length) {
                    for (var e = 0; e < g.length; e++) {
                        f._labels.push(g[e][h])
                    }
                }
                g = null
            }
        } else {
            if (f.labels.length) {
                f._labels = f.labels
            }
        }
    };
    c.jqplot.PointLabels.prototype.xOffset = function (f, e, g) {
        e = e || this.location;
        g = g || this.xpadding;
        var h;
        switch (e) {
            case"nw":
                h = -f.outerWidth(true) - this.xpadding;
                break;
            case"n":
                h = -f.outerWidth(true) / 2;
                break;
            case"ne":
                h = this.xpadding;
                break;
            case"e":
                h = this.xpadding;
                break;
            case"se":
                h = this.xpadding;
                break;
            case"s":
                h = -f.outerWidth(true) / 2;
                break;
            case"sw":
                h = -f.outerWidth(true) - this.xpadding;
                break;
            case"w":
                h = -f.outerWidth(true) - this.xpadding;
                break;
            default:
                h = -f.outerWidth(true) - this.xpadding;
                break
        }
        return h
    };
    c.jqplot.PointLabels.prototype.yOffset = function (f, e, g) {
        e = e || this.location;
        g = g || this.xpadding;
        var h;
        switch (e) {
            case"nw":
                h = -f.outerHeight(true) - this.ypadding;
                break;
            case"n":
                h = -f.outerHeight(true) - this.ypadding;
                break;
            case"ne":
                h = -f.outerHeight(true) - this.ypadding;
                break;
            case"e":
                h = -f.outerHeight(true) / 2;
                break;
            case"se":
                h = this.ypadding;
                break;
            case"s":
                h = this.ypadding;
                break;
            case"sw":
                h = this.ypadding;
                break;
            case"w":
                h = -f.outerHeight(true) / 2;
                break;
            default:
                h = -f.outerHeight(true) - this.ypadding;
                break
        }
        return h
    };
    c.jqplot.PointLabels.draw = function (x, j, v) {
        var t = this.plugins.pointLabels;
        t.setLabels.call(this);
        for (var w = 0; w < t._elems.length; w++) {
            t._elems[w].emptyForce()
        }
        t._elems.splice(0, t._elems.length);
        if (t.show) {
            var r = "_" + this._stackAxis + "axis";
            if (!t.formatString) {
                t.formatString = this[r]._ticks[0].formatString;
                t.formatter = this[r]._ticks[0].formatter
            }
            var E = this._plotData;
            var D = this._prevPlotData;
            var A = this._xaxis;
            var q = this._yaxis;
            var z, f;
            for (var w = 0, u = t._labels.length; w < u; w++) {
                var o = t._labels[w];
                if (o == null || (t.hideZeros && parseInt(o, 10) == 0)) {
                    continue
                }
                o = t.formatter(t.formatString, o);
                f = document.createElement("div");
                t._elems[w] = c(f);
                z = t._elems[w];
                z.addClass("jqplot-point-label jqplot-series-" + this.index + " jqplot-point-" + w);
                z.css("position", "absolute");
                z.insertAfter(x.canvas);
                if (t.escapeHTML) {
                    z.text(o)
                } else {
                    z.html(o)
                }
                var g = t.location;
                if ((this.fillToZero && E[w][1] < 0) || (this.fillToZero && this._type === "bar" && this.barDirection === "horizontal" && E[w][0] < 0) || (this.waterfall && parseInt(o, 10)) < 0) {
                    g = b[d[g]]
                }
                var n = A.u2p(E[w][0]) + t.xOffset(z, g);
                var h = q.u2p(E[w][1]) + t.yOffset(z, g);
                if (this._stack && !t.stackedValue) {
                    if (this.barDirection === "vertical") {
                        h = (this._barPoints[w][0][1] + this._barPoints[w][1][1]) / 2 + v._gridPadding.top - 0.5 * z.outerHeight(true)
                    } else {
                        n = (this._barPoints[w][2][0] + this._barPoints[w][0][0]) / 2 + v._gridPadding.left - 0.5 * z.outerWidth(true)
                    }
                }
                if (this.renderer.constructor == c.jqplot.BarRenderer) {
                    if (this.barDirection == "vertical") {
                        n += this._barNudge
                    } else {
                        h -= this._barNudge
                    }
                }
                z.css("left", n);
                z.css("top", h);
                var k = n + z.width();
                var s = h + z.height();
                var C = t.edgeTolerance;
                var e = c(x.canvas).position().left;
                var y = c(x.canvas).position().top;
                var B = x.canvas.width + e;
                var m = x.canvas.height + y;
                if (n - C < e || h - C < y || k + C > B || s + C > m) {
                    z.remove()
                }
                z = null;
                f = null
            }
        }
    };
    c.jqplot.postSeriesInitHooks.push(c.jqplot.PointLabels.init);
    c.jqplot.postDrawSeriesHooks.push(c.jqplot.PointLabels.draw)
})(jQuery);
/* jqPlot 1.0.8r1250 | (c) 2009-2013 Chris Leonello | jplot.com
 jsDate | (c) 2010-2013 Chris Leonello
 */

(function (j) {
    j.jqplot.Cursor = function (q) {
        this.style = "crosshair";
        this.previousCursor = "auto";
        this.show = j.jqplot.config.enablePlugins;
        this.showTooltip = true;
        this.followMouse = false;
        this.tooltipLocation = "se";
        this.tooltipOffset = 6;
        this.showTooltipGridPosition = false;
        this.showTooltipUnitPosition = true;
        this.showTooltipDataPosition = false;
        this.tooltipFormatString = "%.4P, %.4P";
        this.useAxesFormatters = true;
        this.tooltipAxisGroups = [];
        this.zoom = false;
        this.zoomProxy = false;
        this.zoomTarget = false;
        this.looseZoom = true;
        this.clickReset = false;
        this.dblClickReset = true;
        this.showVerticalLine = false;
        this.showHorizontalLine = false;
        this.constrainZoomTo = "none";
        this.shapeRenderer = new j.jqplot.ShapeRenderer();
        this._zoom = {start: [], end: [], started: false, zooming: false, isZoomed: false, axes: {start: {}, end: {}}, gridpos: {}, datapos: {}};
        this._tooltipElem;
        this.zoomCanvas;
        this.cursorCanvas;
        this.intersectionThreshold = 2;
        this.showCursorLegend = false;
        this.cursorLegendFormatString = j.jqplot.Cursor.cursorLegendFormatString;
        this._oldHandlers = {onselectstart: null, ondrag: null, onmousedown: null};
        this.constrainOutsideZoom = true;
        this.showTooltipOutsideZoom = false;
        this.onGrid = false;
        j.extend(true, this, q)
    };
    j.jqplot.Cursor.cursorLegendFormatString = "%s x:%s, y:%s";
    j.jqplot.Cursor.init = function (t, s, r) {
        var q = r || {};
        this.plugins.cursor = new j.jqplot.Cursor(q.cursor);
        var u = this.plugins.cursor;
        if (u.show) {
            j.jqplot.eventListenerHooks.push(["jqplotMouseEnter", b]);
            j.jqplot.eventListenerHooks.push(["jqplotMouseLeave", f]);
            j.jqplot.eventListenerHooks.push(["jqplotMouseMove", i]);
            if (u.showCursorLegend) {
                r.legend = r.legend || {};
                r.legend.renderer = j.jqplot.CursorLegendRenderer;
                r.legend.formatString = this.plugins.cursor.cursorLegendFormatString;
                r.legend.show = true
            }
            if (u.zoom) {
                j.jqplot.eventListenerHooks.push(["jqplotMouseDown", a]);
                if (u.clickReset) {
                    j.jqplot.eventListenerHooks.push(["jqplotClick", k])
                }
                if (u.dblClickReset) {
                    j.jqplot.eventListenerHooks.push(["jqplotDblClick", c])
                }
            }
            this.resetZoom = function () {
                var x = this.axes;
                if (!u.zoomProxy) {
                    for (var w in x) {
                        x[w].reset();
                        x[w]._ticks = [];
                        if (u._zoom.axes[w] !== undefined) {
                            x[w]._autoFormatString = u._zoom.axes[w].tickFormatString
                        }
                    }
                    this.redraw()
                } else {
                    var v = this.plugins.cursor.zoomCanvas._ctx;
                    v.clearRect(0, 0, v.canvas.width, v.canvas.height);
                    v = null
                }
                this.plugins.cursor._zoom.isZoomed = false;
                this.target.trigger("jqplotResetZoom", [this, this.plugins.cursor])
            };
            if (u.showTooltipDataPosition) {
                u.showTooltipUnitPosition = false;
                u.showTooltipGridPosition = false;
                if (q.cursor.tooltipFormatString == undefined) {
                    u.tooltipFormatString = j.jqplot.Cursor.cursorLegendFormatString
                }
            }
        }
    };
    j.jqplot.Cursor.postDraw = function () {
        var x = this.plugins.cursor;
        if (x.zoomCanvas) {
            x.zoomCanvas.resetCanvas();
            x.zoomCanvas = null
        }
        if (x.cursorCanvas) {
            x.cursorCanvas.resetCanvas();
            x.cursorCanvas = null
        }
        if (x._tooltipElem) {
            x._tooltipElem.emptyForce();
            x._tooltipElem = null
        }
        if (x.zoom) {
            x.zoomCanvas = new j.jqplot.GenericCanvas();
            this.eventCanvas._elem.before(x.zoomCanvas.createElement(this._gridPadding, "jqplot-zoom-canvas", this._plotDimensions, this));
            x.zoomCanvas.setContext()
        }
        var v = document.createElement("div");
        x._tooltipElem = j(v);
        v = null;
        x._tooltipElem.addClass("jqplot-cursor-tooltip");
        x._tooltipElem.css({position: "absolute", display: "none"});
        if (x.zoomCanvas) {
            x.zoomCanvas._elem.before(x._tooltipElem)
        } else {
            this.eventCanvas._elem.before(x._tooltipElem)
        }
        if (x.showVerticalLine || x.showHorizontalLine) {
            x.cursorCanvas = new j.jqplot.GenericCanvas();
            this.eventCanvas._elem.before(x.cursorCanvas.createElement(this._gridPadding, "jqplot-cursor-canvas", this._plotDimensions, this));
            x.cursorCanvas.setContext()
        }
        if (x.showTooltipUnitPosition) {
            if (x.tooltipAxisGroups.length === 0) {
                var t = this.series;
                var u;
                var q = [];
                for (var r = 0; r < t.length; r++) {
                    u = t[r];
                    var w = u.xaxis + "," + u.yaxis;
                    if (j.inArray(w, q) == -1) {
                        q.push(w)
                    }
                }
                for (var r = 0; r < q.length; r++) {
                    x.tooltipAxisGroups.push(q[r].split(","))
                }
            }
        }
    };
    j.jqplot.Cursor.zoomProxy = function (v, r) {
        var q = v.plugins.cursor;
        var u = r.plugins.cursor;
        q.zoomTarget = true;
        q.zoom = true;
        q.style = "auto";
        q.dblClickReset = false;
        u.zoom = true;
        u.zoomProxy = true;
        r.target.bind("jqplotZoom", t);
        r.target.bind("jqplotResetZoom", s);
        function t(x, w, z, y, A) {
            q.doZoom(w, z, v, A)
        }

        function s(w, x, y) {
            v.resetZoom()
        }
    };
    j.jqplot.Cursor.prototype.resetZoom = function (u, v) {
        var t = u.axes;
        var s = v._zoom.axes;
        if (!u.plugins.cursor.zoomProxy && v._zoom.isZoomed) {
            for (var r in t) {
                t[r].reset();
                t[r]._ticks = [];
                t[r]._autoFormatString = s[r].tickFormatString
            }
            u.redraw();
            v._zoom.isZoomed = false
        } else {
            var q = v.zoomCanvas._ctx;
            q.clearRect(0, 0, q.canvas.width, q.canvas.height);
            q = null
        }
        u.target.trigger("jqplotResetZoom", [u, v])
    };
    j.jqplot.Cursor.resetZoom = function (q) {
        q.resetZoom()
    };
    j.jqplot.Cursor.prototype.doZoom = function (G, t, C, u) {
        var I = u;
        var F = C.axes;
        var r = I._zoom.axes;
        var w = r.start;
        var s = r.end;
        var B, E, z, D, v, x, q, H, J;
        var A = C.plugins.cursor.zoomCanvas._ctx;
        if ((I.constrainZoomTo == "none" && Math.abs(G.x - I._zoom.start[0]) > 6 && Math.abs(G.y - I._zoom.start[1]) > 6) || (I.constrainZoomTo == "x" && Math.abs(G.x - I._zoom.start[0]) > 6) || (I.constrainZoomTo == "y" && Math.abs(G.y - I._zoom.start[1]) > 6)) {
            if (!C.plugins.cursor.zoomProxy) {
                for (var y in t) {
                    if (I._zoom.axes[y] == undefined) {
                        I._zoom.axes[y] = {};
                        I._zoom.axes[y].numberTicks = F[y].numberTicks;
                        I._zoom.axes[y].tickInterval = F[y].tickInterval;
                        I._zoom.axes[y].daTickInterval = F[y].daTickInterval;
                        I._zoom.axes[y].min = F[y].min;
                        I._zoom.axes[y].max = F[y].max;
                        I._zoom.axes[y].tickFormatString = (F[y].tickOptions != null) ? F[y].tickOptions.formatString : ""
                    }
                    if ((I.constrainZoomTo == "none") || (I.constrainZoomTo == "x" && y.charAt(0) == "x") || (I.constrainZoomTo == "y" && y.charAt(0) == "y")) {
                        z = t[y];
                        if (z != null) {
                            if (z > w[y]) {
                                v = w[y];
                                x = z
                            } else {
                                D = w[y] - z;
                                v = z;
                                x = w[y]
                            }
                            q = F[y];
                            H = null;
                            if (q.alignTicks) {
                                if (q.name === "x2axis" && C.axes.xaxis.show) {
                                    H = C.axes.xaxis.numberTicks
                                } else {
                                    if (q.name.charAt(0) === "y" && q.name !== "yaxis" && q.name !== "yMidAxis" && C.axes.yaxis.show) {
                                        H = C.axes.yaxis.numberTicks
                                    }
                                }
                            }
                            if (this.looseZoom && (F[y].renderer.constructor === j.jqplot.LinearAxisRenderer || F[y].renderer.constructor === j.jqplot.LogAxisRenderer)) {
                                J = j.jqplot.LinearTickGenerator(v, x, q._scalefact, H);
                                if (F[y].tickInset && J[0] < F[y].min + F[y].tickInset * F[y].tickInterval) {
                                    J[0] += J[4];
                                    J[2] -= 1
                                }
                                if (F[y].tickInset && J[1] > F[y].max - F[y].tickInset * F[y].tickInterval) {
                                    J[1] -= J[4];
                                    J[2] -= 1
                                }
                                if (F[y].renderer.constructor === j.jqplot.LogAxisRenderer && J[0] < F[y].min) {
                                    J[0] += J[4];
                                    J[2] -= 1
                                }
                                F[y].min = J[0];
                                F[y].max = J[1];
                                F[y]._autoFormatString = J[3];
                                F[y].numberTicks = J[2];
                                F[y].tickInterval = J[4];
                                F[y].daTickInterval = [J[4] / 1000, "seconds"]
                            } else {
                                F[y].min = v;
                                F[y].max = x;
                                F[y].tickInterval = null;
                                F[y].numberTicks = null;
                                F[y].daTickInterval = null
                            }
                            F[y]._ticks = []
                        }
                    }
                }
                A.clearRect(0, 0, A.canvas.width, A.canvas.height);
                C.redraw();
                I._zoom.isZoomed = true;
                A = null
            }
            C.target.trigger("jqplotZoom", [G, t, C, u])
        }
    };
    j.jqplot.preInitHooks.push(j.jqplot.Cursor.init);
    j.jqplot.postDrawHooks.push(j.jqplot.Cursor.postDraw);
    function e(G, r, C) {
        var J = C.plugins.cursor;
        var w = "";
        var N = false;
        if (J.showTooltipGridPosition) {
            w = G.x + ", " + G.y;
            N = true
        }
        if (J.showTooltipUnitPosition) {
            var F;
            for (var E = 0; E < J.tooltipAxisGroups.length; E++) {
                F = J.tooltipAxisGroups[E];
                if (N) {
                    w += "<br />"
                }
                if (J.useAxesFormatters) {
                    for (var D = 0; D < F.length; D++) {
                        if (D) {
                            w += ", "
                        }
                        var H = C.axes[F[D]]._ticks[0].formatter;
                        var B = C.axes[F[D]]._ticks[0].formatString;
                        w += H(B, r[F[D]])
                    }
                } else {
                    w += j.jqplot.sprintf(J.tooltipFormatString, r[F[0]], r[F[1]])
                }
                N = true
            }
        }
        if (J.showTooltipDataPosition) {
            var u = C.series;
            var M = d(C, G.x, G.y);
            var N = false;
            for (var E = 0; E < u.length; E++) {
                if (u[E].show) {
                    var y = u[E].index;
                    var t = u[E].label.toString();
                    var I = j.inArray(y, M.indices);
                    var z = undefined;
                    var x = undefined;
                    if (I != -1) {
                        var L = M.data[I].data;
                        if (J.useAxesFormatters) {
                            var A = u[E]._xaxis._ticks[0].formatter;
                            var q = u[E]._yaxis._ticks[0].formatter;
                            var K = u[E]._xaxis._ticks[0].formatString;
                            var v = u[E]._yaxis._ticks[0].formatString;
                            z = A(K, L[0]);
                            x = q(v, L[1])
                        } else {
                            z = L[0];
                            x = L[1]
                        }
                        if (N) {
                            w += "<br />"
                        }
                        w += j.jqplot.sprintf(J.tooltipFormatString, t, z, x);
                        N = true
                    }
                }
            }
        }
        J._tooltipElem.html(w)
    }

    function g(C, A) {
        var E = A.plugins.cursor;
        var z = E.cursorCanvas._ctx;
        z.clearRect(0, 0, z.canvas.width, z.canvas.height);
        if (E.showVerticalLine) {
            E.shapeRenderer.draw(z, [
                [C.x, 0],
                [C.x, z.canvas.height]
            ])
        }
        if (E.showHorizontalLine) {
            E.shapeRenderer.draw(z, [
                [0, C.y],
                [z.canvas.width, C.y]
            ])
        }
        var G = d(A, C.x, C.y);
        if (E.showCursorLegend) {
            var r = j(A.targetId + " td.jqplot-cursor-legend-label");
            for (var B = 0; B < r.length; B++) {
                var v = j(r[B]).data("seriesIndex");
                var t = A.series[v];
                var s = t.label.toString();
                var D = j.inArray(v, G.indices);
                var x = undefined;
                var w = undefined;
                if (D != -1) {
                    var H = G.data[D].data;
                    if (E.useAxesFormatters) {
                        var y = t._xaxis._ticks[0].formatter;
                        var q = t._yaxis._ticks[0].formatter;
                        var F = t._xaxis._ticks[0].formatString;
                        var u = t._yaxis._ticks[0].formatString;
                        x = y(F, H[0]);
                        w = q(u, H[1])
                    } else {
                        x = H[0];
                        w = H[1]
                    }
                }
                if (A.legend.escapeHtml) {
                    j(r[B]).text(j.jqplot.sprintf(E.cursorLegendFormatString, s, x, w))
                } else {
                    j(r[B]).html(j.jqplot.sprintf(E.cursorLegendFormatString, s, x, w))
                }
            }
        }
        z = null
    }

    function d(A, F, E) {
        var B = {indices: [], data: []};
        var G, w, u, C, v, q, t;
        var z;
        var D = A.plugins.cursor;
        for (var w = 0; w < A.series.length; w++) {
            G = A.series[w];
            q = G.renderer;
            if (G.show) {
                z = D.intersectionThreshold;
                if (G.showMarker) {
                    z += G.markerRenderer.size / 2
                }
                for (var v = 0; v < G.gridData.length; v++) {
                    t = G.gridData[v];
                    if (D.showVerticalLine) {
                        if (Math.abs(F - t[0]) <= z) {
                            B.indices.push(w);
                            B.data.push({seriesIndex: w, pointIndex: v, gridData: t, data: G.data[v]})
                        }
                    }
                }
            }
        }
        return B
    }

    function n(r, t) {
        var v = t.plugins.cursor;
        var s = v._tooltipElem;
        switch (v.tooltipLocation) {
            case"nw":
                var q = r.x + t._gridPadding.left - s.outerWidth(true) - v.tooltipOffset;
                var u = r.y + t._gridPadding.top - v.tooltipOffset - s.outerHeight(true);
                break;
            case"n":
                var q = r.x + t._gridPadding.left - s.outerWidth(true) / 2;
                var u = r.y + t._gridPadding.top - v.tooltipOffset - s.outerHeight(true);
                break;
            case"ne":
                var q = r.x + t._gridPadding.left + v.tooltipOffset;
                var u = r.y + t._gridPadding.top - v.tooltipOffset - s.outerHeight(true);
                break;
            case"e":
                var q = r.x + t._gridPadding.left + v.tooltipOffset;
                var u = r.y + t._gridPadding.top - s.outerHeight(true) / 2;
                break;
            case"se":
                var q = r.x + t._gridPadding.left + v.tooltipOffset;
                var u = r.y + t._gridPadding.top + v.tooltipOffset;
                break;
            case"s":
                var q = r.x + t._gridPadding.left - s.outerWidth(true) / 2;
                var u = r.y + t._gridPadding.top + v.tooltipOffset;
                break;
            case"sw":
                var q = r.x + t._gridPadding.left - s.outerWidth(true) - v.tooltipOffset;
                var u = r.y + t._gridPadding.top + v.tooltipOffset;
                break;
            case"w":
                var q = r.x + t._gridPadding.left - s.outerWidth(true) - v.tooltipOffset;
                var u = r.y + t._gridPadding.top - s.outerHeight(true) / 2;
                break;
            default:
                var q = r.x + t._gridPadding.left + v.tooltipOffset;
                var u = r.y + t._gridPadding.top + v.tooltipOffset;
                break
        }
        s.css("left", q);
        s.css("top", u);
        s = null
    }

    function m(u) {
        var s = u._gridPadding;
        var v = u.plugins.cursor;
        var t = v._tooltipElem;
        switch (v.tooltipLocation) {
            case"nw":
                var r = s.left + v.tooltipOffset;
                var q = s.top + v.tooltipOffset;
                t.css("left", r);
                t.css("top", q);
                break;
            case"n":
                var r = (s.left + (u._plotDimensions.width - s.right)) / 2 - t.outerWidth(true) / 2;
                var q = s.top + v.tooltipOffset;
                t.css("left", r);
                t.css("top", q);
                break;
            case"ne":
                var r = s.right + v.tooltipOffset;
                var q = s.top + v.tooltipOffset;
                t.css({right: r, top: q});
                break;
            case"e":
                var r = s.right + v.tooltipOffset;
                var q = (s.top + (u._plotDimensions.height - s.bottom)) / 2 - t.outerHeight(true) / 2;
                t.css({right: r, top: q});
                break;
            case"se":
                var r = s.right + v.tooltipOffset;
                var q = s.bottom + v.tooltipOffset;
                t.css({right: r, bottom: q});
                break;
            case"s":
                var r = (s.left + (u._plotDimensions.width - s.right)) / 2 - t.outerWidth(true) / 2;
                var q = s.bottom + v.tooltipOffset;
                t.css({left: r, bottom: q});
                break;
            case"sw":
                var r = s.left + v.tooltipOffset;
                var q = s.bottom + v.tooltipOffset;
                t.css({left: r, bottom: q});
                break;
            case"w":
                var r = s.left + v.tooltipOffset;
                var q = (s.top + (u._plotDimensions.height - s.bottom)) / 2 - t.outerHeight(true) / 2;
                t.css({left: r, top: q});
                break;
            default:
                var r = s.right - v.tooltipOffset;
                var q = s.bottom + v.tooltipOffset;
                t.css({right: r, bottom: q});
                break
        }
        t = null
    }

    function k(r, q, v, u, t) {
        r.preventDefault();
        r.stopImmediatePropagation();
        var w = t.plugins.cursor;
        if (w.clickReset) {
            w.resetZoom(t, w)
        }
        var s = window.getSelection;
        if (document.selection && document.selection.empty) {
            document.selection.empty()
        } else {
            if (s && !s().isCollapsed) {
                s().collapse()
            }
        }
        return false
    }

    function c(r, q, v, u, t) {
        r.preventDefault();
        r.stopImmediatePropagation();
        var w = t.plugins.cursor;
        if (w.dblClickReset) {
            w.resetZoom(t, w)
        }
        var s = window.getSelection;
        if (document.selection && document.selection.empty) {
            document.selection.empty()
        } else {
            if (s && !s().isCollapsed) {
                s().collapse()
            }
        }
        return false
    }

    function f(w, t, q, z, u) {
        var v = u.plugins.cursor;
        v.onGrid = false;
        if (v.show) {
            j(w.target).css("cursor", v.previousCursor);
            if (v.showTooltip && !(v._zoom.zooming && v.showTooltipOutsideZoom && !v.constrainOutsideZoom)) {
                v._tooltipElem.empty();
                v._tooltipElem.hide()
            }
            if (v.zoom) {
                v._zoom.gridpos = t;
                v._zoom.datapos = q
            }
            if (v.showVerticalLine || v.showHorizontalLine) {
                var B = v.cursorCanvas._ctx;
                B.clearRect(0, 0, B.canvas.width, B.canvas.height);
                B = null
            }
            if (v.showCursorLegend) {
                var A = j(u.targetId + " td.jqplot-cursor-legend-label");
                for (var s = 0; s < A.length; s++) {
                    var y = j(A[s]).data("seriesIndex");
                    var r = u.series[y];
                    var x = r.label.toString();
                    if (u.legend.escapeHtml) {
                        j(A[s]).text(j.jqplot.sprintf(v.cursorLegendFormatString, x, undefined, undefined))
                    } else {
                        j(A[s]).html(j.jqplot.sprintf(v.cursorLegendFormatString, x, undefined, undefined))
                    }
                }
            }
        }
    }

    function b(r, q, u, t, s) {
        var v = s.plugins.cursor;
        v.onGrid = true;
        if (v.show) {
            v.previousCursor = r.target.style.cursor;
            r.target.style.cursor = v.style;
            if (v.showTooltip) {
                e(q, u, s);
                if (v.followMouse) {
                    n(q, s)
                } else {
                    m(s)
                }
                v._tooltipElem.show()
            }
            if (v.showVerticalLine || v.showHorizontalLine) {
                g(q, s)
            }
        }
    }

    function i(r, q, u, t, s) {
        var v = s.plugins.cursor;
        if (v.show) {
            if (v.showTooltip) {
                e(q, u, s);
                if (v.followMouse) {
                    n(q, s)
                }
            }
            if (v.showVerticalLine || v.showHorizontalLine) {
                g(q, s)
            }
        }
    }

    function o(y) {
        var x = y.data.plot;
        var t = x.eventCanvas._elem.offset();
        var w = {x: y.pageX - t.left, y: y.pageY - t.top};
        var u = {xaxis: null, yaxis: null, x2axis: null, y2axis: null, y3axis: null, y4axis: null, y5axis: null, y6axis: null, y7axis: null, y8axis: null, y9axis: null, yMidAxis: null};
        var v = ["xaxis", "yaxis", "x2axis", "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis", "yMidAxis"];
        var q = x.axes;
        var r, s;
        for (r = 11; r > 0; r--) {
            s = v[r - 1];
            if (q[s].show) {
                u[s] = q[s].series_p2u(w[s.charAt(0)])
            }
        }
        return{offsets: t, gridPos: w, dataPos: u}
    }

    function h(z) {
        var x = z.data.plot;
        var y = x.plugins.cursor;
        if (y.show && y.zoom && y._zoom.started && !y.zoomTarget) {
            z.preventDefault();
            var B = y.zoomCanvas._ctx;
            var v = o(z);
            var w = v.gridPos;
            var t = v.dataPos;
            y._zoom.gridpos = w;
            y._zoom.datapos = t;
            y._zoom.zooming = true;
            var u = w.x;
            var s = w.y;
            var A = B.canvas.height;
            var q = B.canvas.width;
            if (y.showTooltip && !y.onGrid && y.showTooltipOutsideZoom) {
                e(w, t, x);
                if (y.followMouse) {
                    n(w, x)
                }
            }
            if (y.constrainZoomTo == "x") {
                y._zoom.end = [u, A]
            } else {
                if (y.constrainZoomTo == "y") {
                    y._zoom.end = [q, s]
                } else {
                    y._zoom.end = [u, s]
                }
            }
            var r = window.getSelection;
            if (document.selection && document.selection.empty) {
                document.selection.empty()
            } else {
                if (r && !r().isCollapsed) {
                    r().collapse()
                }
            }
            l.call(y);
            B = null
        }
    }

    function a(w, s, r, x, t) {
        var v = t.plugins.cursor;
        if (t.plugins.mobile) {
            j(document).one("vmouseup.jqplot_cursor", {plot: t}, p)
        } else {
            j(document).one("mouseup.jqplot_cursor", {plot: t}, p)
        }
        var u = t.axes;
        if (document.onselectstart != undefined) {
            v._oldHandlers.onselectstart = document.onselectstart;
            document.onselectstart = function () {
                return false
            }
        }
        if (document.ondrag != undefined) {
            v._oldHandlers.ondrag = document.ondrag;
            document.ondrag = function () {
                return false
            }
        }
        if (document.onmousedown != undefined) {
            v._oldHandlers.onmousedown = document.onmousedown;
            document.onmousedown = function () {
                return false
            }
        }
        if (v.zoom) {
            if (!v.zoomProxy) {
                var y = v.zoomCanvas._ctx;
                y.clearRect(0, 0, y.canvas.width, y.canvas.height);
                y = null
            }
            if (v.constrainZoomTo == "x") {
                v._zoom.start = [s.x, 0]
            } else {
                if (v.constrainZoomTo == "y") {
                    v._zoom.start = [0, s.y]
                } else {
                    v._zoom.start = [s.x, s.y]
                }
            }
            v._zoom.started = true;
            for (var q in r) {
                v._zoom.axes.start[q] = r[q]
            }
            if (t.plugins.mobile) {
                j(document).bind("vmousemove.jqplotCursor", {plot: t}, h)
            } else {
                j(document).bind("mousemove.jqplotCursor", {plot: t}, h)
            }
        }
    }

    function p(y) {
        var v = y.data.plot;
        var x = v.plugins.cursor;
        if (x.zoom && x._zoom.zooming && !x.zoomTarget) {
            var u = x._zoom.gridpos.x;
            var r = x._zoom.gridpos.y;
            var t = x._zoom.datapos;
            var z = x.zoomCanvas._ctx.canvas.height;
            var q = x.zoomCanvas._ctx.canvas.width;
            var w = v.axes;
            if (x.constrainOutsideZoom && !x.onGrid) {
                if (u < 0) {
                    u = 0
                } else {
                    if (u > q) {
                        u = q
                    }
                }
                if (r < 0) {
                    r = 0
                } else {
                    if (r > z) {
                        r = z
                    }
                }
                for (var s in t) {
                    if (t[s]) {
                        if (s.charAt(0) == "x") {
                            t[s] = w[s].series_p2u(u)
                        } else {
                            t[s] = w[s].series_p2u(r)
                        }
                    }
                }
            }
            if (x.constrainZoomTo == "x") {
                r = z
            } else {
                if (x.constrainZoomTo == "y") {
                    u = q
                }
            }
            x._zoom.end = [u, r];
            x._zoom.gridpos = {x: u, y: r};
            x.doZoom(x._zoom.gridpos, t, v, x)
        }
        x._zoom.started = false;
        x._zoom.zooming = false;
        j(document).unbind("mousemove.jqplotCursor", h);
        if (document.onselectstart != undefined && x._oldHandlers.onselectstart != null) {
            document.onselectstart = x._oldHandlers.onselectstart;
            x._oldHandlers.onselectstart = null
        }
        if (document.ondrag != undefined && x._oldHandlers.ondrag != null) {
            document.ondrag = x._oldHandlers.ondrag;
            x._oldHandlers.ondrag = null
        }
        if (document.onmousedown != undefined && x._oldHandlers.onmousedown != null) {
            document.onmousedown = x._oldHandlers.onmousedown;
            x._oldHandlers.onmousedown = null
        }
    }

    function l() {
        var y = this._zoom.start;
        var u = this._zoom.end;
        var s = this.zoomCanvas._ctx;
        var r, v, x, q;
        if (u[0] > y[0]) {
            r = y[0];
            q = u[0] - y[0]
        } else {
            r = u[0];
            q = y[0] - u[0]
        }
        if (u[1] > y[1]) {
            v = y[1];
            x = u[1] - y[1]
        } else {
            v = u[1];
            x = y[1] - u[1]
        }
        s.fillStyle = "rgba(0,0,0,0.2)";
        s.strokeStyle = "#999999";
        s.lineWidth = 1;
        s.clearRect(0, 0, s.canvas.width, s.canvas.height);
        s.fillRect(0, 0, s.canvas.width, s.canvas.height);
        s.clearRect(r, v, q, x);
        s.strokeRect(r, v, q, x);
        s = null
    }

    j.jqplot.CursorLegendRenderer = function (q) {
        j.jqplot.TableLegendRenderer.call(this, q);
        this.formatString = "%s"
    };
    j.jqplot.CursorLegendRenderer.prototype = new j.jqplot.TableLegendRenderer();
    j.jqplot.CursorLegendRenderer.prototype.constructor = j.jqplot.CursorLegendRenderer;
    j.jqplot.CursorLegendRenderer.prototype.draw = function () {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null
        }
        if (this.show) {
            var w = this._series, A;
            var r = document.createElement("table");
            this._elem = j(r);
            r = null;
            this._elem.addClass("jqplot-legend jqplot-cursor-legend");
            this._elem.css("position", "absolute");
            var q = false;
            for (var x = 0; x < w.length; x++) {
                A = w[x];
                if (A.show && A.showLabel) {
                    var v = j.jqplot.sprintf(this.formatString, A.label.toString());
                    if (v) {
                        var t = A.color;
                        if (A._stack && !A.fill) {
                            t = ""
                        }
                        z.call(this, v, t, q, x);
                        q = true
                    }
                    for (var u = 0; u < j.jqplot.addLegendRowHooks.length; u++) {
                        var y = j.jqplot.addLegendRowHooks[u].call(this, A);
                        if (y) {
                            z.call(this, y.label, y.color, q);
                            q = true
                        }
                    }
                }
            }
            w = A = null;
            delete w;
            delete A
        }
        function z(D, C, F, s) {
            var B = (F) ? this.rowSpacing : "0";
            var E = j('<tr class="jqplot-legend jqplot-cursor-legend"></tr>').appendTo(this._elem);
            E.data("seriesIndex", s);
            j('<td class="jqplot-legend jqplot-cursor-legend-swatch" style="padding-top:' + B + ';"><div style="border:1px solid #cccccc;padding:0.2em;"><div class="jqplot-cursor-legend-swatch" style="background-color:' + C + ';"></div></div></td>').appendTo(E);
            var G = j('<td class="jqplot-legend jqplot-cursor-legend-label" style="vertical-align:middle;padding-top:' + B + ';"></td>');
            G.appendTo(E);
            G.data("seriesIndex", s);
            if (this.escapeHtml) {
                G.text(D)
            } else {
                G.html(D)
            }
            E = null;
            G = null
        }

        return this._elem
    }
})(jQuery);
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//














//ALTERA O TAMANHO DE TODAS OS ELEMENTOS DENTRO DO CONTENT
var content_width = 830;
var content_height = 274;
